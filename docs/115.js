"use strict";(self.webpackChunkcomposite_component_library=self.webpackChunkcomposite_component_library||[]).push([[115],{87115:(e,n,l)=>{l.d(n,{A:()=>w,w:()=>x});var t=l(64467),o=l(80045),s=l(96540),a=l(28073),i=l(29029),r=l(91196),c=l(36492);const u="CustomMultiSelect_customMultiSelect__Szlbw",d="CustomMultiSelect_customMultiSelectDropdown__kstkD",p="CustomMultiSelect_allCheck__KJdNO",m="CustomMultiSelect_allCheckbox__i+3wQ",h="CustomMultiSelect_clear__eDMXv",g="CustomMultiSelect_checkCount__XY64p",y="CustomMultiSelect_options__Ltr01";var b=l(74848);const v=["value","options","customOptionLabel","dropdownRenderContent","disabled","onChange","searchKeys","onSearch","customFilter","maxTagCount","showSimplePlaceholder","onDropdownVisibleChange","fieldNames","loading","style"];function f(e,n){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.push.apply(l,t)}return l}function C(e){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?f(Object(l),!0).forEach((function(n){(0,t.A)(e,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):f(Object(l)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(l,n))}))}return e}const S=Symbol("labelKey"),w=e=>{const{value:n,options:l,customOptionLabel:t,dropdownRenderContent:f,disabled:w,onChange:x,searchKeys:k,onSearch:R,customFilter:O,maxTagCount:N=0,showSimplePlaceholder:V=!1,onDropdownVisibleChange:P,fieldNames:j,loading:K=!1,style:M={}}=e,L=(0,o.A)(e,v),[_,A]=(0,s.useState)(!1),D=(0,s.useRef)(!1),T=(0,s.useRef)(""),F=(e,n)=>{if(!e)return!0;if(O)return O(e,n);const l=Object.keys(n).some((l=>{const t=n[l]||"";return k&&k.length>0?k.includes(l)&&t.toString().toLowerCase().includes(e.toLocaleLowerCase()):("string"!=typeof l||!["id","key"].includes(l))&&(l!==S&&t.toString().toLowerCase().includes(e.toLocaleLowerCase()))}));return l},I=e=>{if(e){const e=(null==j?void 0:j.value)||"value",t=((null==l?void 0:l.filter((e=>!T.current||F(T.current,e))))||[]).map((n=>n[e])),o=new Set(t.concat(n||[]));null==x||x([...o])}else null==x||x([])},E=(0,s.useCallback)((e=>{e.stopPropagation(),null==x||x([])}),[]),{isAllSelected:W,indeterminate:X}=(0,s.useMemo)((()=>{const e=(null==j?void 0:j.value)||"value",t=l&&l.length>0&&n&&n.length>0&&l.every((l=>n.includes(l[e])));return{isAllSelected:t,indeterminate:!t&&n&&n.length>0}}),[n,l]),$=(0,s.useMemo)((()=>(null==l?void 0:l.map(((e,l)=>{const o=(null==j?void 0:j.label)||"label",s=(null==j?void 0:j.value)||"value";return C(C({},e),{},{[S]:t?t(e,n,l):(0,b.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,b.jsx)(r.A,{style:{marginRight:4},checked:null==n?void 0:n.includes(e[s])}),(0,b.jsx)("span",{children:e[o]})]},e[s])})})))||[]),[n,l]),z=(0,s.useMemo)((()=>{let e=C({},j||{});return e.label=S,e}),[]);return(0,b.jsx)(c.A,C(C({className:u,style:M,showSearch:!0,maxTagCount:N,maxTagPlaceholder:n&&n.length>N?()=>{const e=(null==j?void 0:j.label)||"label",t=(null==j?void 0:j.value)||"value";let o=[];return n&&n.length>0&&l&&l.length>0&&(o=l.filter((e=>n.includes(e[t])))),V?o.map((n=>n[e])).join(", "):(0,b.jsx)(a.A,{placement:"bottomLeft",content:(0,b.jsx)("div",{children:o.map((n=>(0,b.jsx)("div",{style:{display:"flex",alignItems:"center",height:24,minWidth:100,justifyContent:"space-between"},children:n[e]},n[t])))}),open:_,onOpenChange:()=>{D.current||A(!_)},children:(0,b.jsx)("div",{style:{width:"100%",marginLeft:-6,paddingLeft:6},onClick:()=>{D.current||A(!0)},children:"已选".concat(n?n.length:0,"个项目")})})}:null,value:n,onChange:x,onDropdownVisibleChange:e=>{D.current=e,null==P||P(e),A(!1),e||(T.current="")},filterOption:(e,n)=>F(e,n),loading:K},L),{},{mode:"multiple",options:$,fieldNames:z,dropdownRender:f||(e=>(0,b.jsx)("div",{className:d,children:(0,b.jsxs)(i.A,{spinning:K,children:[(0,b.jsxs)("div",{className:p,children:[(0,b.jsx)(r.A,{className:m,checked:W,indeterminate:X,onChange:()=>{I(!W)},children:(0,b.jsx)("span",{onClick:e=>{e.preventDefault(),I(!W)},children:"全选"})}),(0,b.jsx)("span",{className:h,onClick:E,children:"清空"}),(0,b.jsxs)("span",{className:g,children:["已选（",(null==n?void 0:n.length)||0,"/",(null==l?void 0:l.length)||0,"）"]})]}),(0,b.jsx)("div",{className:y,children:e})]})})),onSearch:e=>{T.current=e,null==R||R(e)}}))},x=[{fileName:"CustomMultiSelect.tsx",code:'/**\n * 可自定义的多选下拉框组件\n */\nimport React, {\n  ReactNode,\n  useState,\n  useRef,\n  useCallback,\n  useMemo,\n} from "react";\nimport { Select, Popover, Checkbox, Spin } from "antd";\nimport type { SelectProps } from "antd";\nimport styles from "./index.module.scss";\n\nexport type CustomMultiSelectProps = {\n  value?: string[];\n  options?: Record<string | symbol, any>[];\n  customOptionLabel?: (\n    option: Record<string | symbol, any>,\n    value?: string[],\n    index?: number\n  ) => ReactNode; // 自定义下拉选项的视图, 不传时，会显示默认视图；传值后，则直接使用该函数返回的视图进行显示\n  dropdownRenderContent?: (menu?: ReactNode) => ReactNode; // 下拉面板自定义视图\n  disabled?: boolean;\n  popupParentElement?: boolean; // 下拉面板是否渲染到父节点上，默认false，渲染到document.body上\n  onChange?: (value: any[], options?: Record<string, any>[]) => void;\n  searchKeys?: (string | symbol)[]; // 要进行模糊搜索的字段名列表\n  onSearch?: (searchValue: string, selected?: string[]) => void;\n  customFilter?: (\n    input: string,\n    record: Record<string | symbol, any>\n  ) => boolean; // 自定义模糊搜索\n  maxTagCount?: number;\n  showSimplePlaceholder?: boolean; // 已选中的是否只简单显示 label1, label2\n  onDropdownVisibleChange?: (openState?: boolean) => void; // 下拉面板显示隐藏时的回调\n  fieldNames?: Record<string, any>;\n  loading?: boolean;\n  style?: Record<string, any>;\n} & SelectProps;\n\nconst labelKeySymbol = Symbol("labelKey");\n\nconst CustomMultiSelect = (props: CustomMultiSelectProps) => {\n  const {\n    value,\n    options,\n    customOptionLabel,\n    dropdownRenderContent,\n    disabled,\n    onChange,\n    searchKeys,\n    onSearch,\n    customFilter,\n    maxTagCount = 0,\n    showSimplePlaceholder = false,\n    onDropdownVisibleChange,\n    fieldNames,\n    loading = false,\n    style = {},\n    ...restProps\n  } = props;\n  const [popoverVisible, setPopoverVisible] = useState<boolean>(false);\n  const dropdownOpenRef = useRef<boolean>(false);\n  const searchValueRef = useRef<string>("");\n\n  const onFilter = (\n    inputValue: string,\n    record: Record<string | symbol, any>\n  ) => {\n    if (!inputValue) return true;\n    if (customFilter) {\n      return customFilter(inputValue, record);\n    }\n\n    const result = Object.keys(record).some((key: string | symbol) => {\n      const value = record[key] || "";\n      if (searchKeys && searchKeys.length > 0) {\n        return (\n          searchKeys.includes(key) &&\n          value\n            .toString()\n            .toLowerCase()\n            .includes(inputValue.toLocaleLowerCase())\n        );\n      }\n\n      if (typeof key === "string" && ["id", "key"].includes(key)) return false;\n      if (key === labelKeySymbol) return false;\n\n      return value\n        .toString()\n        .toLowerCase()\n        .includes(inputValue.toLocaleLowerCase());\n    });\n\n    return result;\n  };\n\n  const filterOption = (\n    inputValue: string,\n    option: Record<string | symbol, any>\n  ) => {\n    return onFilter(inputValue, option);\n  };\n\n  const handleSearch = (searchValue: string) => {\n    searchValueRef.current = searchValue;\n    onSearch?.(searchValue);\n  };\n\n  const handleDropdownVisibleChange = (openState: boolean) => {\n    dropdownOpenRef.current = openState;\n    onDropdownVisibleChange?.(openState);\n    setPopoverVisible(false);\n    if (!openState) {\n      searchValueRef.current = "";\n    }\n  };\n\n  const onAllCheckboxChange = (checked: boolean) => {\n    if (checked) {\n      const valueKey = fieldNames?.value || "value";\n      const allValues = (\n        options?.filter(\n          (item: Record<string | symbol, any>) =>\n            !searchValueRef.current || onFilter(searchValueRef.current, item)\n        ) || []\n      ).map((item) => item[valueKey]);\n      const newValue = new Set(allValues.concat(value || []));\n      onChange?.([...newValue]);\n    } else {\n      onChange?.([]);\n    }\n  };\n\n  const onClear = useCallback((e: any) => {\n    e.stopPropagation();\n    onChange?.([]);\n  }, []);\n\n  const { isAllSelected, indeterminate } = useMemo(() => {\n    const valueKey = fieldNames?.value || "value";\n    const isAllSelected =\n      options &&\n      options.length > 0 &&\n      value &&\n      value.length > 0 &&\n      options.every((item: Record<string | symbol, any>) =>\n        value.includes(item[valueKey])\n      );\n    const indeterminate = !isAllSelected && value && value.length > 0;\n    return { isAllSelected, indeterminate };\n  }, [value, options]);\n\n  const hoverMaxTagPlaceholder = () => {\n    const labelKey = fieldNames?.label || "label";\n    const valueKey = fieldNames?.value || "value";\n    let selectedOptions: Record<string, any>[] = [];\n    if (value && value.length > 0 && options && options.length > 0) {\n      selectedOptions = options.filter((item: Record<string | symbol, any>) =>\n        value.includes(item[valueKey])\n      );\n    }\n\n    if (showSimplePlaceholder) {\n      return selectedOptions\n        .map((item: Record<string | symbol, any>) => item[labelKey])\n        .join(", ");\n    }\n\n    return (\n      <Popover\n        placement=\'bottomLeft\'\n        content={\n          <div>\n            {selectedOptions.map((record: Record<string | symbol, any>) => (\n              <div\n                style={{\n                  display: "flex",\n                  alignItems: "center",\n                  height: 24,\n                  minWidth: 100,\n                  justifyContent: "space-between",\n                }}\n                key={record[valueKey]}\n              >\n                {record[labelKey]}\n              </div>\n            ))}\n          </div>\n        }\n        open={popoverVisible}\n        onOpenChange={() => {\n          if (dropdownOpenRef.current) return;\n          setPopoverVisible(!popoverVisible);\n        }}\n      >\n        <div\n          style={{ width: "100%", marginLeft: -6, paddingLeft: 6 }}\n          onClick={() => {\n            if (!dropdownOpenRef.current) {\n              setPopoverVisible(true);\n            }\n          }}\n        >\n          {`已选${value ? value.length : 0}个项目`}\n        </div>\n      </Popover>\n    );\n  };\n\n  const dropdownRender = (menu: any) => (\n    <div className={styles.customMultiSelectDropdown}>\n      <Spin spinning={loading}>\n        <div className={styles.allCheck}>\n          <Checkbox\n            className={styles.allCheckbox}\n            checked={isAllSelected}\n            indeterminate={indeterminate}\n            onChange={() => {\n              onAllCheckboxChange(!isAllSelected);\n            }}\n          >\n            <span\n              onClick={(e) => {\n                e.preventDefault();\n                onAllCheckboxChange(!isAllSelected);\n              }}\n            >\n              全选\n            </span>\n          </Checkbox>\n          <span className={styles.clear} onClick={onClear}>\n            清空\n          </span>\n          <span className={styles.checkCount}>\n            已选（{value?.length || 0}/{options?.length || 0}）\n          </span>\n        </div>\n        <div className={styles.options}>{menu}</div>\n      </Spin>\n    </div>\n  );\n\n  const finalOptions = useMemo(() => {\n    return (\n      options?.map((option: Record<string | symbol, any>, index: number) => {\n        const labelKey = fieldNames?.label || "label";\n        const valueKey = fieldNames?.value || "value";\n        return {\n          ...option,\n          [labelKeySymbol]: customOptionLabel ? (\n            customOptionLabel(option, value, index)\n          ) : (\n            <div\n              style={{ display: "flex", alignItems: "center" }}\n              key={option[valueKey]}\n            >\n              <Checkbox\n                style={{ marginRight: 4 }}\n                checked={value?.includes(option[valueKey])}\n              />\n              <span>{option[labelKey]}</span>\n            </div>\n          ),\n        };\n      }) || []\n    );\n  }, [value, options]);\n\n  const finalFieldNames = useMemo(() => {\n    let newfieldNames: Record<string | symbol, any> = { ...(fieldNames || {}) };\n    newfieldNames.label = labelKeySymbol;\n    return newfieldNames;\n  }, []);\n\n  return (\n    <Select\n      className={styles.customMultiSelect}\n      style={style}\n      showSearch\n      maxTagCount={maxTagCount}\n      maxTagPlaceholder={\n        value && value.length > maxTagCount ? hoverMaxTagPlaceholder : null\n      }\n      value={value}\n      onChange={onChange as any}\n      onDropdownVisibleChange={handleDropdownVisibleChange}\n      filterOption={filterOption as any}\n      loading={loading}\n      {...restProps}\n      mode=\'multiple\'\n      options={finalOptions as any}\n      fieldNames={finalFieldNames}\n      dropdownRender={dropdownRenderContent || dropdownRender}\n      onSearch={handleSearch}\n    />\n  );\n};\n\nexport default CustomMultiSelect;'},{fileName:"CustomMultiSelect.module.scss",code:".customMultiSelect {\n  width: 100%;\n  :global {\n    .ant-select-selector {\n      .ant-select-selection-overflow {\n        .ant-select-selection-overflow-item {\n          height: 28px;\n        }\n      }\n    }\n  }\n}\n\n.customMultiSelectDropdown {\n  padding: 10px 4px;\n  .allCheck {\n    display: flex;\n    align-items: center;\n    height: 24px;\n    .allCheckbox {\n      padding-left: 0;\n      padding-bottom: 0;\n      display: flex;\n      align-items: center;\n    }\n    .clear {\n      cursor: pointer;\n      color: $globalPrimaryColor;\n    }\n    .checkCount {\n      margin-left: 6px;\n      color: #666;\n    }\n  }\n  .options {\n    :global {\n      .rc-virtual-list {\n        ::-webkit-scrollbar {\n          width: 8px !important;\n        }\n\n        ::-webkit-scrollbar-thumb {\n          border-radius: 4px !important;\n          background-color: #888 !important;\n        }\n      }\n    }\n  }\n}"}]}}]);