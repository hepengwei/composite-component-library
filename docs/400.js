"use strict";(self.webpackChunkcomposite_component_library=self.webpackChunkcomposite_component_library||[]).push([[400],{92400:(e,n,t)=>{t.r(n),t.d(n,{default:()=>ie});var r=t(96540),o=t(17186),i=t(64467),s=t(555),a=t(81935),l=t(64132),d=t(3550),m=t(36492),c=t(49237),p=t(74353),u=t.n(p),b=t(80045),g=t(92989),f=t(10401),x=t(45059),h=t(35709),v=t(91475),y=t(46942),j=t.n(y);const w="DraggableFormListContext_draggableRow__HBYMU",D="DraggableFormListContext_defaultBtn__1gMR6",F="DraggableFormListContext_disabled__9ht7A",R="DraggableFormListContext_removeBtn__ZDOLr";var L=t(74848);function A(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function O(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?A(Object(t),!0).forEach((function(n){(0,i.A)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):A(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}const I=e=>{const{quote:n,index:t,children:r,remove:o,onToTop:i,disabled:s=!1}=e;return(0,L.jsx)(f.sx,{draggableId:n.key.toString(),index:t,children:e=>(0,L.jsx)("div",O(O({ref:e.innerRef},e.draggableProps),{},{children:(0,L.jsxs)("div",{className:w,children:[(0,L.jsx)("div",O(O({},s?{}:e.dragHandleProps),{},{className:j()({[D]:!0,[F]:s}),style:{marginRight:"8px"},children:(0,L.jsx)(x.A,{})})),r,o&&(0,L.jsx)("div",{className:j()({[R]:!0,[F]:s}),style:{marginLeft:"10px"},onClick:()=>{s||o(t)},children:(0,L.jsx)(h.A,{})}),i&&(0,L.jsx)("div",{className:j()({[D]:!0,[F]:s}),style:{marginLeft:"10px"},onClick:()=>{0!==t&&(s||i(t))},children:(0,L.jsx)(v.A,{})})]})}))})},C=["key"];function k(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function P(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?k(Object(t),!0).forEach((function(n){(0,i.A)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):k(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}const _=e=>{const{droppableId:n="",fields:t,move:o,children:i,remove:s,showToTop:a=!1,disabled:l}=e,d=(0,g.A)(l),m=(0,r.useCallback)((e=>{o(e,0)}),[]);return(0,L.jsx)(f.JY,{onDragEnd:e=>{const{source:n,destination:t}=e;if(n&&t&&n.droppableId==t.droppableId&&n.index!==t.index){const e=n.index,r=t.index;o(e,r)}},children:(0,L.jsx)(f.gL,{droppableId:n,children:e=>(0,L.jsx)("div",P(P({ref:e.innerRef},e.droppableProps),{},{children:t.map(((e,n)=>{const{key:t}=e,r=(0,b.A)(e,C);return(0,L.jsx)(I,{quote:e,index:n,remove:s,onToTop:a?m:null,disabled:d,children:i(r,n)},t)}))}))})})},T=[{fileName:"DraggableFormListContext.tsx",code:'/**\n * 可上下拖拽排序的Form.List的包装组件\n */\nimport React, { useCallback, ReactNode } from "react";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport { DragDropContext, Droppable, DropResult } from "react-beautiful-dnd";\nimport type { DroppableProvided } from "react-beautiful-dnd";\nimport DraggableFormListRow from "./DraggableFormListRow";\n\ntype DraggableFormListContextProps = {\n  droppableId: string;\n  fields: Record<string, any>[];\n  move: (from: number, to: number) => void;\n  children: (quote: Record<string, any>, index?: number) => ReactNode;\n  remove?: (index: number | number[]) => void;\n  showToTop?: boolean; // 是否显示置顶按钮\n  disabled?: boolean;\n};\n\nconst DraggableFormListContext = (props: DraggableFormListContextProps) => {\n  const {\n    droppableId = "",\n    fields,\n    move,\n    children,\n    remove,\n    showToTop = false,\n    disabled: selfDisabled,\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const handleDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n    if (\n      source &&\n      destination &&\n      source.droppableId == destination.droppableId &&\n      source.index !== destination.index\n    ) {\n      const from = source.index;\n      const to = destination.index;\n      move(from, to);\n    }\n  };\n\n  const handleToTop = useCallback((index: number) => {\n    move(index, 0);\n  }, []);\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <Droppable droppableId={droppableId}>\n        {(provided: DroppableProvided) => (\n          <div ref={provided.innerRef} {...provided.droppableProps}>\n            {fields.map((quote: any, index: number) => {\n              const { key, ...restQuoteProps } = quote;\n              return (\n                <DraggableFormListRow\n                  quote={quote}\n                  index={index}\n                  remove={remove}\n                  onToTop={showToTop ? handleToTop : null}\n                  disabled={disabled}\n                  key={key}\n                >\n                  {children(restQuoteProps, index)}\n                </DraggableFormListRow>\n              );\n            })}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n\nexport default DraggableFormListContext;'},{fileName:"DraggableFormListRow.tsx",code:'/**\n * 可增加和删除多条数据的包装组件\n */\nimport React, { ReactNode } from "react";\nimport { Draggable } from "react-beautiful-dnd";\nimport type { DraggableProvided } from "react-beautiful-dnd";\nimport {\n  HolderOutlined,\n  VerticalAlignTopOutlined,\n  MinusCircleOutlined,\n} from "@ant-design/icons";\nimport classnams from "classnames";\nimport styles from "./index.module.scss";\n\ntype DraggableFormListRowProps = {\n  quote: Record<string, any>;\n  index: number;\n  children: ReactNode;\n  remove?: ((index: number) => void) | null;\n  onToTop?: ((index: number) => void) | null;\n  disabled?: boolean;\n};\n\nconst DraggableFormListRow = (props: DraggableFormListRowProps) => {\n  const { quote, index, children, remove, onToTop, disabled = false } = props;\n\n  return (\n    <Draggable draggableId={quote.key.toString()} index={index}>\n      {(provided: DraggableProvided) => (\n        <div ref={provided.innerRef} {...provided.draggableProps}>\n          <div className={styles.draggableRow}>\n            <div\n              {...(!disabled ? provided.dragHandleProps : {})}\n              className={classnams({\n                [styles.defaultBtn]: true,\n                [styles.disabled]: disabled,\n              })}\n              style={{ marginRight: "8px" }}\n            >\n              <HolderOutlined />\n            </div>\n            {children}\n            {remove && (\n              <div\n                className={classnams({\n                  [styles.removeBtn]: true,\n                  [styles.disabled]: disabled,\n                })}\n                style={{ marginLeft: "10px" }}\n                onClick={() => {\n                  if (disabled) return;\n                  remove(index);\n                }}\n              >\n                <MinusCircleOutlined />\n              </div>\n            )}\n            {onToTop && (\n              <div\n                className={classnams({\n                  [styles.defaultBtn]: true,\n                  [styles.disabled]: disabled,\n                })}\n                style={{ marginLeft: "10px" }}\n                onClick={() => {\n                  if (index === 0) return;\n                  if (disabled) return;\n                  onToTop(index);\n                }}\n              >\n                <VerticalAlignTopOutlined />\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nexport default DraggableFormListRow;'},{fileName:"DraggableFormListContext.module.scss",code:".draggableRow {\n  display: flex;\n  align-items: center;\n  padding: 8px 0;\n\n  $btnSize: 16px;\n  .defaultBtn:not(.disabled) {\n    cursor: pointer;\n    :global {\n      svg {\n        width: $btnSize;\n        height: $btnSize;\n        path {\n          fill: $globalPrimaryColor;\n        }\n      }\n    }\n  }\n\n  .removeBtn:not(.disabled) {\n    cursor: pointer;\n    :global {\n      svg {\n        width: $btnSize;\n        height: $btnSize;\n        path {\n          fill: $globalRedColor;\n        }\n      }\n    }\n  }\n\n  .disabled {\n    cursor: not-allowed !important;\n    :global {\n      svg {\n        width: $btnSize;\n        height: $btnSize;\n        path {\n          fill: $disabledColor;\n        }\n      }\n    }\n  }\n}"}],E=(e,n)=>{const[t,o]=(0,r.useState)(0);return(0,r.useEffect)((()=>{if(e.current){const{clientHeight:n}=e.current;o(n)}}),[]),{droppableHeight:t,setDroppableHeight:o,onAdd:e=>{o((e=>e+n)),null==e||e()},onRemove:(e,t)=>{o((e=>Math.max(e-n,0))),null==e||e(t)}}};var S=t(33815),q=t(65754);const H="DraggableFormListSample_container__xmK-R",N="DraggableFormListSample_itemTitleRow__02ifk",M="DraggableFormListSample_formListRow__dYaOX";function V(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function B(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?V(Object(t),!0).forEach((function(n){(0,i.A)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):V(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}const W=()=>{const[e]=s.A.useForm(),n=(0,r.useRef)(null),{droppableHeight:t,onAdd:o,onRemove:i}=E(n,48),p=(0,r.useRef)(1);return(0,L.jsx)(s.A,{form:e,name:"draggableFormListSampleForm",labelAlign:"right",initialValues:{fieldList:[{id:"1",field1:"默认值",field2:"workingDay",field3:["默认值",!0],field4:[u()(),u()(),!1]}]},children:(0,L.jsx)(s.A.List,{name:"fieldList",children:(e,r)=>{let{add:u,move:b,remove:g}=r;return(0,L.jsxs)(L.Fragment,{children:[(0,L.jsx)("div",{className:N,children:(0,L.jsx)(l.Ay,{type:"primary",icon:(0,L.jsx)(c.A,{}),ghost:!0,onClick:()=>(e=>{p.current>=5?a.Ay.warning("最多可增加5条数据"):(o(e),p.current=p.current+1)})(u),children:"新增"})}),(0,L.jsx)("div",{style:{width:"100%",height:t>0?"".concat(t,"px"):"auto"},ref:n,children:(0,L.jsx)(_,{droppableId:"fieldList",fields:e,showToTop:!0,move:b,remove:e=>((e,n)=>{p.current<=1?a.Ay.warning("最少要有1条数据"):(i(e,n),p.current=p.current-1)})(g,e),children:e=>(0,L.jsxs)("div",{className:M,children:[(0,L.jsx)(s.A.Item,B(B({},e),{},{name:[e.name,"id"],hidden:!0})),(0,L.jsx)(s.A.Item,B(B({},e),{},{label:"字段1",name:[e.name,"field1"],children:(0,L.jsx)(d.A,{})})),(0,L.jsx)(s.A.Item,B(B({},e),{},{label:"字段2",name:[e.name,"field2"],children:(0,L.jsx)(m.A,{options:[{label:"工作日",value:"workingDay"},{label:"自然日",value:"naturalDay"}],style:{width:"200px"}})})),(0,L.jsx)(s.A.Item,B(B({},e),{},{label:"字段3",name:[e.name,"field3"],children:(0,L.jsx)(S.A,{})})),(0,L.jsx)(s.A.Item,B(B({},e),{},{label:"字段4",name:[e.name,"field4"],children:(0,L.jsx)(q.A,{})}))]})})})]})}})})},G=[{fileName:"index.tsx",code:'import React, { useRef } from "react";\nimport { Button, Form, Input, message, Select } from "antd";\nimport { PlusOutlined } from "@ant-design/icons";\nimport dayjs from "dayjs";\nimport DraggableFormListContext from "@/components/formLists/DraggableFormListContext";\nimport useFixHeight from "@/components/formLists/DraggableFormListContext/hooks/useFixHeight";\nimport InputAndCheckbox from "@/components/formItems/InputAndCheckbox";\nimport RangePickerAndCheckbox from "@/components/formItems/RangePickerAndCheckbox";\nimport styles from "./index.module.scss";\n\nconst DRAGGABLE_HEIGHT = 48;\n\nconst Content = () => {\n  const [form] = Form.useForm();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { droppableHeight, onAdd, onRemove } = useFixHeight(\n    containerRef,\n    DRAGGABLE_HEIGHT\n  );\n  const rows = useRef<number>(1);\n\n  const onAddClick = (add: any) => {\n    if (rows.current >= 5) {\n      message.warning("最多可增加5条数据");\n      return;\n    }\n    onAdd(add);\n    rows.current = rows.current + 1;\n  };\n\n  const onRemoveClick = (remove: any, index: number) => {\n    if (rows.current <= 1) {\n      message.warning("最少要有1条数据");\n      return;\n    }\n    onRemove(remove, index);\n    rows.current = rows.current - 1;\n  };\n\n  return (\n      <Form\n        form={form}\n        name=\'draggableFormListSampleForm\'\n        labelAlign=\'right\'\n        initialValues={{\n          fieldList: [\n            {\n              id: "1",\n              field1: "默认值",\n              field2: "workingDay",\n              field3: ["默认值", true],\n              field4: [dayjs(), dayjs(), false],\n            },\n          ],\n        }}\n      >\n        <Form.List name=\'fieldList\'>\n          {(fields, { add, move, remove }) => (\n            <>\n              <div className={styles.itemTitleRow}>\n                <Button\n                  type=\'primary\'\n                  icon={<PlusOutlined />}\n                  ghost\n                  onClick={() => onAddClick(add)}\n                >\n                  新增\n                </Button>\n              </div>\n              <div\n                style={{\n                  width: "100%",\n                  height: droppableHeight > 0 ? `${droppableHeight}px` : "auto",\n                }}\n                ref={containerRef}\n              >\n                <DraggableFormListContext\n                  droppableId=\'fieldList\'\n                  fields={fields}\n                  showToTop\n                  move={move}\n                  remove={(index) => onRemoveClick(remove, index as number)}\n                >\n                  {(quote) => (\n                    <div className={styles.formListRow}>\n                      <Form.Item\n                        {...quote}\n                        name={[quote.name, "id"]}\n                        hidden\n                      ></Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段1\'\n                        name={[quote.name, "field1"]}\n                      >\n                        <Input />\n                      </Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段2\'\n                        name={[quote.name, "field2"]}\n                      >\n                        <Select\n                          options={[\n                            { label: "工作日", value: "workingDay" },\n                            { label: "自然日", value: "naturalDay" },\n                          ]}\n                          style={{ width: "200px" }}\n                        />\n                      </Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段3\'\n                        name={[quote.name, "field3"]}\n                      >\n                        <InputAndCheckbox />\n                      </Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段4\'\n                        name={[quote.name, "field4"]}\n                      >\n                        <RangePickerAndCheckbox />\n                      </Form.Item>\n                    </div>\n                  )}\n                </DraggableFormListContext>\n              </div>\n            </>\n          )}\n        </Form.List>\n      </Form>\n  );\n};\n\nexport default Content;\n'}].concat(T),$=()=>(0,L.jsx)(o.A,{className:H,title:"可上下拖拽排序的Form.List的包装组件",codeParams:G,children:(0,L.jsx)(W,{})});var U=t(19270);const z="DraggableWithValidateFormListSample_container__I89VS",Q="DraggableWithValidateFormListSample_itemTitleRow__4ltJ6",Y="DraggableWithValidateFormListSample_formListRow__-ferZ";function Z(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function J(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Z(Object(t),!0).forEach((function(n){(0,i.A)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Z(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}const K=[{required:!0,message:"必填项"}],X=()=>{const[e]=s.A.useForm(),n=(0,r.useRef)(null),{droppableHeight:t,onAdd:o,onRemove:i}=E(n,48),p=(0,r.useRef)(1);return(0,L.jsxs)(s.A,{form:e,name:"draggableWithValidateFormListSampleForm",labelAlign:"right",initialValues:{fieldList:[{}]},children:[(0,L.jsx)(s.A.List,{name:"fieldList",children:(r,u)=>{let{add:b,move:g,remove:f}=u;return(0,L.jsxs)(L.Fragment,{children:[(0,L.jsx)("div",{className:Q,children:(0,L.jsx)(l.Ay,{type:"primary",icon:(0,L.jsx)(c.A,{}),ghost:!0,onClick:()=>(e=>{p.current>=5?a.Ay.warning("最多可增加5条数据"):(o(e),p.current=p.current+1)})(b),children:"新增"})}),(0,L.jsx)("div",{style:{width:"100%",height:t>0?"".concat(t,"px"):"auto"},ref:n,children:(0,L.jsx)(_,{droppableId:"fieldList",fields:r,showToTop:!0,move:g,remove:e=>((e,n)=>{p.current<=1?a.Ay.warning("最少要有1条数据"):(i(e,n),p.current=p.current-1)})(f,e),children:n=>(0,L.jsxs)("div",{className:Y,children:[(0,L.jsx)(s.A.Item,J(J({},n),{},{name:[n.name,"id"],hidden:!0})),(0,L.jsx)(s.A.Item,J(J({},n),{},{label:"字段1",name:[n.name,"field1"],rules:K,children:(0,L.jsx)(U.A,{form:e,style:{width:"214px"},children:(0,L.jsx)(d.A,{})})})),(0,L.jsx)(s.A.Item,J(J({},n),{},{label:"字段2",name:[n.name,"field2"],rules:K,children:(0,L.jsx)(U.A,{form:e,style:{width:"214px"},children:(0,L.jsx)(m.A,{options:[{label:"工作日",value:"workingDay"},{label:"自然日",value:"naturalDay"}],style:{width:"200px"}})})})),(0,L.jsx)(s.A.Item,J(J({},n),{},{label:"字段3",name:[n.name,"field3"],rules:K,children:(0,L.jsx)(U.A,{form:e,style:{width:"214px"},children:(0,L.jsx)(S.A,{})})})),(0,L.jsx)(s.A.Item,J(J({},n),{},{label:"字段4",name:[n.name,"field4"],rules:K,children:(0,L.jsx)(U.A,{form:e,style:{width:"294px"},children:(0,L.jsx)(q.A,{})})}))]})})})]})}}),(0,L.jsx)("div",{style:{display:"flex",justifyContent:"flex-end"},children:(0,L.jsx)(l.Ay,{type:"primary",onClick:async()=>{try{const n=await(null==e?void 0:e.validateFields());console.log("values:",n)}catch(e){}},children:"提交"})})]})},ee=[{fileName:"index.tsx",code:'import React, { useRef } from "react";\nimport { Button, Form, Input, message, Select } from "antd";\nimport { PlusOutlined } from "@ant-design/icons";\nimport DraggableFormListContext from "@/components/formLists/DraggableFormListContext";\nimport useFixHeight from "@/components/formLists/DraggableFormListContext/hooks/useFixHeight";\nimport WithValidateMessage from "@/components/formItems/WithValidateMessage";\nimport InputAndCheckbox from "@/components/formItems/InputAndCheckbox";\nimport RangePickerAndCheckbox from "@/components/formItems/RangePickerAndCheckbox";\nimport styles from "./index.module.scss";\n\nconst DRAGGABLE_HEIGHT = 48;\nconst REQUIRED_FORM_ITEM_RULES = [{ required: true, message: "必填项" }];\n\nconst Content = () => {\n  const [form] = Form.useForm();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { droppableHeight, onAdd, onRemove } = useFixHeight(\n    containerRef,\n    DRAGGABLE_HEIGHT\n  );\n  const rows = useRef<number>(1);\n\n  const onAddClick = (add: any) => {\n    if (rows.current >= 5) {\n      message.warning("最多可增加5条数据");\n      return;\n    }\n    onAdd(add);\n    rows.current = rows.current + 1;\n  };\n\n  const onRemoveClick = (remove: any, index: number) => {\n    if (rows.current <= 1) {\n      message.warning("最少要有1条数据");\n      return;\n    }\n    onRemove(remove, index);\n    rows.current = rows.current - 1;\n  };\n\n  // 点击提交\n  const onSubmit = async () => {\n    try {\n      const values = await form?.validateFields();\n      console.log("values:", values);\n    } catch (err) {}\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\'draggableWithValidateFormListSampleForm\'\n      labelAlign=\'right\'\n      initialValues={{\n        fieldList: [{}],\n      }}\n    >\n      <Form.List name=\'fieldList\'>\n        {(fields, { add, move, remove }) => (\n          <>\n            <div className={styles.itemTitleRow}>\n              <Button\n                type=\'primary\'\n                icon={<PlusOutlined />}\n                ghost\n                onClick={() => onAddClick(add)}\n              >\n                新增\n              </Button>\n            </div>\n            <div\n              style={{\n                width: "100%",\n                height: droppableHeight > 0 ? `${droppableHeight}px` : "auto",\n              }}\n              ref={containerRef}\n            >\n              <DraggableFormListContext\n                droppableId=\'fieldList\'\n                fields={fields}\n                showToTop\n                move={move}\n                remove={(index) => onRemoveClick(remove, index as number)}\n              >\n                {(quote) => (\n                  <div className={styles.formListRow}>\n                    <Form.Item\n                      {...quote}\n                      name={[quote.name, "id"]}\n                      hidden\n                    ></Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段1\'\n                      name={[quote.name, "field1"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "214px" }}\n                      >\n                        <Input />\n                      </WithValidateMessage>\n                    </Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段2\'\n                      name={[quote.name, "field2"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "214px" }}\n                      >\n                        <Select\n                          options={[\n                            { label: "工作日", value: "workingDay" },\n                            { label: "自然日", value: "naturalDay" },\n                          ]}\n                          style={{ width: "200px" }}\n                        />\n                      </WithValidateMessage>\n                    </Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段3\'\n                      name={[quote.name, "field3"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "214px" }}\n                      >\n                        <InputAndCheckbox />\n                      </WithValidateMessage>\n                    </Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段4\'\n                      name={[quote.name, "field4"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "294px" }}\n                      >\n                        <RangePickerAndCheckbox />\n                      </WithValidateMessage>\n                    </Form.Item>\n                  </div>\n                )}\n              </DraggableFormListContext>\n            </div>\n          </>\n        )}\n      </Form.List>\n      <div\n        style={{\n          display: "flex",\n          justifyContent: "flex-end",\n        }}\n      >\n        <Button type=\'primary\' onClick={onSubmit}>\n          提交\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default Content;\n'}].concat(T,U.w),ne=()=>(0,L.jsx)(o.A,{className:z,title:"可上下拖拽排序且显示自定义校验信息的Form.List",codeParams:ee,children:(0,L.jsx)(X,{})}),te="FormListSection_container__Oa-WZ",re="FormListSection_sample__oc0yD",oe=[(0,L.jsx)($,{}),(0,L.jsx)(ne,{})],ie=()=>(0,L.jsx)("div",{className:te,children:oe.map(((e,n)=>(0,L.jsx)("div",{className:re,children:e},n)))})}}]);