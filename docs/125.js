"use strict";(self.webpackChunkcomposite_component_library=self.webpackChunkcomposite_component_library||[]).push([[125],{6064:(e,n,t)=>{t.r(n),t.d(n,{default:()=>W});var a=t(6540),r=t(7186),o=t(1935),l=t(5202),s=t(9237),i=t(3888),d=t(7444),c=t(7142),u=t(6492),p=t(770),m=t(1196),b=t(3438),y=t(9467),h=t(6044),v=t(9039),f=t(5413),x=t(9270);const g="EditableTable_editableTable__8yjKc";var P=t(4848);const{RangePicker:w}=i.A,T=/^([\w+-.%]+@[\w-.]+\.[A-Za-z]{2,4})(;[\w+-.]+@[\w-.]+\.[A-Za-z]{2,4})*$/,R=a.createContext(null),C=e=>{let{form:n,editType:t,editProps:r,component:o,disabled:l,dataIndex:s,record:y,save:h}=e;const v={...r,disabled:r.disabled||l};delete v.validateStatus;const f=()=>h(s);let g=(0,P.jsx)(d.A,{style:{width:"100%"},onBlur:f,...v});switch(t){case"inputNumber":g=(0,P.jsx)(c.A,{style:{width:"100%"},onBlur:f,...v});break;case"select":g=(0,P.jsx)(u.A,{style:{width:"100%"},...v});break;case"datePicker":g=(0,P.jsx)(i.A,{style:{width:"100%"},...v});break;case"rangePicker":g=(0,P.jsx)(w,{style:{width:"100%"},...v});break;case"radioGroup":g=(0,P.jsx)(p.Ay.Group,{...v});break;case"checkboxGroup":g=(0,P.jsx)(m.A.Group,{...v});break;case"cascader":g=(0,P.jsx)(b.A,{style:{width:"100%"},...v})}return o&&(g=a.cloneElement(o,{record:y,...v})),(0,P.jsx)(x.A,{onChange:(e,n)=>{if(!t&&!o||["input","inputNumber"].includes(t))return;if("radioGroup"===t)return void h?.(s,e?.target?.value||void 0);const a=e?.target?"":e;h?.(s,a),r.onChange?.(a,n,y)},form:n,nevervalidate:!!r.nevervalidate,children:g})},I=a.memo((e=>{const{rowKey:n="id",editable:t=!1,editType:r="input",editProps:o,component:l,disabled:s,dataIndex:i,record:d,children:c,ruleOptions:u,rules:p,handleSave:m,...b}=e,h=(0,a.useContext)(R);let v=o||{};"function"==typeof o&&(v=o(d)||{});const f=(0,a.useMemo)((()=>{let e=[];return p&&p.length>0?e=p:(u?.isRequired&&e.push({required:!0,message:"必填项"}),u?.isEmail&&e.push({pattern:T,message:"请输入正确邮箱格式"})),e}),[u,p]),x=async(e,n)=>{const t=n||await(h?.getFieldValue(e)),a={...d,[e]:t};m?.(a);try{await(h?.validateFields([e]))}catch(e){}};(0,a.useEffect)((()=>{h?.setFieldsValue({[i]:d?.[i]})}),[]);let g=c;return t?g=(0,P.jsx)(y.A.Item,{style:{margin:0},name:i,rules:f,required:!!u?.isRequired,validateStatus:v.validateStatus,children:C({editType:r,editProps:v,component:l,disabled:s,dataIndex:i,record:d,form:h,save:x})}):i===n&&(g=(0,P.jsx)(y.A.Item,{style:{margin:0},name:i,hidden:!0})),(0,P.jsx)("td",{title:s?d?.[i]:"",...b,children:g})}));class S extends a.PureComponent{render(){return(0,P.jsx)(I,{...(0,f.A)(this.props,["onMouseEnter","onMouseLeave"])})}}const E=e=>{let{rowKey:n,onFromaValuesChange:t,...a}=e;const[r]=y.A.useForm();return(0,P.jsx)(y.A,{form:r,onValuesChange:(e,o)=>{t?.(e,r,{...o,[n]:a["data-row-key"]})},component:!1,children:(0,P.jsx)(R.Provider,{value:r,children:(0,P.jsx)("tr",{...a})})})},N=e=>{let{rowKey:n="id",dataSource:t,columns:r,setDataSource:o,disabled:s=!1,onFormValuesChange:i,deleteRowCallback:d,...c}=e;const u=(0,a.useMemo)((()=>({body:{row:e=>(0,P.jsx)(E,{...e,rowKey:n,onFromaValuesChange:i}),cell:S}})),[]),p=e=>{const a=t.map((t=>t[n]===e[n]?{...t,...e}:t));setTimeout((()=>{o(a)}))},m=[...(0,a.useMemo)((()=>r.map((e=>({...e,onCell:n=>({editable:e.editable,editType:e.editType,editProps:e.editProps,component:e.component,disabled:s,dataIndex:e.dataIndex,record:n,ruleOptions:e.ruleOptions,rules:e.rules,handleSave:p})})))),[r,s,p]),{title:"操作",key:"action",dataIndex:"action",align:"center",width:80,fixed:"right",render:(e,a)=>(0,P.jsx)("div",{style:{padding:0},children:s?(0,P.jsx)(l.Ay,{type:"link",danger:!0,disabled:!0,children:"删除"}):(0,P.jsxs)(h.A,{title:"是否确定删除此行？",onConfirm:()=>{(e=>{const a=t.filter((t=>t[n]!==e[n]));o(a),d?.(e)})(a)},children:[(0,P.jsx)(l.Ay,{style:{padding:0},type:"link",danger:!0,children:"删除"})," "]})})}];return(0,P.jsx)("div",{className:g,children:(0,P.jsx)(v.A,{rowKey:n,columns:m,components:u,dataSource:t,pagination:!1,tableLayout:"fixed",bordered:!0,...c})})},k=[{fileName:"EditableTable.tsx",code:'/**\n * 可进行编辑的表格组件\n */\nimport React, { ReactNode, useEffect, useContext, useMemo } from "react";\nimport {\n  Form,\n  Table,\n  Input,\n  InputNumber,\n  Select,\n  DatePicker,\n  Radio,\n  Checkbox,\n  Cascader,\n  Button,\n  Popconfirm,\n} from "antd";\nimport type { TableProps, TableColumnProps, GetRef, FormRule } from "antd";\nimport { omit } from "lodash-es";\nimport WithValidateMessage from "@/components/formItems/WithValidateMessage";\nimport styles from "./index.module.scss";\n\nconst { RangePicker } = DatePicker;\nconst EMAIL_PATTERN =\n  /^([w+-.%]+@[w-.]+.[A-Za-z]{2,4})(;[w+-.]+@[w-.]+.[A-Za-z]{2,4})*$/;\n\nexport type EditType =\n  | "input"\n  | "inputNumber"\n  | "select"\n  | "datePicker"\n  | "rangePicker"\n  | "radioGroup"\n  | "checkboxGroup"\n  | "cascader";\n\ntype EditProps =\n  | ({\n      nevervalidate?: boolean;\n      validateStatus?: "warning" | "error" | "";\n    } & Record<string, any>)\n  | ((record: Record<string, any>) => Record<string, any>);\n\ntype FormInstance<T> = GetRef<typeof Form<T>>;\n\ntype EditableTableColumnRuleOptions = {\n  isRequired?: boolean;\n  isEmail?: boolean;\n  isPositiveInt?: boolean;\n};\n\nexport type EditableTableColumnProps = {\n  editable?: boolean;\n  editType?: EditType;\n  editProps?: EditProps;\n  component?: ReactNode | null;\n  ruleOptions?: EditableTableColumnRuleOptions;\n  rules?: FormRule[];\n} & TableColumnProps;\n\ntype RenderItemProps = {\n  editType: EditType;\n  editProps: EditProps;\n  disabled?: boolean;\n  dataIndex: string;\n  component?: ReactNode | null;\n  record?: Record<string, any>;\n  save: (dataIndex: string, cellValue?: any) => void;\n};\n\ntype EditableTableCellProps = {\n  rowKey?: string;\n  disabled?: boolean;\n  dataIndex: string;\n  record: Record<string, any>;\n  editProps?: EditProps;\n  component?: ReactNode | null;\n  handleSave: (event: any) => void;\n} & Omit<EditableTableColumnProps, "dataIndex">;\n\ntype EditableTableProps = {\n  dataSource: Record<string, any>[];\n  columns: EditableTableColumnProps[];\n  setDataSource: (dataSource: Record<string, any>[]) => void;\n  rowKey?: string;\n  disabled?: boolean;\n  onFormValuesChange?: (\n    changedValues: Record<string, any>,\n    form?: FormInstance<any> | null,\n    allValues?: Record<string, any>\n  ) => void;\n  deleteRowCallback?: (record: Record<string, any>) => void; // 删除一行后的回调\n} & TableProps;\n\nconst EditableContext = React.createContext<FormInstance<any> | null>(null);\n\nconst renderItem = ({\n  form,\n  editType,\n  editProps,\n  component,\n  disabled,\n  dataIndex,\n  record,\n  save,\n}: RenderItemProps & { form: FormInstance<any> | null }) => {\n  const restProps: Record<string, any> = {\n    ...editProps,\n    disabled: (editProps as Record<string, any>).disabled || disabled,\n  };\n  delete restProps.validateStatus;\n\n  const onBlur = () => save(dataIndex);\n\n  const onChange = (cellValue?: any, option?: Record<string, any>) => {\n    if (\n      (!editType && !component) ||\n      ["input", "inputNumber"].includes(editType)\n    )\n      return;\n    if (editType === "radioGroup") {\n      save?.(dataIndex, cellValue?.target?.value || undefined);\n      return;\n    }\n    const newValue = cellValue?.target ? "" : cellValue;\n    save?.(dataIndex, newValue);\n    (editProps as Record<string, any>).onChange?.(newValue, option, record);\n  };\n\n  let itemComponent: any = (\n    <Input style={{ width: "100%" }} onBlur={onBlur} {...restProps} />\n  );\n\n  switch (editType) {\n    case "inputNumber":\n      itemComponent = (\n        <InputNumber style={{ width: "100%" }} onBlur={onBlur} {...restProps} />\n      );\n      break;\n    case "select":\n      itemComponent = <Select style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "datePicker":\n      itemComponent = <DatePicker style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "rangePicker":\n      itemComponent = <RangePicker style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "radioGroup":\n      itemComponent = <Radio.Group {...restProps} />;\n      break;\n    case "checkboxGroup":\n      itemComponent = <Checkbox.Group {...restProps} />;\n      break;\n    case "cascader":\n      itemComponent = <Cascader style={{ width: "100%" }} {...restProps} />;\n      break;\n  }\n\n  if (component) {\n    itemComponent = React.cloneElement(component, { record, ...restProps });\n  }\n\n  return (\n    <WithValidateMessage\n      onChange={onChange}\n      form={form}\n      nevervalidate={!!(editProps as Record<string, any>).nevervalidate}\n    >\n      {itemComponent}\n    </WithValidateMessage>\n  );\n};\n\nconst EditableTableCell = React.memo((props: EditableTableCellProps) => {\n  const {\n    rowKey = "id",\n    editable = false,\n    editType = "input",\n    editProps,\n    component,\n    disabled,\n    dataIndex,\n    record,\n    children,\n    ruleOptions,\n    rules,\n    handleSave,\n    ...restProps\n  } = props;\n  const form = useContext(EditableContext);\n\n  let finalComponentProps: Record<string, any> = editProps || {};\n  if (typeof editProps === "function") {\n    finalComponentProps = editProps(record) || {};\n  }\n\n  const finalRules = useMemo(() => {\n    let finalRulesArr: FormRule[] = [];\n    if (rules && rules.length > 0) {\n      finalRulesArr = rules;\n    } else {\n      if (ruleOptions?.isRequired) {\n        finalRulesArr.push({ required: true, message: "必填项" });\n      }\n      if (ruleOptions?.isEmail) {\n        finalRulesArr.push({\n          pattern: EMAIL_PATTERN,\n          message: "请输入正确邮箱格式",\n        });\n      }\n    }\n    return finalRulesArr;\n  }, [ruleOptions, rules]);\n\n  const save = async (currentDataIndex: string, cellValue?: any) => {\n    const value = cellValue || (await form?.getFieldValue(currentDataIndex));\n    const newRecord = { ...record, [currentDataIndex]: value };\n    handleSave?.(newRecord);\n    try {\n      await form?.validateFields([currentDataIndex]);\n    } catch (err) {\n      //   console.log(\'EditableTable保存数据失败\', err);\n    }\n  };\n\n  useEffect(() => {\n    form?.setFieldsValue({\n      [dataIndex]: record?.[dataIndex],\n    });\n  }, []);\n\n  let childNode: ReactNode = children;\n\n  if (editable) {\n    childNode = (\n      <Form.Item\n        style={{ margin: 0 }}\n        name={dataIndex}\n        rules={finalRules}\n        required={!!ruleOptions?.isRequired}\n        validateStatus={finalComponentProps.validateStatus}\n      >\n        {renderItem({\n          editType,\n          editProps: finalComponentProps,\n          component,\n          disabled,\n          dataIndex,\n          record,\n          form,\n          save,\n        })}\n      </Form.Item>\n    );\n  } else if (dataIndex === rowKey) {\n    childNode = (\n      <Form.Item style={{ margin: 0 }} name={dataIndex} hidden></Form.Item>\n    );\n  }\n\n  return (\n    <td title={disabled ? record?.[dataIndex] : ""} {...restProps}>\n      {childNode}\n    </td>\n  );\n});\n\nclass TableCellWrapper extends React.PureComponent {\n  render() {\n    return (\n      <EditableTableCell\n        {...omit(this.props, ["onMouseEnter", "onMouseLeave"])}\n      />\n    );\n  }\n}\n\nconst EditableTableRow = ({\n  rowKey,\n  onFromaValuesChange,\n  ...restProps\n}: any) => {\n  const [form] = Form.useForm();\n\n  const onValuesChange = (\n    changedValues: Record<string, any>,\n    allValues: Record<string, any>\n  ) => {\n    onFromaValuesChange?.(changedValues, form, {\n      ...allValues,\n      [rowKey]: restProps["data-row-key"],\n    });\n  };\n\n  return (\n    <Form form={form} onValuesChange={onValuesChange} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...restProps} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableTable = ({\n  rowKey = "id",\n  dataSource,\n  columns,\n  setDataSource,\n  disabled = false,\n  onFormValuesChange,\n  deleteRowCallback,\n  ...restProps\n}: EditableTableProps) => {\n  const components = useMemo(\n    () => ({\n      body: {\n        row: (props: any) => (\n          <EditableTableRow\n            {...props}\n            rowKey={rowKey}\n            onFromaValuesChange={onFormValuesChange}\n          />\n        ),\n        cell: TableCellWrapper,\n      },\n    }),\n    []\n  );\n\n  const handleSave = (row: Record<string, any>) => {\n    const newDataSource = dataSource.map((item) => {\n      if (item[rowKey] === row[rowKey]) {\n        return {\n          ...item,\n          ...row,\n        };\n      }\n      return item;\n    });\n\n    setTimeout(() => {\n      setDataSource(newDataSource);\n    });\n  };\n\n  const handleDeleteRow = (record: Record<string, any>) => {\n    const newDataSource = dataSource.filter(\n      (item) => item[rowKey] !== record[rowKey]\n    );\n    setDataSource(newDataSource);\n    deleteRowCallback?.(record);\n  };\n\n  const newColumns = useMemo(() => {\n    return columns.map((col) => ({\n      ...col,\n      onCell: (record: Record<string, any>) => ({\n        editable: col.editable,\n        editType: col.editType,\n        editProps: col.editProps,\n        component: col.component,\n        disabled,\n        dataIndex: col.dataIndex,\n        record,\n        ruleOptions: col.ruleOptions,\n        rules: col.rules,\n        handleSave,\n      }),\n    }));\n  }, [columns, disabled, handleSave]);\n\n  const finalColumns = [\n    ...newColumns,\n    {\n      title: "操作",\n      key: "action",\n      dataIndex: "action",\n      align: "center",\n      width: 80,\n      fixed: "right",\n      render: (_: any, record: Record<string, any>) => {\n        return (\n          <div style={{ padding: 0 }}>\n            {disabled ? (\n              <Button type=\'link\' danger disabled>\n                删除\n              </Button>\n            ) : (\n              <Popconfirm\n                title=\'是否确定删除此行？\'\n                onConfirm={() => {\n                  handleDeleteRow(record);\n                }}\n              >\n                <Button style={{ padding: 0 }} type=\'link\' danger>\n                  删除\n                </Button>{" "}\n              </Popconfirm>\n            )}\n          </div>\n        );\n      },\n    },\n  ];\n\n  return (\n    <div className={styles.editableTable}>\n      <Table\n        rowKey={rowKey}\n        columns={finalColumns as any}\n        components={components}\n        dataSource={dataSource}\n        pagination={false}\n        tableLayout=\'fixed\'\n        bordered\n        {...restProps}\n      />\n    </div>\n  );\n};\n\nexport default EditableTable;\n'},{fileName:"EditableTable.module.scss",code:".editableTable {\n  :global {\n    .ant-form-item {\n      .ant-form-item-control {\n        .ant-form-item-explain {\n          display: none !important;\n        }\n      }\n    }\n  }\n}"}];var j=t(5113),A=t(6731);const V="EditableTableSample_container__zJ0lF",_="EditableTableSample_itemTitleRow__-4Ff7",F="EditableTableSample_columnTitle__tXGhM",D="EditableTableSample_requiredIcon__mXEG2",O=[{validator:(e,n)=>n&&n.length>0&&(n[0]||0===n[0]||n[1])?(n[0]||0===n[0])&&n[1]?Promise.resolve():Promise.reject("两个都必填"):Promise.reject("必填项")}],K=()=>{const[e,n]=(0,a.useState)([]),t=[{title:(0,P.jsxs)("div",{className:F,children:[(0,P.jsx)("span",{className:D,children:"*"}),(0,P.jsx)("span",{children:"邮箱"})]}),dataIndex:"email",width:160,editable:!0,ruleOptions:{isRequired:!0,isEmail:!0}},{title:(0,P.jsxs)("div",{className:F,children:[(0,P.jsx)("span",{className:D,children:"*"}),(0,P.jsx)("span",{children:"日期"})]}),dataIndex:"date",width:140,editable:!0,editType:"datePicker",ruleOptions:{isRequired:!0}},{title:"日期类型",dataIndex:"dateType",width:120,editable:!0,editType:"select",editProps:{options:[{label:"年",value:"year"},{label:"月",value:"month"},{label:"天",value:"day"}],allowClear:!0,nevervalidate:!0}},{title:"是否提交",dataIndex:"isSubmit",width:120,editable:!0,editType:"radioGroup",editProps:{options:[{label:"是",value:"1"},{label:"否",value:"0"}],nevervalidate:!0}},{title:(0,P.jsxs)("div",{className:F,children:[(0,P.jsx)("span",{className:D,children:"*"}),(0,P.jsx)("span",{children:"交易日"})]}),dataIndex:"field",width:240,editable:!0,component:(0,P.jsx)(j.A,{options:[{label:"工作日",value:"workingDay"},{label:"自然日",value:"naturalDay"}],inputNumberProps:{addonAfter:"个"},setInputNumberStatus:e=>!e||!e[0]&&0!==e[0]?"error":"",setSelectStatus:e=>e&&e[1]?"":"error"}),editProps:{validateStatus:""},ruleOptions:{isRequired:!0},rules:O}];return(0,P.jsxs)(P.Fragment,{children:[(0,P.jsx)("div",{className:_,children:(0,P.jsx)(l.Ay,{type:"primary",icon:(0,P.jsx)(s.A,{}),ghost:!0,onClick:()=>{if(e.length>=5)return void o.Ay.warning("最多可增加5条数据");const t=[...e,{id:`ROW_ID_${(0,A.r9)()}`}];n(t)},children:"新增"})}),(0,P.jsx)(N,{columns:t,dataSource:e,setDataSource:n})]})},M=[{fileName:"index.tsx",code:'import React, { useState } from "react";\nimport { Button, message } from "antd";\nimport { PlusOutlined } from "@ant-design/icons";\nimport EditableTable from "@/components/EditableTable";\nimport type { EditableTableColumnProps } from "@/components/EditableTable";\nimport InputNumberAndSelect from "@/components/formItems/InputNumberAndSelect";\nimport type { Value as InputNumberAndSelectValue } from "@/components/formItems/InputNumberAndSelect";\nimport { getRandomId } from "utils/util";\nimport styles from "./index.module.scss";\n\nconst INPUTNUMBER_SELECT_RULES = [\n  {\n    validator: (_: Record<string, any>, value: InputNumberAndSelectValue) => {\n      if (value && value.length > 0) {\n        if (!value[0] && value[0] !== 0 && !value[1]) {\n          return Promise.reject("必填项");\n        } else {\n          if (!value[0] && value[0] !== 0) {\n            return Promise.reject("两个都必填");\n          }\n          if (!value[1]) {\n            return Promise.reject("两个都必填");\n          }\n        }\n      } else {\n        return Promise.reject("必填项");\n      }\n      return Promise.resolve();\n    },\n  },\n];\n\nconst Content = () => {\n  const [tableData, setTableData] = useState<Record<string, any>[]>([]);\n\n  const onAddClick = () => {\n    if (tableData.length >= 5) {\n      message.warning("最多可增加5条数据");\n      return;\n    }\n    const newDataSource = [...tableData, { id: `ROW_ID_${getRandomId()}` }];\n    setTableData(newDataSource);\n  };\n\n  const columns: EditableTableColumnProps[] = [\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>邮箱</span>\n        </div>\n      ),\n      dataIndex: "email",\n      width: 160,\n      editable: true,\n      ruleOptions: {\n        isRequired: true,\n        isEmail: true,\n      },\n    },\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>日期</span>\n        </div>\n      ),\n      dataIndex: "date",\n      width: 140,\n      editable: true,\n      editType: "datePicker",\n      ruleOptions: {\n        isRequired: true,\n      },\n    },\n    {\n      title: "日期类型",\n      dataIndex: "dateType",\n      width: 120,\n      editable: true,\n      editType: "select",\n      editProps: {\n        options: [\n          { label: "年", value: "year" },\n          { label: "月", value: "month" },\n          { label: "天", value: "day" },\n        ],\n        allowClear: true,\n        nevervalidate: true,\n      },\n    },\n    {\n      title: "是否提交",\n      dataIndex: "isSubmit",\n      width: 120,\n      editable: true,\n      editType: "radioGroup",\n      editProps: {\n        options: [\n          { label: "是", value: "1" },\n          { label: "否", value: "0" },\n        ],\n        nevervalidate: true,\n      },\n    },\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>交易日</span>\n        </div>\n      ),\n      dataIndex: "field",\n      width: 240,\n      editable: true,\n      component: (\n        <InputNumberAndSelect\n          options={[\n            { label: "工作日", value: "workingDay" },\n            { label: "自然日", value: "naturalDay" },\n          ]}\n          inputNumberProps={{\n            addonAfter: "个",\n          }}\n          setInputNumberStatus={(\n            value: InputNumberAndSelectValue | undefined\n          ) => {\n            if (!value || (!value[0] && value[0] !== 0)) {\n              return "error";\n            }\n            return "";\n          }}\n          setSelectStatus={(value: InputNumberAndSelectValue | undefined) => {\n            if (!value || !value[1]) {\n              return "error";\n            }\n            return "";\n          }}\n        />\n      ),\n      editProps: {\n        validateStatus: "",\n      },\n      ruleOptions: {\n        isRequired: true,\n      },\n      rules: INPUTNUMBER_SELECT_RULES,\n    },\n  ];\n\n  return (\n    <>\n      <div className={styles.itemTitleRow}>\n        <Button\n          type=\'primary\'\n          icon={<PlusOutlined />}\n          ghost\n          onClick={onAddClick}\n        >\n          新增\n        </Button>\n      </div>\n      <EditableTable\n        columns={columns}\n        dataSource={tableData}\n        setDataSource={setTableData}\n      />\n    </>\n  );\n};\n\nexport default Content;\n'}].concat(k),q=()=>(0,P.jsx)(r.A,{className:V,title:"可进行编辑的表格组件",codeParams:M,children:(0,P.jsx)(K,{})}),G="AntdTableSection_container__6ZQmu",B="AntdTableSection_sample__TBaGM",L=[(0,P.jsx)(q,{})],W=()=>(0,P.jsx)("div",{className:G,children:L.map(((e,n)=>(0,P.jsx)("div",{className:B,children:e},n)))})}}]);