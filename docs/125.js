"use strict";(self.webpackChunkcomposite_component_library=self.webpackChunkcomposite_component_library||[]).push([[125],{26064:(e,n,t)=>{t.r(n),t.d(n,{default:()=>J});var a=t(96540),r=t(17186),o=t(81935),l=t(64132),s=t(49237),i=t(80045),d=t(64467),c=t(1004),u=t(3550),p=t(7142),m=t(36492),b=t(50770),y=t(91196),h=t(93438),v=t(555),g=t(16044),f=t(91317),x=t(23824),P=t(19270);const w="EditableTable_editableTable__pfMMl";var C=t(74848);const T=["rowKey","editable","editType","editProps","component","disabled","dataIndex","record","children","ruleOptions","rules","handleSave"],R=["rowKey","onFromaValuesChange"],I=["rowKey","dataSource","columns","setDataSource","disabled","onFormValuesChange","deleteRowCallback","onAddClick"];function S(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function k(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?S(Object(t),!0).forEach((function(n){(0,d.A)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):S(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}const{RangePicker:E}=c.A,A=/^([\w+-.%]+@[\w-.]+\.[A-Za-z]{2,4})(;[\w+-.]+@[\w-.]+\.[A-Za-z]{2,4})*$/,j=a.createContext(null),N=e=>{let{form:n,editType:t,editProps:r,component:o,disabled:l,dataIndex:s,record:i,save:d}=e;const v=k(k({},r),{},{disabled:r.disabled||l});delete v.validateStatus;const g=()=>d(s);let f=(0,C.jsx)(u.A,k({style:{width:"100%"},onBlur:g},v));switch(t){case"inputNumber":f=(0,C.jsx)(p.A,k({style:{width:"100%"},onBlur:g},v));break;case"select":f=(0,C.jsx)(m.A,k({style:{width:"100%"}},v));break;case"datePicker":f=(0,C.jsx)(c.A,k({style:{width:"100%"}},v));break;case"rangePicker":f=(0,C.jsx)(E,k({style:{width:"100%"}},v));break;case"radioGroup":f=(0,C.jsx)(b.Ay.Group,k({},v));break;case"checkboxGroup":f=(0,C.jsx)(y.A.Group,k({},v));break;case"cascader":f=(0,C.jsx)(h.A,k({style:{width:"100%"}},v))}return o&&(f=a.cloneElement(o,k({record:i},v))),(0,C.jsx)(P.A,{onChange:(e,n)=>{var a,l,c;if(!t&&!o||["input","inputNumber"].includes(t))return;if("radioGroup"===t)return void(null==d||d(s,(null==e||null===(c=e.target)||void 0===c?void 0:c.value)||void 0));const u=null!=e&&e.target?"":e;null==d||d(s,u),null===(a=(l=r).onChange)||void 0===a||a.call(l,u,n,i)},form:n,nevervalidate:!!r.nevervalidate,children:f})},D=a.memo((e=>{const{rowKey:n="id",editable:t=!1,editType:r="input",editProps:o,component:l,disabled:s,dataIndex:d,record:c,children:u,ruleOptions:p,rules:m,handleSave:b}=e,y=(0,i.A)(e,T),h=(0,a.useContext)(j);let g=o||{};"function"==typeof o&&(g=o(c)||{});const f=(0,a.useMemo)((()=>{let e=[];return m&&m.length>0?e=m:(null!=p&&p.isRequired&&e.push({required:!0,message:"必填项"}),null!=p&&p.isEmail&&e.push({pattern:A,message:"请输入正确邮箱格式"})),e}),[p,m]),x=async(e,n)=>{const t=n||await(null==h?void 0:h.getFieldValue(e)),a=k(k({},c),{},{[e]:t});null==b||b(a);try{await(null==h?void 0:h.validateFields([e]))}catch(e){}};(0,a.useEffect)((()=>{null==h||h.setFieldsValue({[d]:null==c?void 0:c[d]})}),[]);let P=u;return t?P=(0,C.jsx)(v.A.Item,{style:{margin:0},name:d,rules:f,required:!(null==p||!p.isRequired),validateStatus:g.validateStatus,children:N({editType:r,editProps:g,component:l,disabled:s,dataIndex:d,record:c,form:h,save:x})}):d===n&&(P=(0,C.jsx)(v.A.Item,{style:{margin:0},name:d,hidden:!0})),(0,C.jsx)("td",k(k({title:s?null==c?void 0:c[d]:""},y),{},{children:P}))}));class O extends a.PureComponent{render(){return(0,C.jsx)(D,k({},(0,x.A)(this.props,["onMouseEnter","onMouseLeave"])))}}const V=e=>{let{rowKey:n,onFromaValuesChange:t}=e,a=(0,i.A)(e,R);const[r]=v.A.useForm();return(0,C.jsx)(v.A,{form:r,onValuesChange:(e,o)=>{null==t||t(e,r,k(k({},o),{},{[n]:a["data-row-key"]}))},component:!1,children:(0,C.jsx)(j.Provider,{value:r,children:(0,C.jsx)("tr",k({},a))})})},_=e=>{let{rowKey:n="id",dataSource:t,columns:r,setDataSource:o,disabled:s=!1,onFormValuesChange:d,deleteRowCallback:c,onAddClick:u}=e,p=(0,i.A)(e,I);const m=(0,a.useMemo)((()=>({body:{row:e=>(0,C.jsx)(V,k(k({},e),{},{rowKey:n,onFromaValuesChange:d})),cell:O}})),[]),b=e=>{const a=t.map((t=>t[n]===e[n]?k(k({},t),e):t));setTimeout((()=>{o(a)}))},y=[...(0,a.useMemo)((()=>r.map((e=>e.children&&e.children.length>0?k(k({},e),{},{children:e.children.map((e=>k(k({},e),{},{onCell:n=>({editable:e.editable,editType:e.editType,editProps:e.editProps,component:e.component,disabled:s,dataIndex:e.dataIndex,record:n,ruleOptions:e.ruleOptions,rules:e.rules,handleSave:b})})))}):k(k({},e),{},{onCell:n=>({editable:e.editable,editType:e.editType,editProps:e.editProps,component:e.component,disabled:s,dataIndex:e.dataIndex,record:n,ruleOptions:e.ruleOptions,rules:e.rules,handleSave:b})})))),[r,s,b]),{title:u?(0,C.jsx)(l.Ay,{type:"link",onClick:u,children:"新增"}):"操作",key:"action",dataIndex:"action",align:"center",width:80,fixed:"right",render:(e,a)=>(0,C.jsx)("div",{style:{padding:0},children:s?(0,C.jsx)(l.Ay,{type:"link",danger:!0,disabled:!0,children:"删除"}):(0,C.jsxs)(g.A,{title:"是否确定删除此行？",onConfirm:()=>{(e=>{const a=t.filter((t=>t[n]!==e[n]));o(a),null==c||c(e)})(a)},children:[(0,C.jsx)(l.Ay,{style:{padding:0},type:"link",danger:!0,children:"删除"})," "]})})}];return(0,C.jsx)("div",{className:w,children:(0,C.jsx)(f.A,k({rowKey:n,columns:y,components:m,dataSource:t,pagination:!1,tableLayout:"fixed",bordered:!0},p))})},F=[{fileName:"EditableTable.tsx",code:'/**\n * 可进行编辑的表格组件\n */\nimport React, { ReactNode, useEffect, useContext, useMemo } from "react";\nimport {\n  Form,\n  Table,\n  Input,\n  InputNumber,\n  Select,\n  DatePicker,\n  Radio,\n  Checkbox,\n  Cascader,\n  Button,\n  Popconfirm,\n} from "antd";\nimport type { TableProps, TableColumnProps, GetRef, FormRule } from "antd";\nimport { omit } from "lodash-es";\nimport WithValidateMessage from "@/components/formItems/WithValidateMessage";\nimport styles from "./index.module.scss";\n\nconst { RangePicker } = DatePicker;\nconst EMAIL_PATTERN =\n  /^([w+-.%]+@[w-.]+.[A-Za-z]{2,4})(;[w+-.]+@[w-.]+.[A-Za-z]{2,4})*$/;\n\nexport type EditType =\n  | "input"\n  | "inputNumber"\n  | "select"\n  | "datePicker"\n  | "rangePicker"\n  | "radioGroup"\n  | "checkboxGroup"\n  | "cascader";\n\ntype EditProps =\n  | ({\n      nevervalidate?: boolean;\n      validateStatus?: "warning" | "error" | "";\n    } & Record<string, any>)\n  | ((record: Record<string, any>) => Record<string, any>);\n\ntype FormInstance<T> = GetRef<typeof Form<T>>;\n\ntype EditableTableColumnRuleOptions = {\n  isRequired?: boolean;\n  isEmail?: boolean;\n  isPositiveInt?: boolean;\n};\n\nexport type EditableTableColumnProps = {\n  editable?: boolean;\n  editType?: EditType;\n  editProps?: EditProps;\n  component?: ReactNode | null;\n  ruleOptions?: EditableTableColumnRuleOptions;\n  rules?: FormRule[];\n} & TableColumnProps;\n\ntype RenderItemProps = {\n  editType: EditType;\n  editProps: EditProps;\n  disabled?: boolean;\n  dataIndex: string;\n  component?: ReactNode | null;\n  record?: Record<string, any>;\n  save: (dataIndex: string, cellValue?: any) => void;\n};\n\ntype EditableTableCellProps = {\n  rowKey?: string;\n  disabled?: boolean;\n  dataIndex: string;\n  record: Record<string, any>;\n  editProps?: EditProps;\n  component?: ReactNode | null;\n  handleSave: (event: any) => void;\n} & Omit<EditableTableColumnProps, "dataIndex">;\n\ntype EditableTableProps = {\n  dataSource: Record<string, any>[];\n  columns: EditableTableColumnProps[];\n  setDataSource: (dataSource: Record<string, any>[]) => void;\n  rowKey?: string;\n  disabled?: boolean;\n  onFormValuesChange?: (\n    changedValues: Record<string, any>,\n    form?: FormInstance<any> | null,\n    allValues?: Record<string, any>\n  ) => void;\n  deleteRowCallback?: (record: Record<string, any>) => void; // 删除一行后的回调\n  onAddClick?: () => void; // 新增一行的回调\n} & TableProps;\n\nconst EditableContext = React.createContext<FormInstance<any> | null>(null);\n\nconst renderItem = ({\n  form,\n  editType,\n  editProps,\n  component,\n  disabled,\n  dataIndex,\n  record,\n  save,\n}: RenderItemProps & { form: FormInstance<any> | null }) => {\n  const restProps: Record<string, any> = {\n    ...editProps,\n    disabled: (editProps as Record<string, any>).disabled || disabled,\n  };\n  delete restProps.validateStatus;\n\n  const onBlur = () => save(dataIndex);\n\n  const onChange = (cellValue?: any, option?: Record<string, any>) => {\n    if (\n      (!editType && !component) ||\n      ["input", "inputNumber"].includes(editType)\n    )\n      return;\n    if (editType === "radioGroup") {\n      save?.(dataIndex, cellValue?.target?.value || undefined);\n      return;\n    }\n    const newValue = cellValue?.target ? "" : cellValue;\n    save?.(dataIndex, newValue);\n    (editProps as Record<string, any>).onChange?.(newValue, option, record);\n  };\n\n  let itemComponent: any = (\n    <Input style={{ width: "100%" }} onBlur={onBlur} {...restProps} />\n  );\n\n  switch (editType) {\n    case "inputNumber":\n      itemComponent = (\n        <InputNumber style={{ width: "100%" }} onBlur={onBlur} {...restProps} />\n      );\n      break;\n    case "select":\n      itemComponent = <Select style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "datePicker":\n      itemComponent = <DatePicker style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "rangePicker":\n      itemComponent = <RangePicker style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "radioGroup":\n      itemComponent = <Radio.Group {...restProps} />;\n      break;\n    case "checkboxGroup":\n      itemComponent = <Checkbox.Group {...restProps} />;\n      break;\n    case "cascader":\n      itemComponent = <Cascader style={{ width: "100%" }} {...restProps} />;\n      break;\n  }\n\n  if (component) {\n    itemComponent = React.cloneElement(component, { record, ...restProps });\n  }\n\n  return (\n    <WithValidateMessage\n      onChange={onChange}\n      form={form}\n      nevervalidate={!!(editProps as Record<string, any>).nevervalidate}\n    >\n      {itemComponent}\n    </WithValidateMessage>\n  );\n};\n\nconst EditableTableCell = React.memo((props: EditableTableCellProps) => {\n  const {\n    rowKey = "id",\n    editable = false,\n    editType = "input",\n    editProps,\n    component,\n    disabled,\n    dataIndex,\n    record,\n    children,\n    ruleOptions,\n    rules,\n    handleSave,\n    ...restProps\n  } = props;\n  const form = useContext(EditableContext);\n\n  let finalComponentProps: Record<string, any> = editProps || {};\n  if (typeof editProps === "function") {\n    finalComponentProps = editProps(record) || {};\n  }\n\n  const finalRules = useMemo(() => {\n    let finalRulesArr: FormRule[] = [];\n    if (rules && rules.length > 0) {\n      finalRulesArr = rules;\n    } else {\n      if (ruleOptions?.isRequired) {\n        finalRulesArr.push({ required: true, message: "必填项" });\n      }\n      if (ruleOptions?.isEmail) {\n        finalRulesArr.push({\n          pattern: EMAIL_PATTERN,\n          message: "请输入正确邮箱格式",\n        });\n      }\n    }\n    return finalRulesArr;\n  }, [ruleOptions, rules]);\n\n  const save = async (currentDataIndex: string, cellValue?: any) => {\n    const value = cellValue || (await form?.getFieldValue(currentDataIndex));\n    const newRecord = { ...record, [currentDataIndex]: value };\n    handleSave?.(newRecord);\n    try {\n      await form?.validateFields([currentDataIndex]);\n    } catch (err) {\n      //   console.log(\'EditableTable保存数据失败\', err);\n    }\n  };\n\n  useEffect(() => {\n    form?.setFieldsValue({\n      [dataIndex]: record?.[dataIndex],\n    });\n  }, []);\n\n  let childNode: ReactNode = children;\n\n  if (editable) {\n    childNode = (\n      <Form.Item\n        style={{ margin: 0 }}\n        name={dataIndex}\n        rules={finalRules}\n        required={!!ruleOptions?.isRequired}\n        validateStatus={finalComponentProps.validateStatus}\n      >\n        {renderItem({\n          editType,\n          editProps: finalComponentProps,\n          component,\n          disabled,\n          dataIndex,\n          record,\n          form,\n          save,\n        })}\n      </Form.Item>\n    );\n  } else if (dataIndex === rowKey) {\n    childNode = (\n      <Form.Item style={{ margin: 0 }} name={dataIndex} hidden></Form.Item>\n    );\n  }\n\n  return (\n    <td title={disabled ? record?.[dataIndex] : ""} {...restProps}>\n      {childNode}\n    </td>\n  );\n});\n\nclass TableCellWrapper extends React.PureComponent {\n  render() {\n    return (\n      <EditableTableCell\n        {...omit(this.props, ["onMouseEnter", "onMouseLeave"])}\n      />\n    );\n  }\n}\n\nconst EditableTableRow = ({\n  rowKey,\n  onFromaValuesChange,\n  ...restProps\n}: any) => {\n  const [form] = Form.useForm();\n\n  const onValuesChange = (\n    changedValues: Record<string, any>,\n    allValues: Record<string, any>\n  ) => {\n    onFromaValuesChange?.(changedValues, form, {\n      ...allValues,\n      [rowKey]: restProps["data-row-key"],\n    });\n  };\n\n  return (\n    <Form form={form} onValuesChange={onValuesChange} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...restProps} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableTable = ({\n  rowKey = "id",\n  dataSource,\n  columns,\n  setDataSource,\n  disabled = false,\n  onFormValuesChange,\n  deleteRowCallback,\n  onAddClick,\n  ...restProps\n}: EditableTableProps) => {\n  const components = useMemo(\n    () => ({\n      body: {\n        row: (props: any) => (\n          <EditableTableRow\n            {...props}\n            rowKey={rowKey}\n            onFromaValuesChange={onFormValuesChange}\n          />\n        ),\n        cell: TableCellWrapper,\n      },\n    }),\n    []\n  );\n\n  const handleSave = (row: Record<string, any>) => {\n    const newDataSource = dataSource.map((item) => {\n      if (item[rowKey] === row[rowKey]) {\n        return {\n          ...item,\n          ...row,\n        };\n      }\n      return item;\n    });\n\n    setTimeout(() => {\n      setDataSource(newDataSource);\n    });\n  };\n\n  const handleDeleteRow = (record: Record<string, any>) => {\n    const newDataSource = dataSource.filter(\n      (item) => item[rowKey] !== record[rowKey]\n    );\n    setDataSource(newDataSource);\n    deleteRowCallback?.(record);\n  };\n\n  const newColumns = useMemo(() => {\n    return columns.map((col) => ({\n      ...col,\n      onCell: (record: Record<string, any>) => ({\n        editable: col.editable,\n        editType: col.editType,\n        editProps: col.editProps,\n        component: col.component,\n        disabled,\n        dataIndex: col.dataIndex,\n        record,\n        ruleOptions: col.ruleOptions,\n        rules: col.rules,\n        handleSave,\n      }),\n    }));\n  }, [columns, disabled, handleSave]);\n\n  const finalColumns = [\n    ...newColumns,\n    {\n      title: onAddClick ? (\n        <Button type=\'link\' onClick={onAddClick}>\n          新增\n        </Button>\n      ) : (\n        "操作"\n      ),\n      key: "action",\n      dataIndex: "action",\n      align: "center",\n      width: 80,\n      fixed: "right",\n      render: (_: any, record: Record<string, any>) => {\n        return (\n          <div style={{ padding: 0 }}>\n            {disabled ? (\n              <Button type=\'link\' danger disabled>\n                删除\n              </Button>\n            ) : (\n              <Popconfirm\n                title=\'是否确定删除此行？\'\n                onConfirm={() => {\n                  handleDeleteRow(record);\n                }}\n              >\n                <Button style={{ padding: 0 }} type=\'link\' danger>\n                  删除\n                </Button>{" "}\n              </Popconfirm>\n            )}\n          </div>\n        );\n      },\n    },\n  ];\n\n  return (\n    <div className={styles.editableTable}>\n      <Table\n        rowKey={rowKey}\n        columns={finalColumns as any}\n        components={components}\n        dataSource={dataSource}\n        pagination={false}\n        tableLayout=\'fixed\'\n        bordered\n        {...restProps}\n      />\n    </div>\n  );\n};\n\nexport default EditableTable;'},{fileName:"EditableTable.module.scss",code:".editableTable {\n  :global {\n    .ant-form-item {\n      .ant-form-item-control {\n        .ant-form-item-explain {\n          display: none !important;\n        }\n      }\n    }\n  }\n}"}];var K=t(65113),M=t(85541);const q="EditableTableSample_container__nPlxv",B="EditableTableSample_itemTitleRow__vlYz3",G="EditableTableSample_columnTitle__PIY7i",L="EditableTableSample_requiredIcon__o4kfq",W=[{validator:(e,n)=>n&&n.length>0&&(n[0]||0===n[0]||n[1])?(n[0]||0===n[0])&&n[1]?Promise.resolve():Promise.reject("两个都必填"):Promise.reject("必填项")}],U=()=>{const[e,n]=(0,a.useState)([]),[t,r]=(0,a.useState)([]),i=[{title:(0,C.jsxs)("div",{className:G,children:[(0,C.jsx)("span",{className:L,children:"*"}),(0,C.jsx)("span",{children:"邮箱"})]}),dataIndex:"email",width:160,editable:!0,ruleOptions:{isRequired:!0,isEmail:!0}},{title:(0,C.jsxs)("div",{className:G,children:[(0,C.jsx)("span",{className:L,children:"*"}),(0,C.jsx)("span",{children:"日期"})]}),dataIndex:"date",width:140,editable:!0,editType:"datePicker",ruleOptions:{isRequired:!0}},{title:"日期类型",dataIndex:"dateType",width:120,editable:!0,editType:"select",editProps:{options:[{label:"年",value:"year"},{label:"月",value:"month"},{label:"天",value:"day"}],allowClear:!0,nevervalidate:!0}},{title:"是否提交",dataIndex:"isSubmit",width:120,editable:!0,editType:"radioGroup",editProps:{options:[{label:"是",value:"1"},{label:"否",value:"0"}],nevervalidate:!0}},{title:(0,C.jsxs)("div",{className:G,children:[(0,C.jsx)("span",{className:L,children:"*"}),(0,C.jsx)("span",{children:"交易日"})]}),dataIndex:"field",width:240,editable:!0,component:(0,C.jsx)(K.A,{options:[{label:"工作日",value:"workingDay"},{label:"自然日",value:"naturalDay"}],inputNumberProps:{addonAfter:"个"},setInputNumberStatus:e=>!e||!e[0]&&0!==e[0]?"error":"",setSelectStatus:e=>e&&e[1]?"":"error"}),editProps:{validateStatus:""},ruleOptions:{isRequired:!0},rules:W}];return(0,C.jsxs)(C.Fragment,{children:[(0,C.jsx)("div",{className:B,children:(0,C.jsx)(l.Ay,{type:"primary",icon:(0,C.jsx)(s.A,{}),ghost:!0,onClick:()=>{if(e.length>=5)return void o.Ay.warning("最多可增加5条数据");const t=[...e,{id:"ROW_ID_".concat((0,M.r9)())}];n(t)},children:"新增"})}),(0,C.jsx)(_,{columns:i,dataSource:e,setDataSource:n}),(0,C.jsx)("div",{style:{width:"100%",height:0,borderTop:"1px dashed rgba(5, 5, 5, 0.2)",margin:"20px 0"}}),(0,C.jsx)(_,{columns:i,dataSource:t,setDataSource:r,onAddClick:()=>{if(t.length>=5)return void o.Ay.warning("最多可增加5条数据");const e=[...t,{id:"ROW_ID_".concat((0,M.r9)())}];r(e)}})]})},z=[{fileName:"index.tsx",code:'import React, { useState } from "react";\nimport { Button, message } from "antd";\nimport { PlusOutlined } from "@ant-design/icons";\nimport EditableTable from "@/components/EditableTable";\nimport type { EditableTableColumnProps } from "@/components/EditableTable";\nimport InputNumberAndSelect from "@/components/formItems/InputNumberAndSelect";\nimport type { Value as InputNumberAndSelectValue } from "@/components/formItems/InputNumberAndSelect";\nimport { getRandomId } from "utils/util";\nimport styles from "./index.module.scss";\n\nconst INPUTNUMBER_SELECT_RULES = [\n  {\n    validator: (_: Record<string, any>, value: InputNumberAndSelectValue) => {\n      if (value && value.length > 0) {\n        if (!value[0] && value[0] !== 0 && !value[1]) {\n          return Promise.reject("必填项");\n        } else {\n          if (!value[0] && value[0] !== 0) {\n            return Promise.reject("两个都必填");\n          }\n          if (!value[1]) {\n            return Promise.reject("两个都必填");\n          }\n        }\n      } else {\n        return Promise.reject("必填项");\n      }\n      return Promise.resolve();\n    },\n  },\n];\n\nconst Content = () => {\n  const [tableData1, setTableData1] = useState<Record<string, any>[]>([]);\n  const [tableData2, setTableData2] = useState<Record<string, any>[]>([]);\n\n  const onAddClick1 = () => {\n    if (tableData1.length >= 5) {\n      message.warning("最多可增加5条数据");\n      return;\n    }\n    const newDataSource = [...tableData1, { id: `ROW_ID_${getRandomId()}` }];\n    setTableData1(newDataSource);\n  };\n\n  const onAddClick2 = () => {\n    if (tableData2.length >= 5) {\n      message.warning("最多可增加5条数据");\n      return;\n    }\n    const newDataSource = [...tableData2, { id: `ROW_ID_${getRandomId()}` }];\n    setTableData2(newDataSource);\n  };\n\n  const columns: EditableTableColumnProps[] = [\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>邮箱</span>\n        </div>\n      ),\n      dataIndex: "email",\n      width: 160,\n      editable: true,\n      ruleOptions: {\n        isRequired: true,\n        isEmail: true,\n      },\n    },\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>日期</span>\n        </div>\n      ),\n      dataIndex: "date",\n      width: 140,\n      editable: true,\n      editType: "datePicker",\n      ruleOptions: {\n        isRequired: true,\n      },\n    },\n    {\n      title: "日期类型",\n      dataIndex: "dateType",\n      width: 120,\n      editable: true,\n      editType: "select",\n      editProps: {\n        options: [\n          { label: "年", value: "year" },\n          { label: "月", value: "month" },\n          { label: "天", value: "day" },\n        ],\n        allowClear: true,\n        nevervalidate: true,\n      },\n    },\n    {\n      title: "是否提交",\n      dataIndex: "isSubmit",\n      width: 120,\n      editable: true,\n      editType: "radioGroup",\n      editProps: {\n        options: [\n          { label: "是", value: "1" },\n          { label: "否", value: "0" },\n        ],\n        nevervalidate: true,\n      },\n    },\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>交易日</span>\n        </div>\n      ),\n      dataIndex: "field",\n      width: 240,\n      editable: true,\n      component: (\n        <InputNumberAndSelect\n          options={[\n            { label: "工作日", value: "workingDay" },\n            { label: "自然日", value: "naturalDay" },\n          ]}\n          inputNumberProps={{\n            addonAfter: "个",\n          }}\n          setInputNumberStatus={(\n            value: InputNumberAndSelectValue | undefined\n          ) => {\n            if (!value || (!value[0] && value[0] !== 0)) {\n              return "error";\n            }\n            return "";\n          }}\n          setSelectStatus={(value: InputNumberAndSelectValue | undefined) => {\n            if (!value || !value[1]) {\n              return "error";\n            }\n            return "";\n          }}\n        />\n      ),\n      editProps: {\n        validateStatus: "",\n      },\n      ruleOptions: {\n        isRequired: true,\n      },\n      rules: INPUTNUMBER_SELECT_RULES,\n    },\n  ];\n\n  return (\n    <>\n      <div className={styles.itemTitleRow}>\n        <Button\n          type=\'primary\'\n          icon={<PlusOutlined />}\n          ghost\n          onClick={onAddClick1}\n        >\n          新增\n        </Button>\n      </div>\n      <EditableTable\n        columns={columns}\n        dataSource={tableData1}\n        setDataSource={setTableData1}\n      />\n      <div\n        style={{\n          width: "100%",\n          height: 0,\n          borderTop: "1px dashed rgba(5, 5, 5, 0.2)",\n          margin: "20px 0",\n        }}\n      />\n      <EditableTable\n        columns={columns}\n        dataSource={tableData2}\n        setDataSource={setTableData2}\n        onAddClick={onAddClick2}\n      />\n    </>\n  );\n};\n\nexport default Content;'}].concat(F),Z=()=>(0,C.jsx)(r.A,{className:q,title:"可进行编辑的表格组件",codeParams:z,children:(0,C.jsx)(U,{})}),$="AntdTableSection_container__3x6aP",Y="AntdTableSection_sample__Cf4Bm",H=[(0,C.jsx)(Z,{})],J=()=>(0,C.jsx)("div",{className:$,children:H.map(((e,n)=>(0,C.jsx)("div",{className:Y,children:e},n)))})}}]);