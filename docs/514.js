"use strict";(self.webpackChunkcomposite_component_library=self.webpackChunkcomposite_component_library||[]).push([[514],{19270:(e,n,t)=>{t.d(n,{A:()=>h,w:()=>f});var a=t(96540),s=t(61878),r=t(52629),i=t(46942),l=t.n(i);const o="WithValidateMessage_container__w-KWx",d="WithValidateMessage_componentBox__FXDFV",m="WithValidateMessage_messageBox__Mc3qF";var c=t(74848);const h=(0,a.forwardRef)(((e,n)=>{const{form:t,nevervalidate:i=!1,id:h="","aria-invalid":f,children:u,className:g,style:p={},...v}=e,x=(0,a.useRef)(null);(0,a.useImperativeHandle)(n,(()=>({focus:()=>{x.current?.focus()}})));const y=(0,a.useMemo)((()=>{let e="";if(!i&&t&&h&&"true"===f){const n=h.split("_");let a=[];a=n.length>=3?t.getFieldError([n[n.length-3],Number(n[n.length-2]),n[n.length-1]]):t.getFieldError(n[n.length-1]),e=a[0]}return e}),[t,i,h,f]);return(0,c.jsxs)("div",{className:l()({[o]:!0,[g||""]:!!g}),style:p,children:[(0,c.jsx)("div",{className:d,style:{width:i?"100%":"calc(100% - 28px)"},children:u?a.cloneElement(u,{...v,"aria-invalid":f,id:h,ref:x}):null}),!i&&!!y&&(0,c.jsx)("div",{className:m,children:(0,c.jsx)(s.A,{title:y,children:(0,c.jsx)(r.A,{})})})]})})),f=[{fileName:"WithValidateMessage.tsx",code:'/**\n * 用于显示自定义校验信息的FormItem组件的包装组件(注意：如果子组件需要传onChange属性，则必须由该包装组件进行传递，不能写在子组件里；要在外层组件中将.ant-form-item-explain类样式的display属性覆盖为none)\n */\nimport React, {\n  useMemo,\n  ReactElement,\n  useImperativeHandle,\n  useRef,\n  forwardRef,\n  Ref,\n} from "react";\nimport { Tooltip, type FormInstance } from "antd";\nimport { ExclamationCircleOutlined } from "@ant-design/icons";\nimport classnams from "classnames";\nimport styles from "./index.module.scss";\n\ntype WithValidateMessageProps = {\n  form?: FormInstance | null; // form对象，nevervalidate为true时可以不传\n  nevervalidate?: boolean; // 是否绝对不会进行校验，该值为true时，组件后面不会有校验信息的图标，也不会占用空间\n  id?: string; // Form.Item组件自动传入\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  children?: ReactElement | null; // children必须是支持value和onChange属性的组件\n  className?: string;\n  style?: Record<string, any>;\n} & { [key in string]: any };\n\nconst WithValidateMessage = forwardRef(\n  (props: WithValidateMessageProps, ref: Ref<{ focus: () => void }>) => {\n    const {\n      form,\n      nevervalidate = false,\n      id = "",\n      ["aria-invalid"]: invalid,\n      children,\n      className,\n      style = {},\n      ...restProps\n    } = props;\n    const focusRef = useRef<any>(null);\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        focusRef.current?.focus();\n      },\n    }));\n\n    // 获取校验信息\n    const errorMessage = useMemo(() => {\n      let str = "";\n      if (!nevervalidate && form && id && invalid === "true") {\n        const namePath = id.split("_");\n        let errorList = [];\n        // 兼容Form.List\n        if (namePath.length >= 3) {\n          errorList = form.getFieldError([\n            namePath[namePath.length - 3],\n            Number(namePath[namePath.length - 2]),\n            namePath[namePath.length - 1],\n          ]);\n        } else {\n          errorList = form.getFieldError(namePath[namePath.length - 1]);\n        }\n        str = errorList[0];\n      }\n      return str;\n    }, [form, nevervalidate, id, invalid]);\n\n    return (\n      <div\n        className={classnams({\n          [styles.container]: true,\n          [className || ""]: !!className,\n        })}\n        style={style}\n      >\n        <div\n          className={styles.componentBox}\n          style={{ width: nevervalidate ? "100%" : "calc(100% - 28px)" }}\n        >\n          {children\n            ? React.cloneElement(children, {\n                ...restProps,\n                "aria-invalid": invalid,\n                id,\n                ref: focusRef,\n              })\n            : null}\n        </div>\n        {!nevervalidate && !!errorMessage && (\n          <div className={styles.messageBox}>\n            <Tooltip title={errorMessage}>\n              <ExclamationCircleOutlined />\n            </Tooltip>\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default WithValidateMessage;'},{fileName:"WithValidateMessage.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  $messageWidth: 26px;\n  .componentBox {\n    display: flex;\n    align-items: center;\n  }\n  .messageBox {\n    width: $messageWidth;\n    height: $messageWidth;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 3px;\n    margin-left: 2px;\n    svg {\n      width: 18px;\n      height: 18px;\n      path {\n        fill: $globalRedColor;\n      }\n    }\n  }\n}"}]},92989:(e,n,t)=>{t.d(n,{A:()=>r});var a=t(96540),s=t(98119);const r=e=>{const n=(0,a.useContext)(s.A);return(0,a.useMemo)((()=>null!=e?!!e:!!n),[e,n])}}}]);