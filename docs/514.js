"use strict";(self.webpackChunkcomposite_component_library=self.webpackChunkcomposite_component_library||[]).push([[514],{19270:(e,n,t)=>{t.d(n,{A:()=>v,w:()=>y});var r=t(64467),a=t(80045),s=t(96540),i=t(61878),l=t(52629),o=t(46942),c=t.n(o);const d="WithValidateMessage_container__LfIjn",m="WithValidateMessage_componentBox__TkGw5",f="WithValidateMessage_messageBox__O-PGe";var u=t(74848);const p=["form","nevervalidate","id","aria-invalid","children","className","style"];function h(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function g(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?h(Object(t),!0).forEach((function(n){(0,r.A)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):h(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}const v=(0,s.forwardRef)(((e,n)=>{const{form:t,nevervalidate:r=!1,id:o="","aria-invalid":h,children:v,className:y,style:x={}}=e,P=(0,a.A)(e,p),b=(0,s.useRef)(null);(0,s.useImperativeHandle)(n,(()=>({focus:()=>{var e;null===(e=b.current)||void 0===e||e.focus()}})));const O=(0,s.useMemo)((()=>{let e="";if(!r&&t&&o&&"true"===h){const n=o.split("_");let r=[];r=n.length>=3?t.getFieldError([n[n.length-3],Number(n[n.length-2]),n[n.length-1]]):t.getFieldError(n[n.length-1]),e=r[0]}return e}),[t,r,o,h]);return(0,u.jsxs)("div",{className:c()({[d]:!0,[y||""]:!!y}),style:x,children:[(0,u.jsx)("div",{className:m,style:{width:r?"100%":"calc(100% - 28px)"},children:v?s.cloneElement(v,g(g({},P),{},{"aria-invalid":h,id:o,ref:b})):null}),!r&&!!O&&(0,u.jsx)("div",{className:f,children:(0,u.jsx)(i.A,{title:O,children:(0,u.jsx)(l.A,{})})})]})})),y=[{fileName:"WithValidateMessage.tsx",code:'/**\n * 用于显示自定义校验信息的FormItem组件的包装组件(注意：如果子组件需要传onChange属性，则必须由该包装组件进行传递，不能写在子组件里；要在外层组件中将.ant-form-item-explain类样式的display属性覆盖为none)\n */\nimport React, {\n  useMemo,\n  ReactElement,\n  useImperativeHandle,\n  useRef,\n  forwardRef,\n  Ref,\n} from "react";\nimport { Tooltip, type FormInstance } from "antd";\nimport { ExclamationCircleOutlined } from "@ant-design/icons";\nimport classnams from "classnames";\nimport styles from "./index.module.scss";\n\ntype WithValidateMessageProps = {\n  form?: FormInstance | null; // form对象，nevervalidate为true时可以不传\n  nevervalidate?: boolean; // 是否绝对不会进行校验，该值为true时，组件后面不会有校验信息的图标，也不会占用空间\n  id?: string; // Form.Item组件自动传入\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  children?: ReactElement | null; // children必须是支持value和onChange属性的组件\n  className?: string;\n  style?: Record<string, any>;\n} & { [key in string]: any };\n\nconst WithValidateMessage = forwardRef(\n  (props: WithValidateMessageProps, ref: Ref<{ focus: () => void }>) => {\n    const {\n      form,\n      nevervalidate = false,\n      id = "",\n      ["aria-invalid"]: invalid,\n      children,\n      className,\n      style = {},\n      ...restProps\n    } = props;\n    const focusRef = useRef<any>(null);\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        focusRef.current?.focus();\n      },\n    }));\n\n    // 获取校验信息\n    const errorMessage = useMemo(() => {\n      let str = "";\n      if (!nevervalidate && form && id && invalid === "true") {\n        const namePath = id.split("_");\n        let errorList = [];\n        // 兼容Form.List\n        if (namePath.length >= 3) {\n          errorList = form.getFieldError([\n            namePath[namePath.length - 3],\n            Number(namePath[namePath.length - 2]),\n            namePath[namePath.length - 1],\n          ]);\n        } else {\n          errorList = form.getFieldError(namePath[namePath.length - 1]);\n        }\n        str = errorList[0];\n      }\n      return str;\n    }, [form, nevervalidate, id, invalid]);\n\n    return (\n      <div\n        className={classnams({\n          [styles.container]: true,\n          [className || ""]: !!className,\n        })}\n        style={style}\n      >\n        <div\n          className={styles.componentBox}\n          style={{ width: nevervalidate ? "100%" : "calc(100% - 28px)" }}\n        >\n          {children\n            ? React.cloneElement(children, {\n                ...restProps,\n                "aria-invalid": invalid,\n                id,\n                ref: focusRef,\n              })\n            : null}\n        </div>\n        {!nevervalidate && !!errorMessage && (\n          <div className={styles.messageBox}>\n            <Tooltip title={errorMessage}>\n              <ExclamationCircleOutlined />\n            </Tooltip>\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default WithValidateMessage;'},{fileName:"WithValidateMessage.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  $messageWidth: 26px;\n  .componentBox {\n    display: flex;\n    align-items: center;\n  }\n  .messageBox {\n    width: $messageWidth;\n    height: $messageWidth;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 3px;\n    margin-left: 2px;\n    svg {\n      width: 18px;\n      height: 18px;\n      path {\n        fill: $globalRedColor;\n      }\n    }\n  }\n}"}]},92989:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(96540),a=t(98119);const s=e=>{const n=(0,r.useContext)(a.A);return(0,r.useMemo)((()=>null!=e?!!e:!!n),[e,n])}}}]);