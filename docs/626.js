"use strict";(self.webpackChunkcomposite_component_library=self.webpackChunkcomposite_component_library||[]).push([[626],{2397:(e,n,t)=>{t.r(n),t.d(n,{default:()=>Bn});var l=t(6540),a=t(7186),o=t(9467),s=t(7152),i=t(6370),r=t(3888),d=t(1196),c=t(6942),u=t.n(c),m=t(2989);const h="DatePickerAndCheckbox_container__KwiIN",p="DatePickerAndCheckbox_checkbox__NinO0",f="DatePickerAndCheckbox_noLabel__UkWsT";var b=t(4848);const g=e=>{const{value:n,checkboxLabel:t=null,disabled:a,datePickerProps:o={},checkboxProps:s={},onChange:i,"aria-invalid":c,setDatePickerStatus:g,style:v={}}=e,y=(0,m.A)(a),x=(0,l.useMemo)((()=>{if(g&&"true"===c)return g(n)}),[c,n]);return(0,b.jsxs)("div",{className:h,style:v,children:[(0,b.jsx)(r.A,{value:n&&n.length>=1?n[0]:void 0,disabled:y,status:x,...o,onChange:e=>{const t=n&&n.length>=2?[e||void 0,n[1]]:[e||void 0,void 0];i?.(t)}}),(0,b.jsx)(d.A,{className:u()({[p]:!0,[f]:!t}),checked:n&&n.length>=2?n[1]:void 0,disabled:y,...s,onChange:e=>{const t=e?.target?.checked||!1,l=n&&n.length>=1?[n[0],t]:[void 0,t];i?.(l)},children:t})]})},v="DatePickerAndCheckboxSample_container__M7yhS",y=()=>{const[e]=o.A.useForm();return(0,b.jsx)(o.A,{form:e,labelAlign:"right",className:v,children:(0,b.jsxs)(s.A,{gutter:16,children:[(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field1",children:(0,b.jsx)(g,{checkboxLabel:"复选框标题"})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field2",children:(0,b.jsx)(g,{datePickerProps:{format:"YYYY/MM/DD"}})})})]})})},x=[{fileName:"index.tsx",code:"import React from \"react\";\nimport { Form, Row, Col } from \"antd\";\nimport DatePickerAndCheckbox from \"@/components/formItems/DatePickerAndCheckbox\";\nimport styles from \"./index.module.scss\";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign='right' className={styles.container}>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field1'>\n            <DatePickerAndCheckbox checkboxLabel='复选框标题' />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field2'>\n            <DatePickerAndCheckbox datePickerProps={{ format: \"YYYY/MM/DD\" }} />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;"}].concat([{fileName:"DatePickerAndCheckbox.tsx",code:'/**\n * 左边日期选择框右边复选框的复合组件\n */\nimport React, { useMemo } from "react";\nimport { DatePicker, Checkbox } from "antd";\nimport { CheckboxChangeEvent } from "antd/es/checkbox";\nimport { Dayjs } from "dayjs";\nimport classnams from "classnames";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\ntype Value = [Dayjs | null | undefined, boolean | undefined];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype DatePickerAndCheckboxProps = {\n  value?: Value;\n  checkboxLabel?: string;\n  disabled?: boolean;\n  datePickerProps?: Record<string, any>; // 传递给日期选择框的属性值\n  checkboxProps?: Record<string, any>; // 传递给复选框的属性值\n  onChange?: (value: Value) => void;\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setDatePickerStatus?: (value: Value | undefined) => Status; // 当form校验时，设置日期选择框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  style?: Record<string, any>;\n};\n\nconst DatePickerAndCheckbox = (props: DatePickerAndCheckboxProps) => {\n  const {\n    value,\n    checkboxLabel = null,\n    disabled: selfDisabled,\n    datePickerProps = {},\n    checkboxProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setDatePickerStatus,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onDatePickerChange = (date: Dayjs | null) => {\n    const newValue: Value =\n      value && value.length >= 2\n        ? [date || undefined, value[1]]\n        : [date || undefined, undefined];\n    onChange?.(newValue);\n  };\n\n  const onCheckboxChange = (e: CheckboxChangeEvent) => {\n    const checked = e?.target?.checked || false;\n    const newValue: Value =\n      value && value.length >= 1 ? [value[0], checked] : [undefined, checked];\n    onChange?.(newValue);\n  };\n\n  const datePickerStatus = useMemo(() => {\n    if (setDatePickerStatus && invalid === "true") {\n      return setDatePickerStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <DatePicker\n        value={value && value.length >= 1 ? value[0] : undefined}\n        disabled={disabled}\n        status={datePickerStatus}\n        {...datePickerProps}\n        onChange={onDatePickerChange}\n      />\n      <Checkbox\n        className={classnams({\n          [styles.checkbox]: true,\n          [styles.noLabel]: !checkboxLabel,\n        })}\n        checked={value && value.length >= 2 ? value[1] : undefined}\n        disabled={disabled}\n        {...checkboxProps}\n        onChange={onCheckboxChange}\n      >\n        {checkboxLabel}\n      </Checkbox>\n    </div>\n  );\n};\n\nexport default DatePickerAndCheckbox;'},{fileName:"DatePickerAndCheckbox.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .checkbox {\n    display: flex;\n    align-items: center;\n    margin-left: 8px;\n    span {\n      word-break: keep-all;\n    }\n  }\n  .noLabel {\n    span:not(.ant-checkbox) {\n      padding-inline-start: 0 !important;\n      padding-inline-end: 0 !important;\n    }\n  }\n}"}]),k=()=>(0,b.jsx)(a.A,{title:"左边日期选择框右边复选框的复合组件",codeParams:x,children:(0,b.jsx)(y,{})});var C=t(5754);const S=()=>{const[e]=o.A.useForm();return(0,b.jsx)(o.A,{form:e,labelAlign:"right",children:(0,b.jsxs)(s.A,{gutter:16,children:[(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field1",children:(0,b.jsx)(C.A,{checkboxLabel:"复选框标题"})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field2",children:(0,b.jsx)(C.A,{rangePickerProps:{format:"YYYY/MM/DD"}})})})]})})},A="RangePickerAndCheckboxSample_container__lJatc",w=[{fileName:"index.tsx",code:"import React from \"react\";\nimport { Form, Row, Col } from \"antd\";\nimport RangePickerAndCheckbox from \"@/components/formItems/RangePickerAndCheckbox\";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign='right'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field1'>\n            <RangePickerAndCheckbox checkboxLabel='复选框标题' />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field2'>\n            <RangePickerAndCheckbox\n              rangePickerProps={{ format: \"YYYY/MM/DD\" }}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;"}].concat(C.w),_=()=>(0,b.jsx)(a.A,{className:A,title:"左边日期范围选择框右边复选框的复合组件",codeParams:w,children:(0,b.jsx)(S,{})});var R=t(2203),N=t(4353),P=t.n(N);const j="CustomRangePicker_container__ORuOy",D="CustomRangePicker_datePicker__8v8Zv",M="CustomRangePicker_center__vEzdz",I=e=>{const{value:n,placeholder:t,customCenter:a="~",disabled:o,datePickerProps:s={},onChange:i,"aria-invalid":d,setDatePickerStatus:c,style:u={}}=e,h=(0,m.A)(o),p=(0,l.useMemo)((()=>c&&"true"===d?c(n):[void 0,void 0]),[d,n]),f=(0,l.useMemo)((()=>[t?.[0]?t[0]:"开始日期",t?.[1]?t[1]:"结束日期"]),[t]);return(0,b.jsxs)("div",{className:j,style:u,children:[(0,b.jsx)(r.A,{className:D,value:n&&n.length>=1?n[0]:void 0,placeholder:f[0],disabledDate:e=>{if(s?.disabledDate)return s.disabledDate(e,"start");if(n&&n.length>=2&&n[1]){if(e.format("YYYY-MM-DD")===n[1].format("YYYY-MM-DD"))return!1;if(e>n[1])return!0}return!1},disabledTime:s?.showTime?e=>{if(s?.disabledTime)return s.disabledTime(e,"start");if(n&&n.length>=2&&n[1]&&P()(e.format("YYYY-MM-DD"))>=P()(n[1].format("YYYY-MM-DD"))){const[e,t,l]=n[1].format("HH:mm:ss").split(":"),a=Number(e),o=Number(t),s=Number(l);return{disabledHours:()=>{const e=[];for(let n=a+1;n<24;n++)e.push(n);return e},disabledMinutes:e=>{const n=[];if(e>=a)for(let e=o+1;e<60;e++)n.push(e);return n},disabledSeconds:(e,n)=>{const t=[];if(e>=a&&n>=o)for(let e=s+1;e<60;e++)t.push(e);return t}}}return{}}:void 0,disabled:h,status:p[0],onChange:e=>{let t=n&&n.length>=2?[void 0,n[1]]:[void 0,void 0];e&&(t=n&&n.length>=2?[e,n[1]]:[e,void 0]),i?.(t)},...s}),(0,b.jsx)("div",{className:M,children:a}),(0,b.jsx)(r.A,{className:D,value:n&&n.length>=2?n[1]:void 0,placeholder:f[1],disabledDate:e=>{if(s?.disabledDate)return s.disabledDate(e,"end");if(n&&n.length>=1&&n[0]){if(e.format("YYYY-MM-DD")===n[0].format("YYYY-MM-DD"))return!1;if(e<n[0])return!0}return!1},disabledTime:s?.showTime?e=>{if(s?.disabledTime)return s.disabledTime(e,"end");if(n&&n.length>=1&&n[0]&&P()(e.format("YYYY-MM-DD"))<=P()(n[0].format("YYYY-MM-DD"))){const[e,t,l]=n[0].format("HH:mm:ss").split(":"),a=Number(e),o=Number(t),s=Number(l);return{disabledHours:()=>{const e=[];for(let n=0;n<a;n++)e.push(n);return e},disabledMinutes:e=>{const n=[];if(e<=a)for(let e=0;e<o;e++)n.push(e);return n},disabledSeconds:(e,n)=>{const t=[];if(e<=a&&n<=o)for(let e=0;e<s;e++)t.push(e);return t}}}return{}}:void 0,disabled:h,status:p[1],onChange:e=>{let t=n&&n.length>=1?[n[0],void 0]:[void 0,void 0];e&&(t=n&&n.length>=1?[n[0],e]:[void 0,e]),i?.(t)},...s})]})},V=()=>{const[e]=o.A.useForm();return(0,b.jsx)(o.A,{form:e,labelAlign:"right",children:(0,b.jsxs)(s.A,{gutter:16,children:[(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field1",children:(0,b.jsx)(I,{})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field2",children:(0,b.jsx)(I,{placeholder:["开始时间","结束时间"],datePickerProps:{format:"YYYY/MM/DD HH:mm:ss",showTime:!0},customCenter:(0,b.jsx)(R.A,{})})})})]})})},F="CustomRangePickerSample_container__9+JLJ",T=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col } from "antd";\nimport { SwapRightOutlined } from "@ant-design/icons";\nimport CustomRangePicker from "@/components/formItems/CustomRangePicker";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign=\'right\'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field1\'>\n            <CustomRangePicker />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\'>\n            <CustomRangePicker\n              placeholder={["开始时间", "结束时间"]}\n              datePickerProps={{\n                format: "YYYY/MM/DD HH:mm:ss",\n                showTime: true,\n              }}\n              customCenter={<SwapRightOutlined />}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat([{fileName:"CustomRangePicker.tsx",code:'/**\n * 自定义日期范围选择复合组件\n */\nimport React, { ReactNode, useMemo } from "react";\nimport { DatePicker } from "antd";\nimport dayjs, { Dayjs } from "dayjs";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\ntype Value = [Dayjs | null | undefined, Dayjs | null | undefined];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype CustomRangePickerProps = {\n  value?: Value;\n  placeholder?: [string, string];\n  customCenter?: ReactNode;\n  disabled?: boolean;\n  datePickerProps?: Record<string, any>;\n  onChange?: (value: Value) => void;\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setDatePickerStatus?: (value: Value | undefined) => Status; // 当form校验时，设置日期选择框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  style?: Record<string, any>;\n};\n\nconst CustomRangePicker = (props: CustomRangePickerProps) => {\n  const {\n    value,\n    placeholder,\n    customCenter = "~",\n    disabled: selfDisabled,\n    datePickerProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setDatePickerStatus,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onStartDateChange = (date: Dayjs | null) => {\n    let newValue: Value =\n      value && value.length >= 2\n        ? [undefined, value[1]]\n        : [undefined, undefined];\n    if (date) {\n      newValue =\n        value && value.length >= 2 ? [date, value[1]] : [date, undefined];\n    }\n    onChange?.(newValue);\n  };\n\n  const onEndDateChange = (date: Dayjs | null) => {\n    let newValue: Value =\n      value && value.length >= 1\n        ? [value[0], undefined]\n        : [undefined, undefined];\n    if (date) {\n      newValue =\n        value && value.length >= 1 ? [value[0], date] : [undefined, date];\n    }\n    onChange?.(newValue);\n  };\n\n  const startDisabledDate = (currentDate: Dayjs) => {\n    if (datePickerProps?.disabledDate) {\n      return datePickerProps.disabledDate(currentDate, "start");\n    }\n    if (value && value.length >= 2 && value[1]) {\n      if (datePickerProps?.showTime) {\n        const currentFormatDate = currentDate.format("YYYYMMDD");\n        const endFormatDate = value[1].format("YYYYMMDD");\n        if (currentFormatDate === endFormatDate) {\n          return false;\n        }\n      }\n      if (currentDate > value[1]) return true;\n    }\n    return false;\n  };\n\n  const endDisabledDate = (currentDate: Dayjs) => {\n    if (datePickerProps?.disabledDate) {\n      return datePickerProps.disabledDate(currentDate, "end");\n    }\n    if (value && value.length >= 1 && value[0]) {\n      if (datePickerProps?.showTime) {\n        const currentFormatDate = currentDate.format("YYYYMMDD");\n        const startFormatDate = value[0].format("YYYYMMDD");\n        if (currentFormatDate === startFormatDate) {\n          return false;\n        }\n      }\n      if (currentDate < value[0]) return true;\n    }\n    return false;\n  };\n\n  const startDisabledTime = (selectedDate: Dayjs) => {\n    if (datePickerProps?.disabledTime) {\n      return datePickerProps.disabledTime(selectedDate, "start");\n    }\n    if (value && value.length >= 2 && value[1]) {\n      if (\n        dayjs(selectedDate.format("YYYY-MM-DD")) >=\n        dayjs(value[1].format("YYYY-MM-DD"))\n      ) {\n        const [hourStr, minuteStr, secondStr] = value[1]\n          .format("HH:mm:ss")\n          .split(":");\n        const hour = Number(hourStr);\n        const minute = Number(minuteStr);\n        const second = Number(secondStr);\n        return {\n          disabledHours: () => {\n            const disabledHours: number[] = [];\n            for (let i = hour + 1; i < 24; i++) {\n              disabledHours.push(i);\n            }\n            return disabledHours;\n          },\n          disabledMinutes: (selectedHour: number) => {\n            const disabledMinutes: number[] = [];\n            if (selectedHour >= hour) {\n              for (let i = minute + 1; i < 60; i++) {\n                disabledMinutes.push(i);\n              }\n            }\n            return disabledMinutes;\n          },\n          disabledSeconds: (selectedHour: number, selectedMinute: number) => {\n            const disabledSeconds: number[] = [];\n            if (selectedHour >= hour && selectedMinute >= minute) {\n              for (let i = second + 1; i < 60; i++) {\n                disabledSeconds.push(i);\n              }\n            }\n            return disabledSeconds;\n          },\n        };\n      }\n    }\n    return {};\n  };\n\n  const endDisabledTime = (selectedDate: Dayjs) => {\n    if (datePickerProps?.disabledTime) {\n      return datePickerProps.disabledTime(selectedDate, "end");\n    }\n    if (value && value.length >= 1 && value[0]) {\n      if (\n        dayjs(selectedDate.format("YYYY-MM-DD")) <=\n        dayjs(value[0].format("YYYY-MM-DD"))\n      ) {\n        const [hourStr, minuteStr, secondStr] = value[0]\n          .format("HH:mm:ss")\n          .split(":");\n        const hour = Number(hourStr);\n        const minute = Number(minuteStr);\n        const second = Number(secondStr);\n        return {\n          disabledHours: () => {\n            const disabledHours: number[] = [];\n            for (let i = 0; i < hour; i++) {\n              disabledHours.push(i);\n            }\n            return disabledHours;\n          },\n          disabledMinutes: (selectedHour: number) => {\n            const disabledMinutes: number[] = [];\n            if (selectedHour <= hour) {\n              for (let i = 0; i < minute; i++) {\n                disabledMinutes.push(i);\n              }\n            }\n            return disabledMinutes;\n          },\n          disabledSeconds: (selectedHour: number, selectedMinute: number) => {\n            const disabledSeconds: number[] = [];\n            if (selectedHour <= hour && selectedMinute <= minute) {\n              for (let i = 0; i < second; i++) {\n                disabledSeconds.push(i);\n              }\n            }\n            return disabledSeconds;\n          },\n        };\n      }\n    }\n    return {};\n  };\n\n  const datePickerStatus = useMemo(() => {\n    if (setDatePickerStatus && invalid === "true") {\n      return setDatePickerStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  const finalPlaceholder = useMemo(() => {\n    const startPlaceholder = placeholder?.[0] ? placeholder[0] : "开始日期";\n    const endPlaceholder = placeholder?.[1] ? placeholder[1] : "结束日期";\n    return [startPlaceholder, endPlaceholder];\n  }, [placeholder]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <DatePicker\n        className={styles.datePicker}\n        value={value && value.length >= 1 ? value[0] : undefined}\n        placeholder={finalPlaceholder[0]}\n        disabledDate={startDisabledDate}\n        disabledTime={datePickerProps?.showTime ? startDisabledTime : undefined}\n        disabled={disabled}\n        status={datePickerStatus}\n        onChange={onStartDateChange}\n        {...datePickerProps}\n      />\n      <div className={styles.center}>{customCenter}</div>\n      <DatePicker\n        className={styles.datePicker}\n        value={value && value.length >= 2 ? value[1] : undefined}\n        placeholder={finalPlaceholder[1]}\n        disabledDate={endDisabledDate}\n        disabledTime={datePickerProps?.showTime ? endDisabledTime : undefined}\n        disabled={disabled}\n        status={datePickerStatus}\n        onChange={onEndDateChange}\n        {...datePickerProps}\n      />\n    </div>\n  );\n};\n\nexport default CustomRangePicker;'},{fileName:"CustomRangePicker.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .datePicker {\n    display: flex;\n    flex: 1;\n  }\n  .center {\n    padding: 0 8px;\n  }\n}"}]),O=()=>(0,b.jsx)(a.A,{className:F,title:"自定义日期范围选择复合组件",codeParams:T,children:(0,b.jsx)(V,{})});var K=t(6492),E=t(3815);const L=()=>{const[e]=o.A.useForm(),n=(0,b.jsx)(K.A,{style:{width:90},defaultValue:"http://",options:[{label:"http://",value:"http://"},{label:"https://",value:"https://"}]}),t=(0,b.jsx)(K.A,{style:{width:80},defaultValue:".com",options:[{label:".com",value:".com"},{label:".cn",value:".cn"},{label:".org",value:".org"}]});return(0,b.jsx)(o.A,{form:e,labelAlign:"right",children:(0,b.jsxs)(s.A,{gutter:16,children:[(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field1",children:(0,b.jsx)(E.A,{inputProps:{addonBefore:n,addonAfter:t},checkboxLabel:"复选框标题"})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field2",children:(0,b.jsx)(E.A,{})})})]})})},Y="InputAndCheckboxSample_container__W59nb",B=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col, Select } from "antd";\nimport InputAndCheckbox from "@/components/formItems/InputAndCheckbox";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  const selectBefore = (\n    <Select\n      style={{ width: 90 }}\n      defaultValue=\'http://\'\n      options={[\n        { label: "http://", value: "http://" },\n        { label: "https://", value: "https://" },\n      ]}\n    />\n  );\n  const selectAfter = (\n    <Select\n      style={{ width: 80 }}\n      defaultValue=\'.com\'\n      options={[\n        { label: ".com", value: ".com" },\n        { label: ".cn", value: ".cn" },\n        { label: ".org", value: ".org" },\n      ]}\n    />\n  );\n\n  return (\n    <Form form={form} labelAlign=\'right\'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field1\'>\n            <InputAndCheckbox\n              inputProps={{\n                addonBefore: selectBefore,\n                addonAfter: selectAfter,\n              }}\n              checkboxLabel=\'复选框标题\'\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\'>\n            <InputAndCheckbox />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat(E.w),G=()=>(0,b.jsx)(a.A,{className:Y,title:"左边输入框右边复选框的复合组件",codeParams:B,children:(0,b.jsx)(L,{})});var U=t(5113);const $=()=>{const[e]=o.A.useForm();return(0,b.jsx)(o.A,{form:e,labelAlign:"right",children:(0,b.jsxs)(s.A,{gutter:16,children:[(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field1",children:(0,b.jsx)(U.A,{options:[{name:"工作日",id:"workingDay"},{name:"自然日",id:"naturalDay"}],inputNumberProps:{addonAfter:"个",percision:8},selectProps:{fieldNames:{label:"name",value:"id"}}})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field2",children:(0,b.jsx)(U.A,{options:[{label:"年",value:"year"},{label:"月",value:"month"},{label:"天",value:"day"}],inputNumberProps:{min:0,max:1e4,precision:2}})})})]})})},W="InputNumberAndSelectSample_container__YVhxN",H=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col } from "antd";\nimport InputNumberAndSelect from "@/components/formItems/InputNumberAndSelect";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign=\'right\'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field1\'>\n            <InputNumberAndSelect\n              options={[\n                { name: "工作日", id: "workingDay" },\n                { name: "自然日", id: "naturalDay" },\n              ]}\n              inputNumberProps={{ addonAfter: "个" }}\n              selectProps={{\n                fieldNames: { label: "name", value: "id" },\n              }}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\'>\n            <InputNumberAndSelect\n              options={[\n                { label: "年", value: "year" },\n                { label: "月", value: "month" },\n                { label: "天", value: "day" },\n              ]}\n              inputNumberProps={{ min: 0, max: 10000, precision: 2 }}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat(U.w),z=()=>(0,b.jsx)(a.A,{className:W,title:"左边数值输入框右边下拉框的复合组件",codeParams:H,children:(0,b.jsx)($,{})});var q=t(770);const Z="RadioGroupAndSelect_container__vkPOd",J="RadioGroupAndSelect_radioGroup__Y54gl",Q="RadioGroupAndSelect_selectBox__84kOJ",X="RadioGroupAndSelect_select__GlHSP",ee=[{label:"是",value:1},{label:"否",value:0}],ne=e=>{const{value:n,selectOptions:t=[],radioGroupOptions:a=ee,disabled:o,radioGroupProps:s={},selectProps:i={},onChange:r,"aria-invalid":d,setSelectStatus:c,whenShowSelect:u=0,reserveSelectValue:h=!1,style:p={}}=e,f=(0,m.A)(o),g=(0,l.useMemo)((()=>{if(c&&"true"===d)return c(n)}),[d,n]);return(0,b.jsxs)("div",{className:Z,style:p,children:[(0,b.jsx)(q.Ay.Group,{className:J,value:n&&n.length>=1?n[0]:void 0,options:a,disabled:f,...s,onChange:e=>{const t=e.target?.value,l=n&&n.length>=2?[t,h||t===u?n[1]:void 0]:[t,void 0];r?.(l)}}),(0,b.jsx)("div",{className:Q,children:n?.[0]===u&&(0,b.jsx)(K.A,{className:X,value:n&&n.length>=2?n[1]:void 0,options:t,disabled:f,status:g,...i,onChange:(e,t)=>{const l=n&&n.length>=1?[n[0],e]:[void 0,e];r?.(l,t)}})})]})},te=[{label:"工作日",value:"workingDay"},{label:"自然日",value:"naturalDay"}],le=[{label:"选项1",value:"1"},{label:"选项2",value:"2"},{label:"选项3",value:"3"}],ae=()=>{const[e]=o.A.useForm();return(0,b.jsx)(o.A,{form:e,labelAlign:"right",initialValues:{field1:[0,void 0]},children:(0,b.jsxs)(s.A,{gutter:16,children:[(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field1",children:(0,b.jsx)(ne,{selectOptions:le})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field2",children:(0,b.jsx)(ne,{radioGroupOptions:te,whenShowSelect:"workingDay",reserveSelectValue:!0,selectOptions:le})})})]})})},oe="RadioGroupAndSelectSample_container__ZAWTR",se=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col } from "antd";\nimport RadioGroupAndSelect from "@/components/formItems/RadioGroupAndSelect";\n\nconst RADIO_GROUP_OPTIONS = [\n  { label: "工作日", value: "workingDay" },\n  { label: "自然日", value: "naturalDay" },\n];\nconst SELECT_OPTIONS = [\n  { label: "选项1", value: "1" },\n  { label: "选项2", value: "2" },\n  { label: "选项3", value: "3" },\n];\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form\n      form={form}\n      labelAlign=\'right\'\n      initialValues={{ field1: [0, undefined] }}\n    >\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field1\'>\n            <RadioGroupAndSelect selectOptions={SELECT_OPTIONS} />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\'>\n            <RadioGroupAndSelect\n              radioGroupOptions={RADIO_GROUP_OPTIONS}\n              whenShowSelect=\'workingDay\'\n              reserveSelectValue\n              selectOptions={SELECT_OPTIONS}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat([{fileName:"RadioGroupAndSelect.tsx",code:'/**\n * 左边单选框右边下拉框的复合组件\n */\nimport React, { useMemo } from "react";\nimport { Radio, Select } from "antd";\nimport type { RadioChangeEvent } from "antd";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\nexport type Value = [number | string | undefined, string | undefined];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype RadioGroupAndSelectProps = {\n  value?: Value;\n  selectOptions: Record<string, any>;\n  radioGroupOptions?: Record<string, any>;\n  disabled?: boolean;\n  radioGroupProps?: Record<string, any>; // 传递给单选框的属性值\n  selectProps?: Record<string, any>; // 传递给下拉框的属性值\n  onChange?: (value: Value, option?: Record<string, any>) => void; // 如果修改下拉框则onChange的第二个参数会返回option\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setSelectStatus?: (value: Value | undefined) => Status; // 当form校验时，设置下拉框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  whenShowSelect?: number | string; // 何时显示右边的下拉框，默认当左边单选框的值为0时\n  reserveSelectValue?: boolean; // 当下拉框不显示时，是否要保留下拉框中的值，默认为false\n  style?: Record<string, any>;\n};\n\nconst DEFAULT_RADIO_GROUP_OPTIONS = [\n  { label: "是", value: 1 },\n  { label: "否", value: 0 },\n];\n\nconst RadioGroupAndSelect = (props: RadioGroupAndSelectProps) => {\n  const {\n    value,\n    selectOptions = [],\n    radioGroupOptions = DEFAULT_RADIO_GROUP_OPTIONS,\n    disabled: selfDisabled,\n    radioGroupProps = {},\n    selectProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setSelectStatus,\n    whenShowSelect = 0,\n    reserveSelectValue = false,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onRadioGroupChange = (e: RadioChangeEvent) => {\n    const v = e.target?.value;\n    const newValue: Value =\n      value && value.length >= 2\n        ? [v, reserveSelectValue || v === whenShowSelect ? value[1] : undefined]\n        : [v, undefined];\n    onChange?.(newValue);\n  };\n\n  const onSelectChange = (v: string, option: Record<string, any>) => {\n    const newValue: Value =\n      value && value.length >= 1 ? [value[0], v] : [undefined, v];\n    onChange?.(newValue, option);\n  };\n\n  const selectStatus = useMemo(() => {\n    if (setSelectStatus && invalid === "true") {\n      return setSelectStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <Radio.Group\n        className={styles.radioGroup}\n        value={value && value.length >= 1 ? value[0] : undefined}\n        options={radioGroupOptions as any[]}\n        disabled={disabled}\n        {...radioGroupProps}\n        onChange={onRadioGroupChange}\n      />\n      <div className={styles.selectBox}>\n        {value?.[0] === whenShowSelect && (\n          <Select\n            className={styles.select}\n            value={value && value.length >= 2 ? value[1] : undefined}\n            options={selectOptions as any[]}\n            disabled={disabled}\n            status={selectStatus}\n            {...selectProps}\n            onChange={onSelectChange}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RadioGroupAndSelect;'},{fileName:"RadioGroupAndSelect.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .radioGroup {\n    display: flex;\n  }\n  .selectBox {\n    display: flex;\n    flex: 1;\n    .select {\n      display: flex;\n      flex: 1;\n    }\n  }\n}"}]),ie=()=>(0,b.jsx)(a.A,{className:oe,title:"左边单选框右边下拉框的复合组件",codeParams:se,children:(0,b.jsx)(ae,{})});var re=t(1935),de=t(9822),ce=t(5709);const ue="CanAddMultiple_container__ZEPWF",me="CanAddMultiple_row__--s1X",he="CanAddMultiple_addBtn__tRlxQ",pe="CanAddMultiple_disabled__ZEO7H",fe="CanAddMultiple_deleteBtn__s+wlP",be=e=>{const{value:n,disabled:t,hideBtn:a=!1,maxRows:o=-1,children:s,onChange:i,style:r={},...d}=e,c=(0,m.A)(t),h=(e,t,l)=>{if(n&&n.length>0){const a=[];n.forEach(((n,l)=>{l===e?a.push(t):a.push(n)})),i?.(a,...l)}else i?.([t],...l)},p=()=>{if(c)return;let e=[void 0,void 0];if(n&&n.length>0){if(o>0&&n.length>=o)return void re.Ay.warning(`最多可添加${o}个`);e=[...n,void 0]}i?.(e)},f=(0,l.useMemo)((()=>n&&n.length>0?n:[void 0]),[n]);return(0,b.jsx)("div",{className:ue,style:r,children:f.map(((e,t)=>(0,b.jsxs)("div",{className:me,children:[s?l.cloneElement(s,{value:e,disabled:c,index:t,onChange:function(e){for(var n=arguments.length,l=new Array(n>1?n-1:0),a=1;a<n;a++)l[a-1]=arguments[a];return h(t,e,l)},...d}):null,!a&&(0,b.jsxs)(b.Fragment,{children:[0===t&&(0,b.jsx)("div",{className:u()({[he]:!0,[pe]:c}),onClick:p,children:(0,b.jsx)(de.A,{})}),t>0&&(0,b.jsx)("div",{className:u()({[fe]:!0,[pe]:c}),onClick:()=>(e=>{if(!c&&n&&n.length>0){const t=n.filter(((n,t)=>t!==e));i?.(t)}})(t),children:(0,b.jsx)(ce.A,{})})]})]},t)))})},ge=()=>{const[e]=o.A.useForm(),n=(0,b.jsx)(K.A,{style:{width:90},defaultValue:"http://",options:[{label:"http://",value:"http://"},{label:"https://",value:"https://"}]}),t=(0,b.jsx)(K.A,{style:{width:80},defaultValue:".com",options:[{label:".com",value:".com"},{label:".cn",value:".cn"},{label:".org",value:".org"}]});return(0,b.jsx)(o.A,{form:e,labelAlign:"right",children:(0,b.jsxs)(s.A,{gutter:16,children:[(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field1",children:(0,b.jsx)(be,{maxRows:5,children:(0,b.jsx)(E.A,{inputProps:{addonBefore:n,addonAfter:t},checkboxLabel:"复选框标题"})})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field2",children:(0,b.jsx)(be,{maxRows:6,children:(0,b.jsx)(U.A,{style:{marginRight:"8px"},options:[{name:"工作日",id:"workingDay"},{name:"自然日",id:"naturalDay"}],inputNumberProps:{addonAfter:"个"},selectProps:{fieldNames:{label:"name",value:"id"}}})})})})]})})},ve="CanAddMultipleSample_container__F08Q9",ye=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col, Select } from "antd";\nimport CanAddMultiple from "@/components/formItems/CanAddMultiple";\nimport InputAndCheckbox from "@/components/formItems/InputAndCheckbox";\nimport InputNumberAndSelect from "@/components/formItems/InputNumberAndSelect";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  const selectBefore = (\n    <Select\n      defaultValue=\'http://\'\n      options={[\n        { label: "http://", value: "http://" },\n        { label: "https://", value: "https://" },\n      ]}\n    />\n  );\n  const selectAfter = (\n    <Select\n      defaultValue=\'.com\'\n      options={[\n        { label: ".com", value: ".com" },\n        { label: ".cn", value: ".cn" },\n        { label: ".org", value: ".org" },\n      ]}\n    />\n  );\n\n  return (\n    <Form form={form} labelAlign=\'right\'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field1\'>\n            <CanAddMultiple maxRows={5}>\n              <InputAndCheckbox\n                inputProps={{\n                  addonBefore: selectBefore,\n                  addonAfter: selectAfter,\n                }}\n                checkboxLabel=\'复选框标题\'\n              />\n            </CanAddMultiple>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\'>\n            <CanAddMultiple maxRows={6}>\n              <InputNumberAndSelect\n                style={{ marginRight: "8px" }}\n                options={[\n                  { name: "工作日", id: "workingDay" },\n                  { name: "自然日", id: "naturalDay" },\n                ]}\n                inputNumberProps={{ addonAfter: "个" }}\n                selectProps={{\n                  fieldNames: { label: "name", value: "id" },\n                }}\n              />\n            </CanAddMultiple>\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat([{fileName:"CanAddMultiple.tsx",code:'/**\n * 可增加和删除多条数据的包装组件\n */\nimport React, { useMemo, ReactElement } from "react";\nimport { message } from "antd";\nimport { PlusCircleOutlined, MinusCircleOutlined } from "@ant-design/icons";\nimport classnams from "classnames";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\ntype Value = any[];\n\ntype CanAddMultipleProps = {\n  value?: Value;\n  disabled?: boolean;\n  hideBtn?: boolean; // 是否隐藏新增和删除按钮\n  maxRows?: number; // 最多可显示的行个数, 默认为-1无限制\n  children?: ReactElement | null; // children必须是支持value和onChange属性的组件\n  onChange?: (value: Value, ...restProps: any[]) => void;\n  style?: Record<string, any>;\n} & { [key in string]: any };\n\nconst CanAddMultiple = (props: CanAddMultipleProps) => {\n  const {\n    value,\n    disabled: selfDisabled,\n    hideBtn = false,\n    maxRows = -1,\n    children,\n    onChange,\n    style = {},\n    ...restProrps\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onChildrenChange = (index: number, rowValue: any, restProps: any[]) => {\n    if (value && value.length > 0) {\n      const newValue: Value = [];\n      value.forEach((item: any, i: number) => {\n        if (i === index) {\n          newValue.push(rowValue);\n        } else {\n          newValue.push(item);\n        }\n      });\n      onChange?.(newValue, ...restProps);\n    } else {\n      onChange?.([rowValue], ...restProps);\n    }\n  };\n\n  const onAdd = () => {\n    if (disabled) return;\n    let newValue: Value = [undefined, undefined];\n    if (value && value.length > 0) {\n      if (maxRows > 0 && value.length >= maxRows) {\n        message.warning(`最多可添加${maxRows}个`);\n        return;\n      }\n      newValue = [...value, undefined];\n    }\n    onChange?.(newValue);\n  };\n\n  const onDelete = (index: number) => {\n    if (disabled) return;\n    if (value && value.length > 0) {\n      const newValue: Value = value.filter((_: any, i: number) => i !== index);\n      onChange?.(newValue);\n    }\n  };\n\n  const finalValue = useMemo(() => {\n    if (value && value.length > 0) {\n      return value;\n    }\n    return [undefined];\n  }, [value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      {finalValue.map((itemValue: any, index: number) => {\n        return (\n          <div className={styles.row} key={index}>\n            {children\n              ? React.cloneElement(children, {\n                  value: itemValue,\n                  disabled,\n                  index,\n                  onChange: (value: any, ...restProps: any[]) =>\n                    onChildrenChange(index, value, restProps),\n                  ...restProrps,\n                })\n              : null}\n            {!hideBtn && (\n              <>\n                {index === 0 && (\n                  <div\n                    className={classnams({\n                      [styles.addBtn]: true,\n                      [styles.disabled]: disabled,\n                    })}\n                    onClick={onAdd}\n                  >\n                    <PlusCircleOutlined />\n                  </div>\n                )}\n                {index > 0 && (\n                  <div\n                    className={classnams({\n                      [styles.deleteBtn]: true,\n                      [styles.disabled]: disabled,\n                    })}\n                    onClick={() => onDelete(index)}\n                  >\n                    <MinusCircleOutlined />\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CanAddMultiple;'},{fileName:"CanAddMultiple.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  .row {\n    display: flex;\n    align-items: center;\n    &:not(:first-child) {\n      margin-top: 8px;\n    }\n\n    $btnSize: 16px;\n    .addBtn:not(.disabled) {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      :global {\n        svg {\n          width: $btnSize;\n          height: $btnSize;\n          path {\n            fill: $globalPrimaryColor;\n          }\n        }\n      }\n    }\n\n    .deleteBtn:not(.disabled) {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      :global {\n        svg {\n          width: $btnSize;\n          height: $btnSize;\n          path {\n            fill: $globalRedColor;\n          }\n        }\n      }\n    }\n\n    .disabled {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: not-allowed;\n      :global {\n        svg {\n          width: $btnSize;\n          height: $btnSize;\n          path {\n            fill: $disabledColor;\n          }\n        }\n      }\n    }\n  }\n}"}]),xe=()=>(0,b.jsx)(a.A,{className:ve,title:"可增加和删除多条数据的包装组件",codeParams:ye,children:(0,b.jsx)(ge,{})});var ke=t(8073),Ce=t(9029);const Se="CustomMultiSelect_customMultiSelect__N7bxY",Ae="CustomMultiSelect_customMultiSelectDropdown__oxo5j",we="CustomMultiSelect_allCheck__8IuYv",_e="CustomMultiSelect_allCheckbox__1e2Hc",Re="CustomMultiSelect_clear__cqA1W",Ne="CustomMultiSelect_checkCount__JOvMq",Pe="CustomMultiSelect_options__7oOO7",je=Symbol("labelKey"),De=e=>{const{value:n,options:t,customOptionLabel:a,dropdownRenderContent:o,disabled:s,onChange:i,searchKeys:r,onSearch:c,customFilter:u,maxTagCount:m=0,showSimplePlaceholder:h=!1,onDropdownVisibleChange:p,fieldNames:f,loading:g=!1,style:v={},...y}=e,[x,k]=(0,l.useState)(!1),C=(0,l.useRef)(!1),S=(0,l.useRef)(""),A=(e,n)=>{if(!e)return!0;if(u)return u(e,n);const t=Object.keys(n).some((t=>{const l=n[t]||"";return r&&r.length>0?r.includes(t)&&l.toString().toLowerCase().includes(e.toLocaleLowerCase()):("string"!=typeof t||!["id","key"].includes(t))&&(t!==je&&l.toString().toLowerCase().includes(e.toLocaleLowerCase()))}));return t},w=e=>{if(e){const e=f?.value||"value",l=(t?.filter((e=>!S.current||A(S.current,e)))||[]).map((n=>n[e])),a=new Set(l.concat(n||[]));i?.([...a])}else i?.([])},_=(0,l.useCallback)((e=>{e.stopPropagation(),i?.([])}),[]),{isAllSelected:R,indeterminate:N}=(0,l.useMemo)((()=>{const e=f?.value||"value",l=t&&t.length>0&&n&&n.length>0&&t.every((t=>n.includes(t[e])));return{isAllSelected:l,indeterminate:!l&&n&&n.length>0}}),[n,t]),P=(0,l.useMemo)((()=>t?.map(((e,t)=>{const l=f?.label||"label",o=f?.value||"value";return{...e,[je]:a?a(e,n,t):(0,b.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,b.jsx)(d.A,{style:{marginRight:4},checked:n?.includes(e[o])}),(0,b.jsx)("span",{children:e[l]})]},e[o])}}))||[]),[n,t]),j=(0,l.useMemo)((()=>{let e={...f||{}};return e.label=je,e}),[]);return(0,b.jsx)(K.A,{className:Se,style:v,showSearch:!0,maxTagCount:m,maxTagPlaceholder:n&&n.length>m?()=>{const e=f?.label||"label",l=f?.value||"value";let a=[];return n&&n.length>0&&t&&t.length>0&&(a=t.filter((e=>n.includes(e[l])))),h?a.map((n=>n[e])).join(", "):(0,b.jsx)(ke.A,{placement:"bottomLeft",content:(0,b.jsx)("div",{children:a.map((n=>(0,b.jsx)("div",{style:{display:"flex",alignItems:"center",height:24,minWidth:100,justifyContent:"space-between"},children:n[e]},n[l])))}),open:x,onOpenChange:()=>{C.current||k(!x)},children:(0,b.jsx)("div",{style:{width:"100%",marginLeft:-6,paddingLeft:6},onClick:()=>{C.current||k(!0)},children:`已选${n?n.length:0}个项目`})})}:null,value:n,onChange:i,onDropdownVisibleChange:e=>{C.current=e,p?.(e),k(!1),e||(S.current="")},filterOption:(e,n)=>A(e,n),loading:g,...y,mode:"multiple",options:P,fieldNames:j,dropdownRender:o||(e=>(0,b.jsx)("div",{className:Ae,children:(0,b.jsxs)(Ce.A,{spinning:g,children:[(0,b.jsxs)("div",{className:we,children:[(0,b.jsx)(d.A,{className:_e,checked:R,indeterminate:N,onChange:()=>{w(!R)},children:(0,b.jsx)("span",{onClick:e=>{e.preventDefault(),w(!R)},children:"全选"})}),(0,b.jsx)("span",{className:Re,onClick:_,children:"清空"}),(0,b.jsxs)("span",{className:Ne,children:["已选（",n?.length||0,"/",t?.length||0,"）"]})]}),(0,b.jsx)("div",{className:Pe,children:e})]})})),onSearch:e=>{S.current=e,c?.(e)}})},Me=[{fileName:"CustomMultiSelect.tsx",code:'/**\n * 可自定义的多选下拉框组件\n */\nimport React, {\n  ReactNode,\n  useState,\n  useRef,\n  useCallback,\n  useMemo,\n} from "react";\nimport { Select, Popover, Checkbox, Spin } from "antd";\nimport type { SelectProps } from "antd";\nimport styles from "./index.module.scss";\n\nexport type CustomMultiSelectProps = {\n  value?: string[];\n  options?: Record<string | symbol, any>[];\n  customOptionLabel?: (\n    option: Record<string | symbol, any>,\n    value?: string[],\n    index?: number\n  ) => ReactNode; // 自定义下拉选项的视图, 不传时，会显示默认视图；传值后，则直接使用该函数返回的视图进行显示\n  dropdownRenderContent?: (menu?: ReactNode) => ReactNode; // 下拉面板自定义视图\n  disabled?: boolean;\n  popupParentElement?: boolean; // 下拉面板是否渲染到父节点上，默认false，渲染到document.body上\n  onChange?: (value: any[], options?: Record<string, any>[]) => void;\n  searchKeys?: (string | symbol)[]; // 要进行模糊搜索的字段名列表\n  onSearch?: (searchValue: string, selected?: string[]) => void;\n  customFilter?: (\n    input: string,\n    record: Record<string | symbol, any>\n  ) => boolean; // 自定义模糊搜索\n  maxTagCount?: number;\n  showSimplePlaceholder?: boolean; // 已选中的是否只简单显示 label1, label2\n  onDropdownVisibleChange?: (openState?: boolean) => void; // 下拉面板显示隐藏时的回调\n  fieldNames?: Record<string, any>;\n  loading?: boolean;\n  style?: Record<string, any>;\n} & SelectProps;\n\nconst labelKeySymbol = Symbol("labelKey");\n\nconst CustomMultiSelect = (props: CustomMultiSelectProps) => {\n  const {\n    value,\n    options,\n    customOptionLabel,\n    dropdownRenderContent,\n    disabled,\n    onChange,\n    searchKeys,\n    onSearch,\n    customFilter,\n    maxTagCount = 0,\n    showSimplePlaceholder = false,\n    onDropdownVisibleChange,\n    fieldNames,\n    loading = false,\n    style = {},\n    ...restProps\n  } = props;\n  const [popoverVisible, setPopoverVisible] = useState<boolean>(false);\n  const dropdownOpenRef = useRef<boolean>(false);\n  const searchValueRef = useRef<string>("");\n\n  const onFilter = (\n    inputValue: string,\n    record: Record<string | symbol, any>\n  ) => {\n    if (!inputValue) return true;\n    if (customFilter) {\n      return customFilter(inputValue, record);\n    }\n\n    const result = Object.keys(record).some((key: string | symbol) => {\n      const value = record[key] || "";\n      if (searchKeys && searchKeys.length > 0) {\n        return (\n          searchKeys.includes(key) &&\n          value\n            .toString()\n            .toLowerCase()\n            .includes(inputValue.toLocaleLowerCase())\n        );\n      }\n\n      if (typeof key === "string" && ["id", "key"].includes(key)) return false;\n      if (key === labelKeySymbol) return false;\n\n      return value\n        .toString()\n        .toLowerCase()\n        .includes(inputValue.toLocaleLowerCase());\n    });\n\n    return result;\n  };\n\n  const filterOption = (\n    inputValue: string,\n    option: Record<string | symbol, any>\n  ) => {\n    return onFilter(inputValue, option);\n  };\n\n  const handleSearch = (searchValue: string) => {\n    searchValueRef.current = searchValue;\n    onSearch?.(searchValue);\n  };\n\n  const handleDropdownVisibleChange = (openState: boolean) => {\n    dropdownOpenRef.current = openState;\n    onDropdownVisibleChange?.(openState);\n    setPopoverVisible(false);\n    if (!openState) {\n      searchValueRef.current = "";\n    }\n  };\n\n  const onAllCheckboxChange = (checked: boolean) => {\n    if (checked) {\n      const valueKey = fieldNames?.value || "value";\n      const allValues = (\n        options?.filter(\n          (item: Record<string | symbol, any>) =>\n            !searchValueRef.current || onFilter(searchValueRef.current, item)\n        ) || []\n      ).map((item) => item[valueKey]);\n      const newValue = new Set(allValues.concat(value || []));\n      onChange?.([...newValue]);\n    } else {\n      onChange?.([]);\n    }\n  };\n\n  const onClear = useCallback((e: any) => {\n    e.stopPropagation();\n    onChange?.([]);\n  }, []);\n\n  const { isAllSelected, indeterminate } = useMemo(() => {\n    const valueKey = fieldNames?.value || "value";\n    const isAllSelected =\n      options &&\n      options.length > 0 &&\n      value &&\n      value.length > 0 &&\n      options.every((item: Record<string | symbol, any>) =>\n        value.includes(item[valueKey])\n      );\n    const indeterminate = !isAllSelected && value && value.length > 0;\n    return { isAllSelected, indeterminate };\n  }, [value, options]);\n\n  const hoverMaxTagPlaceholder = () => {\n    const labelKey = fieldNames?.label || "label";\n    const valueKey = fieldNames?.value || "value";\n    let selectedOptions: Record<string, any>[] = [];\n    if (value && value.length > 0 && options && options.length > 0) {\n      selectedOptions = options.filter((item: Record<string | symbol, any>) =>\n        value.includes(item[valueKey])\n      );\n    }\n\n    if (showSimplePlaceholder) {\n      return selectedOptions\n        .map((item: Record<string | symbol, any>) => item[labelKey])\n        .join(", ");\n    }\n\n    return (\n      <Popover\n        placement=\'bottomLeft\'\n        content={\n          <div>\n            {selectedOptions.map((record: Record<string | symbol, any>) => (\n              <div\n                style={{\n                  display: "flex",\n                  alignItems: "center",\n                  height: 24,\n                  minWidth: 100,\n                  justifyContent: "space-between",\n                }}\n                key={record[valueKey]}\n              >\n                {record[labelKey]}\n              </div>\n            ))}\n          </div>\n        }\n        open={popoverVisible}\n        onOpenChange={() => {\n          if (dropdownOpenRef.current) return;\n          setPopoverVisible(!popoverVisible);\n        }}\n      >\n        <div\n          style={{ width: "100%", marginLeft: -6, paddingLeft: 6 }}\n          onClick={() => {\n            if (!dropdownOpenRef.current) {\n              setPopoverVisible(true);\n            }\n          }}\n        >\n          {`已选${value ? value.length : 0}个项目`}\n        </div>\n      </Popover>\n    );\n  };\n\n  const dropdownRender = (menu: any) => (\n    <div className={styles.customMultiSelectDropdown}>\n      <Spin spinning={loading}>\n        <div className={styles.allCheck}>\n          <Checkbox\n            className={styles.allCheckbox}\n            checked={isAllSelected}\n            indeterminate={indeterminate}\n            onChange={() => {\n              onAllCheckboxChange(!isAllSelected);\n            }}\n          >\n            <span\n              onClick={(e) => {\n                e.preventDefault();\n                onAllCheckboxChange(!isAllSelected);\n              }}\n            >\n              全选\n            </span>\n          </Checkbox>\n          <span className={styles.clear} onClick={onClear}>\n            清空\n          </span>\n          <span className={styles.checkCount}>\n            已选（{value?.length || 0}/{options?.length || 0}）\n          </span>\n        </div>\n        <div className={styles.options}>{menu}</div>\n      </Spin>\n    </div>\n  );\n\n  const finalOptions = useMemo(() => {\n    return (\n      options?.map((option: Record<string | symbol, any>, index: number) => {\n        const labelKey = fieldNames?.label || "label";\n        const valueKey = fieldNames?.value || "value";\n        return {\n          ...option,\n          [labelKeySymbol]: customOptionLabel ? (\n            customOptionLabel(option, value, index)\n          ) : (\n            <div\n              style={{ display: "flex", alignItems: "center" }}\n              key={option[valueKey]}\n            >\n              <Checkbox\n                style={{ marginRight: 4 }}\n                checked={value?.includes(option[valueKey])}\n              />\n              <span>{option[labelKey]}</span>\n            </div>\n          ),\n        };\n      }) || []\n    );\n  }, [value, options]);\n\n  const finalFieldNames = useMemo(() => {\n    let newfieldNames: Record<string | symbol, any> = { ...(fieldNames || {}) };\n    newfieldNames.label = labelKeySymbol;\n    return newfieldNames;\n  }, []);\n\n  return (\n    <Select\n      className={styles.customMultiSelect}\n      style={style}\n      showSearch\n      maxTagCount={maxTagCount}\n      maxTagPlaceholder={\n        value && value.length > maxTagCount ? hoverMaxTagPlaceholder : null\n      }\n      value={value}\n      onChange={onChange as any}\n      onDropdownVisibleChange={handleDropdownVisibleChange}\n      filterOption={filterOption as any}\n      loading={loading}\n      {...restProps}\n      mode=\'multiple\'\n      options={finalOptions as any}\n      fieldNames={finalFieldNames}\n      dropdownRender={dropdownRenderContent || dropdownRender}\n      onSearch={handleSearch}\n    />\n  );\n};\n\nexport default CustomMultiSelect;'},{fileName:"CustomMultiSelect.module.scss",code:".customMultiSelect {\n  width: 100%;\n  :global {\n    .ant-select-selector {\n      .ant-select-selection-overflow {\n        .ant-select-selection-overflow-item {\n          height: 28px;\n        }\n      }\n    }\n  }\n}\n\n.customMultiSelectDropdown {\n  padding: 10px 4px;\n  .allCheck {\n    display: flex;\n    align-items: center;\n    height: 24px;\n    .allCheckbox {\n      padding-left: 0;\n      padding-bottom: 0;\n      display: flex;\n      align-items: center;\n    }\n    .clear {\n      cursor: pointer;\n      color: $globalPrimaryColor;\n    }\n    .checkCount {\n      margin-left: 6px;\n      color: #666;\n    }\n  }\n  .options {\n    :global {\n      .rc-virtual-list {\n        ::-webkit-scrollbar {\n          width: 8px !important;\n        }\n\n        ::-webkit-scrollbar-thumb {\n          border-radius: 4px !important;\n          background-color: #888 !important;\n        }\n      }\n    }\n  }\n}"}];var Ie=t(8826);const Ve="code",Fe=[{name:"Name",code:"name",width:120},{name:"Code",code:"code",width:120},{name:"备注",code:"remark",width:150,ellipsis:!0}],Te=e=>{const{value:n,options:t,loading:a,onChange:o}=e,s=(0,l.useRef)(null),i=e=>{o?.(e)},r=e=>{const l=e[Ve],a=n?.some((e=>e===l));if(a)if(1===n?.length)s.current?.clear();else{const e=[];(n?.filter((e=>e!==l))||[]).forEach((n=>{const l=t?.find((e=>e[Ve]===n));l&&e.push(l)})),s.current?.setSelectedRows(e)}else if(n&&n.length>0){const a=[],o=[];n.forEach((e=>{const n=t?.find((n=>n[Ve]===e));n&&(a.push(n),o.push(n[Ve]))})),a.push(e),o.push(l),s.current?.setSelectedRows(a)}else s.current?.setSelectedRows([e])};return(0,b.jsx)(De,{fieldNames:{label:"name",value:Ve},searchKeys:["name"],popupMatchSelectWidth:!1,dropdownRenderContent:()=>(0,b.jsx)("div",{style:{width:700,padding:"12px 16px"},children:(0,b.jsx)(Ce.A,{spinning:a,children:(0,b.jsx)(Ie.A,{rowKey:Ve,resize:!0,height:280,isLoading:a,columns:Fe,dataSource:t,selectedRowKeys:n,onRowClick:r,multiSelect:!0,multiSelectOptions:{value:n,onChange:i,ref:s}})})}),onClear:()=>{s.current?.onClear()},onDeselect:e=>{if(n){const l=n.filter((n=>n!==e)),a=[];l.map((e=>{const n=t?.find((n=>n[Ve]===e));n&&a.push(n)})),s.current?.setSelectedRows(a)}},...e})},Oe=[{fileName:"TablePanelMultiSelect.tsx",code:'/**\n * 下拉面板为表格的多选下拉组件\n */\nimport React, { useRef } from "react";\nimport { Spin } from "antd";\nimport type { ArtColumn } from "ali-react-table";\nimport CustomMultiSelect from "@/components/formItems/CustomMultiSelect";\nimport type { CustomMultiSelectProps } from "@/components/formItems/CustomMultiSelect";\nimport AliTable from "@/components/AliTable";\nimport type { ArtColumn2 } from "@/components/AliTable";\n\ntype TablePanelMultiSelectProps = {\n  value?: string[];\n  options: Record<string, any>[];\n  loading?: boolean;\n  onChange?: (value: string[]) => void;\n} & CustomMultiSelectProps;\n\nconst rowKey = "code";\n\nconst columns: ArtColumn2[] = [\n  { name: "Name", code: "name", width: 120 },\n  { name: "Code", code: "code", width: 120 },\n  { name: "备注", code: "remark", width: 150, ellipsis: true },\n];\n\nconst TablePanelMultiSelect = (props: TablePanelMultiSelectProps) => {\n  const { value, options, loading, onChange } = props;\n  const multiSelectOptionsRef = useRef<any>(null);\n\n  const onSelectChange = (selectedRowKeys: string[]) => {\n    onChange?.(selectedRowKeys);\n  };\n\n  const onRowClick = (record: Record<string, any>) => {\n    const clickRowKey = record[rowKey];\n    const isSelectedBefore = value?.some((key: string) => key === clickRowKey);\n\n    // 如果当前行已被选中，则取消选中，否则反之\n    if (isSelectedBefore) {\n      if (value?.length === 1) {\n        multiSelectOptionsRef.current?.clear();\n      } else {\n        const newSelectedRows: Record<string, any>[] = [];\n        const newSelectedRowKeys =\n          value?.filter((key: string) => key !== clickRowKey) || [];\n        newSelectedRowKeys.forEach((key: string) => {\n          const selectRow = options?.find(\n            (item: Record<string, any>) => item[rowKey] === key\n          );\n          if (selectRow) {\n            newSelectedRows.push(selectRow);\n          }\n        });\n        multiSelectOptionsRef.current?.setSelectedRows(newSelectedRows);\n      }\n    } else {\n      if (value && value.length > 0) {\n        const newSelectedRows: Record<string, any>[] = [];\n        const newSelectedRowKeys: string[] = [];\n        value.forEach((key: string) => {\n          const selectRow = options?.find(\n            (item: Record<string, any>) => item[rowKey] === key\n          );\n          if (selectRow) {\n            newSelectedRows.push(selectRow);\n            newSelectedRowKeys.push(selectRow[rowKey]);\n          }\n        });\n        newSelectedRows.push(record);\n        newSelectedRowKeys.push(clickRowKey);\n        multiSelectOptionsRef.current?.setSelectedRows(newSelectedRows);\n      } else {\n        multiSelectOptionsRef.current?.setSelectedRows([record]);\n      }\n    }\n  };\n\n  const onClear = () => {\n    multiSelectOptionsRef.current?.onClear();\n  };\n\n  const onDeselect = (deselectValue: string) => {\n    if (value) {\n      const newValue = value.filter((key: string) => key !== deselectValue);\n      const newSelectedRows: Record<string, any>[] = [];\n      newValue.map((key: string) => {\n        const selectRow = options?.find(\n          (item: Record<string, any>) => item[rowKey] === key\n        );\n        if (selectRow) {\n          newSelectedRows.push(selectRow);\n        }\n      });\n      multiSelectOptionsRef.current?.setSelectedRows(newSelectedRows);\n    }\n  };\n\n  const dropdownRenderContent = () => (\n    <div style={{ width: 700, padding: "12px 16px" }}>\n      <Spin spinning={loading}>\n        <AliTable\n          rowKey={rowKey}\n          resize\n          height={280}\n          isLoading={loading}\n          columns={columns as ArtColumn[]}\n          dataSource={options}\n          selectedRowKeys={value}\n          onRowClick={onRowClick}\n          multiSelect\n          multiSelectOptions={{\n            value,\n            onChange: onSelectChange,\n            ref: multiSelectOptionsRef,\n          }}\n        />\n      </Spin>\n    </div>\n  );\n\n  return (\n    <CustomMultiSelect\n      fieldNames={{ label: "name", value: rowKey }}\n      searchKeys={["name"]}\n      popupMatchSelectWidth={false}\n      dropdownRenderContent={dropdownRenderContent}\n      onClear={onClear}\n      onDeselect={onDeselect}\n      {...props}\n    />\n  );\n};\n\nexport default TablePanelMultiSelect;'}];var Ke=t(5541);const Ee=()=>{const[e]=o.A.useForm(),[n,t]=(0,l.useState)([]),[a,r]=(0,l.useState)(!1),c=(0,l.useCallback)(((e,n)=>(0,b.jsxs)("div",{style:{display:"flex",alignItems:"center",width:450},children:[(0,b.jsx)(d.A,{style:{marginRight:4},checked:n?.includes(e.code)}),(0,b.jsx)("span",{style:{display:"flex",flex:1,overflow:"hidden",whiteSpace:"nowrap",textOverflow:"ellipsis"},children:e.name}),(0,b.jsx)("span",{style:{display:"flex",flex:1,overflow:"hidden",whiteSpace:"nowrap",textOverflow:"ellipsis"},children:e.code})]},e.code)),[]);return(0,l.useEffect)((()=>{(async()=>{r(!0);const e=await(0,Ke.AJ)();r(!1),t(e?e.data:[])})()}),[]),(0,b.jsx)(o.A,{form:e,labelAlign:"right",children:(0,b.jsxs)(s.A,{gutter:16,children:[(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field1",children:(0,b.jsx)(De,{options:n,loading:a,fieldNames:{label:"name",value:"code"},searchKeys:["name"]})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field2",children:(0,b.jsx)(De,{options:n,loading:a,fieldNames:{label:"name",value:"code"},searchKeys:["name"],showSimplePlaceholder:!0})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field3",children:(0,b.jsx)(De,{options:n,customOptionLabel:c,loading:a,fieldNames:{label:"name",value:"code"},searchKeys:["name"],popupMatchSelectWidth:!1})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field4",children:(0,b.jsx)(Te,{options:n,loading:a,showSimplePlaceholder:!0})})})]})})},Le="CustomMultiSelectSample_container__--eUq",Ye=[{fileName:"index.tsx",code:'import React, { useCallback, useEffect, useState } from "react";\nimport { Form, Row, Col, Checkbox } from "antd";\nimport CustomMultiSelect from "@/components/formItems/CustomMultiSelect";\nimport TablePanelMultiSelect from "./TablePanelMultiSelect";\nimport { requestMockData } from "utils/util";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n  const [options, setOptions] = useState<Record<string, any>[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const getOptions = async () => {\n    setLoading(true);\n    const res = await requestMockData();\n    setLoading(false);\n    if (res) {\n      setOptions(res.data);\n    } else {\n      setOptions([]);\n    }\n  };\n\n  const customOptionLabel = useCallback(\n    (\n      option: Record<string | symbol, any>,\n      selectedValue: string[] | undefined\n    ) => (\n      <div\n        style={{ display: "flex", alignItems: "center", width: 450 }}\n        key={option.code}\n      >\n        <Checkbox\n          style={{ marginRight: 4 }}\n          checked={selectedValue?.includes(option.code)}\n        />\n        <span\n          style={{\n            display: "flex",\n            flex: 1,\n            overflow: "hidden",\n            whiteSpace: "nowrap",\n            textOverflow: "ellipsis",\n          }}\n        >\n          {option.name}\n        </span>\n        <span\n          style={{\n            display: "flex",\n            flex: 1,\n            overflow: "hidden",\n            whiteSpace: "nowrap",\n            textOverflow: "ellipsis",\n          }}\n        >\n          {option.code}\n        </span>\n      </div>\n    ),\n    []\n  );\n\n  useEffect(() => {\n    getOptions();\n  }, []);\n\n  return (\n    <Form form={form} labelAlign=\'right\'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field1\'>\n            <CustomMultiSelect\n              options={options}\n              loading={loading}\n              fieldNames={{ label: "name", value: "code" }}\n              searchKeys={["name"]}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\'>\n            <CustomMultiSelect\n              options={options}\n              loading={loading}\n              fieldNames={{ label: "name", value: "code" }}\n              searchKeys={["name"]}\n              showSimplePlaceholder\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field3\'>\n            <CustomMultiSelect\n              options={options}\n              customOptionLabel={customOptionLabel}\n              loading={loading}\n              fieldNames={{ label: "name", value: "code" }}\n              searchKeys={["name"]}\n              popupMatchSelectWidth={false}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field4\'>\n            <TablePanelMultiSelect\n              options={options}\n              loading={loading}\n              showSimplePlaceholder\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat(Oe,Me),Be=()=>(0,b.jsx)(a.A,{className:Le,title:"可自定义的多选下拉框组件",codeParams:Ye,children:(0,b.jsx)(Ee,{})});var Ge=t(145),Ue=t(7444),$e=t(811),We=t(8676);class He{notification=null;keyMap=(()=>new Map)();constructor(){this.keys=[],We.A.newInstance({},(e=>this.notification=e))}add(e){let{key:n,content:t,duration:l=null,dismiss:a}=e;this.keyMap.set(n,a),this.notification.notice({key:n,content:t,duration:l})}remove(e){this.notification.removeNotice(e),this.keyMap.delete(e)}clear(){this.keyMap.forEach(((e,n)=>{e?e():this.remove(n)})),this.keyMap.clear()}}He.getInstance=function(){let e;return function(){return e=e||new He,e}}();const ze=He.getInstance();var qe=t(2877),Ze=t(7852),Je=t(2543),Qe=t.n(Je);const Xe="TreeSelect_modal__RA3WD",en="TreeSelect_modal_title__1iJkY",nn="TreeSelect_modal_body__6ZM8L",tn="TreeSelect_treebox__hUQAp",ln="TreeSelect_choosebox__1d2Gk",an="TreeSelect_box_header__npPGp",on="TreeSelect_box_content__D7zpo",sn="TreeSelect_chooseList__-PDwI",rn="TreeSelect_chooseName__EjF0Z",dn="TreeSelect_close__dDSzc",cn="TreeSelect_clear__rwXuO",un="TreeSelect_search_act__zXmnz";class mn extends l.Component{constructor(e){super(e);const{treeData:n=[]}=e;this.state={visible:!0,checkAll:!1,indeterminate:!1,autoExpandParent:!0,checkedKeys:[],checkedNodes:[],expandedKeys:[],expandedValue:n,searchValue:""},this.deepLv=1,this.treeDataMap=this._tree2map(n,[],null,1),this.treeData=n,this.leafNodes=this.treeDataMap.filter((e=>e.lv===this.deepLv)),this._onSearch=this._onSearch.bind(this),this._onChangeAll=this._onChangeAll.bind(this),this._onClearAll=this._onClearAll.bind(this),this._onCheckTree=this._onCheckTree.bind(this),this._onExpandTree=this._onExpandTree.bind(this),this._onCancel=this._onCancel.bind(this),this._onOk=this._onOk.bind(this)}componentDidMount(){this._onCheckTree(this.props.value)}isCheckAll=(e,n)=>{let t=!1,l=!1;const a=[],o=[],s=n=>{for(let t=0;t<n.length;t++){const l=n[t];if(l.children&&l.children.length>0)s(l.children);else{a.push(l.key);const n=Qe().find(e,(e=>e.key===l.key));n&&o.push(n)}}};return s(n||this.state.expandedValue),o.length>=a.length&&(t=!0),o.length>0&&o.length<a.length&&(l=!0),{checkAll:t,indeterminate:l}};getAllSubset=e=>{const n=[],t=e=>{if(e&&e.length>0)for(let l=0;l<e.length;l++){const a=e[l];if(a.children&&a.children.length>0)t(a.children);else{const e={...a,key:a.key||a.value,title:a.title||a.label};n.push(e)}}};return t(e),n};searchTree=(e,n)=>{let t=[],l=new Set;return function e(a){a.forEach((a=>{a.title.indexOf(n)>-1&&(l.has(a.key)||l.has(a.parentKey)||(t.push(a),l.add(a.key))),a.children&&e(a.children)}))}(e),t};_tree2map=(()=>{var e=this;return function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;a>e.deepLv&&(e.deepLv=a);for(let o=0;o<n.length;o++){const s=n[o],i=s.title||s.label,r=s.key||s.value;s.key=r,s.title=i,s.parentKey=l,s.lv=a,t.push({key:r,title:i,parentKey:l,lv:a}),s.children?.length&&e._tree2map(s.children,t,s.key,a+1)}return t}})();_isChinese=e=>{for(var n=!0,t=0;t<e.length;t++)n=n&&e.charCodeAt(t)>=1e4;return n};_onSearch=e=>{let n=[],t=[];const{value:l}=e.target;l||(t=this.treeData),l&&this._isChinese(l)&&(n=this.treeDataMap.map((e=>e.title.indexOf(l)>-1?e.parentKey:null)).filter(((e,n,t)=>e&&t.indexOf(e)===n)),t=this.searchTree(this.treeData,l));const{checkAll:a,indeterminate:o}=this.isCheckAll(this.state.checkedNodes,t),s=this.state.checkedNodes.map((e=>e.key));this.setState({checkAll:a,indeterminate:o,expandedKeys:n,expandedValue:t,searchValue:l,autoExpandParent:!0,checkedKeys:s})};_onChangeAll=e=>{const n=e.target.checked;let t=this.state.checkedNodes,l=[];const a=this.getAllSubset([...this.state.expandedValue]);n?(t=Qe().uniqBy(a.concat(t),"key"),l=t.map((e=>e.value))):(a.forEach((e=>{Qe().remove(t,(n=>n.key===e.key))})),l=t.map((e=>e.value))),this.setState({checkAll:n,checkedKeys:l,checkedNodes:t,indeterminate:!1})};_onClearAll=()=>{this.setState({checkAll:!1,indeterminate:!1,checkedKeys:[],checkedNodes:[],expandedKeys:[]})};_onCheckTree=(e,n)=>{if(e=[...e,...this.state.checkedKeys],e=Qe().uniq(e),n&&!n.checked){const t=n.node;t.children&&t.children.length>0&&t.children.forEach((n=>{Qe().remove(e,(e=>e===n.key))})),Qe().remove(e,(e=>e===t.key))}const t=this.leafNodes.filter((n=>e.includes(n.key))),l=t.map((e=>e.key)),{checkAll:a,indeterminate:o}=this.isCheckAll(t);this.setState({checkedKeys:l,checkedNodes:t,checkAll:a,indeterminate:o})};_onExpandTree=e=>{this.setState({expandedKeys:e,autoExpandParent:!1})};_onRemove=e=>{let{checkedKeys:n,checkedNodes:t,indeterminate:l,checkAll:a}=this.state;t.splice(e,1),n=t.map((e=>e.key)),n.length||(l=!1,a=!1),this.setState({checkAll:a,checkedKeys:n,checkedNodes:t,indeterminate:l})};_onCancel=()=>{this.setState({visible:!1}),this.props.onPress({index:0})};_onOk=()=>{const{checkedKeys:e,checkedNodes:n}=this.state;this.setState({visible:!1}),this.props.onPress({index:1,checkedKeys:e,checkedNodes:n})};orderSort(e,n){var t=e.title,l=n.title;return l>t?-1:l<t?1:0}render(){const{title:e="示例窗口",disabled:n=!1}=this.props,{visible:t,checkAll:l,indeterminate:a,autoExpandParent:o,checkedKeys:s=[],checkedNodes:i=[],expandedKeys:r=[],searchValue:c=""}=this.state,u=function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).map((e=>{const{lv:n,parentKey:t,key:l}=e,a=e.title.indexOf(c),o=e.title.substr(0,a),s=e.title.substr(a+c.length),i=a>-1?(0,b.jsxs)("span",{children:[o,(0,b.jsx)("span",{className:un,children:c}),s]}):(0,b.jsx)("span",{children:e.title});return e.children?{key:l,title:i,lv:n,parentKey:t,children:u(e.children)}:{key:l,title:i,lv:n,parentKey:t}}))};return(0,b.jsx)(Ge.A,{width:580,className:Xe,visible:t,centered:!0,maskClosable:!0,title:(0,b.jsx)("div",{className:en,children:e},"title"),cancelText:"取消",onCancel:this._onCancel,okText:"提交",onOk:this._onOk,children:(0,b.jsxs)("div",{className:nn,children:[(0,b.jsxs)("div",{className:tn,children:[(0,b.jsx)("div",{className:an,children:(0,b.jsx)(Ue.A,{placeholder:"搜索",suffix:(0,b.jsx)(qe.A,{}),allowClear:!0,onChange:this._onSearch,disabled:n})}),(0,b.jsxs)("div",{className:on,children:[(0,b.jsx)(d.A,{checked:l,indeterminate:a,onChange:this._onChangeAll,disabled:n,children:"全选"}),(0,b.jsx)($e.A,{treeData:u(this.state.expandedValue),blockNode:!0,checkable:!0,checkedKeys:s,expandedKeys:r,autoExpandParent:o,onExpand:this._onExpandTree,onCheck:this._onCheckTree,disabled:n})]})]}),(0,b.jsxs)("div",{className:ln,children:[(0,b.jsxs)("div",{className:an,children:[(0,b.jsx)("div",{children:`已选${i.length}项`}),!n&&(0,b.jsx)("div",{className:cn,onClick:this._onClearAll,children:"清空"})]}),(0,b.jsx)("div",{className:on,children:(0,b.jsx)("ul",{className:sn,children:i.sort(this.orderSort).map(((e,t)=>(0,b.jsxs)("li",{children:[(0,b.jsx)("div",{className:rn,children:e.title}),!n&&(0,b.jsx)(Ze.A,{className:dn,onClick:this._onRemove.bind(this,t)})]},e.key)))})})]})]})})}}const hn=new class{__key__="";show=e=>new Promise((n=>{""===this.__key__&&(this.__key__=String(Date.now()),ze.add({key:this.__key__,content:(0,b.jsx)(mn,{...e,onPress:e=>{ze.remove(this.__key__),this.__key__="",n(e)}}),duration:null}))}));dismiss=()=>{this.__key__.length>0&&(ze.remove(this.__key__),this.__key__="")}},pn=function(){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).map((n=>{n?.children?.length>0?pn(n.children,e):e.push(n)})),e},fn=e=>{let{defaultValue:n=[],onChange:t=e=>{},options:l=[],title:a="示例测试",width:o=200}=e;const s=pn(l,[]),i=n.length,r=s.length;return(0,b.jsx)(K.A,{style:{width:o},value:l.length?`${i===r?"全部":`${i}/${r}项`}${a}`:"请联系管理员开通权限",disabled:!l.length,options:[],open:!1,showArrow:!0,onClick:async()=>{const{index:e,checkedKeys:o}=await hn.show({title:a,value:n,treeData:l});1===e&&o.length&&t(o)}})},bn=[{id:999,label:"四川测试公司",value:"sichuan",type:null,children:[{id:1,label:"成都市",value:"chengdu",type:null,children:[{id:1,label:"示例1",value:"1",type:null,children:[{id:1,label:"示例1-1",value:"2",type:3,children:null}]}]},{id:2,label:"眉山市",value:"meishan",type:null,children:[{id:1,label:"示例2",value:"3",type:null,children:[{id:1,label:"示例2-1",value:"4",type:3,children:null}]}]},{id:3,label:"乐山市",value:"leshan",type:null,children:[{id:1,label:"示例3",value:"5",type:null,children:[{id:1,label:"示例3-1",value:"6",type:3,children:null}]}]}]},{id:1,label:"云南测试公司",value:"yunnan",type:null,children:[{id:1,label:"昆明市",value:"kunming",type:null,children:[{id:1,label:"示例1",value:"7",type:null,children:[{id:1,label:"示例1-2",value:"8",type:3,children:null}]}]},{id:2,label:"大理市",value:"dali",type:null,children:[{id:1,label:"示例2",value:"9",type:null,children:[{id:1,label:"示例2-1",value:"10",type:3,children:null}]}]}]}],gn="SelectBoxSample_container__PTinc",vn=()=>{const[e]=o.A.useForm();return(0,b.jsx)(o.A,{form:e,labelAlign:"right",className:gn,children:(0,b.jsx)(s.A,{gutter:16,children:(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field1",children:(0,b.jsx)(fn,{title:"示例测试",defaultValue:["4"],options:bn||[],onChange:()=>{}})})})})})},yn=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col } from "antd";\nimport TreeSelect from "./components/TreeSelect";\nimport { mock } from "./components/TreeSelect/mock";\nimport styles from "./index.module.scss";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign="right" className={styles.container}>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label="字段标题" name="field1">\n            <TreeSelect\n              title="示例测试"\n              defaultValue={["4"]}\n              options={mock || []}\n              onChange={() => {}}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;\n'},{fileName:"mock.ts",code:'export interface MockItem {\n  id: number;\n  label: string;\n  value: string;\n  type: number | null;\n  children: MockItem[] | null;\n}\n\nexport const mock: MockItem[] = [\n  {\n    id: 999,\n    label: "四川测试公司",\n    value: "sichuan",\n    type: null,\n    children: [\n      {\n        id: 1,\n        label: "成都市",\n        value: "chengdu",\n        type: null,\n        children: [\n          {\n            id: 1,\n            label: "示例1",\n            value: "1",\n            type: null,\n            children: [\n              {\n                id: 1,\n                label: "示例1-1",\n                value: "2",\n                type: 3,\n                children: null,\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 2,\n        label: "眉山市",\n        value: "meishan",\n        type: null,\n        children: [\n          {\n            id: 1,\n            label: "示例2",\n            value: "3",\n            type: null,\n            children: [\n              {\n                id: 1,\n                label: "示例2-1",\n                value: "4",\n                type: 3,\n                children: null,\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 3,\n        label: "乐山市",\n        value: "leshan",\n        type: null,\n        children: [\n          {\n            id: 1,\n            label: "示例3",\n            value: "5",\n            type: null,\n            children: [\n              {\n                id: 1,\n                label: "示例3-1",\n                value: "6",\n                type: 3,\n                children: null,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 1,\n    label: "云南测试公司",\n    value: "yunnan",\n    type: null,\n    children: [\n      {\n        id: 1,\n        label: "昆明市",\n        value: "kunming",\n        type: null,\n        children: [\n          {\n            id: 1,\n            label: "示例1",\n            value: "7",\n            type: null,\n            children: [\n              {\n                id: 1,\n                label: "示例1-2",\n                value: "8",\n                type: 3,\n                children: null,\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 2,\n        label: "大理市",\n        value: "dali",\n        type: null,\n        children: [\n          {\n            id: 1,\n            label: "示例2",\n            value: "9",\n            type: null,\n            children: [\n              {\n                id: 1,\n                label: "示例2-1",\n                value: "10",\n                type: 3,\n                children: null,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n];\n'}].concat([{fileName:"TreeSelect.tsx",code:'/**\n * 下拉选择框的复合组件\n */\nimport React from "react";\nimport { Select } from "antd";\nimport { MockItem } from "./mock";\nimport { default as CheckboxModal } from "./modal";\n\ninterface TreeSelectProps {\n  defaultValue?: string[];\n  options: MockItem[];\n  onChange: (checkedKeys: string[]) => void;\n  title: string;\n  width?: number;\n}\n\nconst flattenDeep = (arr: any = [], result: any = []) => {\n  arr.map((item: any) => {\n    item?.children?.length > 0\n      ? flattenDeep(item.children, result)\n      : result.push(item);\n  });\n  return result;\n};\n\nconst TreeSelect: React.FC<TreeSelectProps> = ({\n  defaultValue = [],\n  onChange = (checkedKeys: any) => {},\n  options = [],\n  title = "示例测试",\n  width = 200,\n}) => {\n  const stations = flattenDeep(options, []);\n  const len = defaultValue.length;\n  const allLen = stations.length;\n  const onClickSelect = async () => {\n    // 点击下拉\n    const { index, checkedKeys } = await CheckboxModal.show({\n      title,\n      value: defaultValue,\n      treeData: options,\n    });\n    index === 1 && !!checkedKeys.length && onChange(checkedKeys);\n  };\n\n  return (\n    <Select\n      style={{ width: width }}\n      value={\n        !options.length\n          ? "请联系管理员开通权限"\n          : `${len === allLen ? "全部" : `${len}/${allLen}项`}${title}`\n      }\n      disabled={!options.length}\n      options={[]}\n      open={false}\n      showArrow\n      onClick={onClickSelect}\n    />\n  );\n};\n\nexport default TreeSelect;\n'},{fileName:"TreeSelect.module.scss",code:'$space: 24px;\n$border_light: #d9d9d9;\n$border_dark: #868686;\n\n@mixin modalDefault() {\n  .ant-modal-header {\n    padding-top: 18px;\n    padding-bottom: 0;\n    border-bottom: 0;\n  }\n  .ant-modal-body {\n    padding: $space;\n  }\n  .ant-modal-footer {\n    padding: $space;\n    padding-top: 0;\n    border-top: 0;\n  }\n  .ant-btn + .ant-btn:not(.ant-dropdown-trigger) {\n    margin-left: 16px;\n  }\n}\n\n.modal {\n  @include modalDefault();\n\n  .modal_title {\n    display: flex;\n    align-items: center;\n    height: 30px;\n    padding-left: 37px;\n    font-weight: 500;\n    font-size: 18px;\n    line-height: 1;\n    background-image: url("../../../../../../../images/plan_icon.png");\n    background-repeat: no-repeat;\n    background-size: 30px 30px;\n  }\n\n  .modal_body {\n    display: flex;\n    width: 100%;\n    height: 328px;\n    overflow: hidden;\n    border: 1px solid $border_light;\n    border-radius: 4px;\n\n    .treebox,\n    .choosebox {\n      display: flex;\n      flex: 1;\n      flex-direction: column;\n      padding: 16px 0;\n      overflow: hidden;\n    }\n    .treebox {\n      border-right: 1px solid $border_light;\n    }\n    .box_header {\n      height: 32px;\n      margin-bottom: 8px;\n      padding: 0 16px;\n    }\n    .box_content {\n      flex: 1;\n      padding: 0 16px;\n      overflow-y: auto;\n    }\n    .choosebox {\n      .box_header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n    }\n    .chooseList {\n      margin: 0;\n      padding: 0;\n      color: #595959;\n      list-style: none;\n\n      > li {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        margin-top: 8px;\n\n        .chooseName {\n          flex: 1;\n        }\n      }\n    }\n    .close {\n      width: 16px;\n      height: 16px;\n      color: #bfbfbf;\n    }\n    .clear {\n      color: #8c8c8c;\n      cursor: pointer;\n    }\n  }\n\n  .foot {\n    width: 80px;\n    font-weight: 500;\n    font-size: 12px;\n    border-radius: 5px;\n  }\n\n  .search_act {\n    color: #18a0fb;\n  }\n}\n\nhtml[data-type-color="dark"] {\n  .modal {\n    .ant-btn-primary {\n      background: #18a0fb !important;\n    }\n\n    @include modalDefault();\n\n    .modal_title {\n      background-image: url("../../../../../../../images/plan_icon_dark.png");\n    }\n\n    .modal_body {\n      border-color: $border_dark;\n\n      .treebox {\n        border-color: $border_dark;\n      }\n\n      .chooseList {\n        color: #fff;\n      }\n      .close {\n        color: #d8d8d8;\n      }\n      .clear {\n        color: #fff;\n      }\n    }\n  }\n}\n'},{fileName:"TreeSelect.modal.jsx",code:'\n/**\n * title: 顶部名称\n * value: 选中值\n * treeData: 树形结构\n */\n\nimport React from "react";\nimport { Modal, Checkbox, Tree, Input } from "antd";\nimport TRNotification from "./noctification";\nimport { CloseOutlined, SearchOutlined } from "@ant-design/icons";\nimport _ from "lodash";\nimport styles from "./index.module.scss";\n\nclass ModalComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    const { treeData = [] } = props;\n\n    this.state = {\n      visible: true,\n      checkAll: false,\n      indeterminate: false,\n      autoExpandParent: true,\n      checkedKeys: [],\n      checkedNodes: [],\n      expandedKeys: [],\n      expandedValue: treeData,\n      searchValue: "",\n    };\n    this.deepLv = 1; // 最深叶子等级\n    this.treeDataMap = this._tree2map(treeData, [], null, 1);\n    this.treeData = treeData;\n    this.leafNodes = this.treeDataMap.filter((x) => x.lv === this.deepLv);\n\n    this._onSearch = this._onSearch.bind(this); // 搜索\n    this._onChangeAll = this._onChangeAll.bind(this); // 全选\n    this._onClearAll = this._onClearAll.bind(this); // 清空\n    this._onCheckTree = this._onCheckTree.bind(this); // 树选择\n    this._onExpandTree = this._onExpandTree.bind(this); // 树展开\n    this._onCancel = this._onCancel.bind(this); // 取消\n    this._onOk = this._onOk.bind(this); // 提交\n  }\n\n  componentDidMount() {\n    this._onCheckTree(this.props.value);\n  }\n\n  isCheckAll = (checkedNodes, expandedValue) => {\n    let checkAll = false;\n    let indeterminate = false;\n    const currentLeafArr = [];\n    const currentCheck = [];\n\n    const recursion = (treeData) => {\n      for (let i = 0; i < treeData.length; i++) {\n        const node = treeData[i];\n        if (node.children && node.children.length > 0) {\n          recursion(node.children);\n        } else {\n          currentLeafArr.push(node.key);\n          const item = _.find(checkedNodes, (n) => n.key === node.key);\n          if (item) {\n            currentCheck.push(item);\n          }\n        }\n      }\n    };\n    recursion(expandedValue ? expandedValue : this.state.expandedValue);\n\n    if (currentCheck.length >= currentLeafArr.length) {\n      checkAll = true;\n    }\n\n    if (\n      currentCheck.length > 0 &&\n      currentCheck.length < currentLeafArr.length\n    ) {\n      indeterminate = true;\n    }\n    return { checkAll, indeterminate };\n  };\n\n  getAllSubset = (arr) => {\n    const allSubset = [];\n    const recursion = (treeData) => {\n      if (treeData && treeData.length > 0) {\n        for (let i = 0; i < treeData.length; i++) {\n          const node = treeData[i];\n          if (node.children && node.children.length > 0) {\n            recursion(node.children);\n          } else {\n            // 与下面保持一致\n            const newNode = {\n              ...node,\n              key: node.key || node.value,\n              title: node.title || node.label,\n            };\n            allSubset.push(newNode);\n          }\n        }\n      }\n    };\n    recursion(arr);\n    return allSubset;\n  };\n\n  searchTree = (tree, value) => {\n    let result = [];\n    let addedKeys = new Set(); // 用于跟踪已经添加的节点key\n\n    function recursiveSearch(nodes) {\n      nodes.forEach((node) => {\n        if (node.title.indexOf(value) > -1) {\n          // 检查父节点是否已在结果集中\n          if (!addedKeys.has(node.key) && !addedKeys.has(node.parentKey)) {\n            result.push(node);\n            addedKeys.add(node.key);\n          }\n        }\n        if (node.children) {\n          recursiveSearch(node.children);\n        }\n      });\n    }\n\n    recursiveSearch(tree);\n    return result;\n  };\n\n  _tree2map = (tree = [], list = [], parentKey = null, lv = 1) => {\n    // 降维,key要唯一\n    if (lv > this.deepLv) this.deepLv = lv;\n    for (let i = 0; i < tree.length; i++) {\n      const node = tree[i];\n      // 取值处理，可以继续添加\n      const title = node.title || node.label;\n      const key = node.key || node.value;\n      node.key = key;\n      node.title = title;\n      node.parentKey = parentKey;\n      node.lv = lv;\n      list.push({\n        key,\n        title,\n        parentKey,\n        lv,\n      });\n      if (node.children?.length) {\n        this._tree2map(node.children, list, node.key, lv + 1);\n      }\n    }\n\n    return list;\n  };\n\n  _isChinese = (s) => {\n    // 中文全匹配\n    var ret = true;\n    for (var i = 0; i < s.length; i++) ret = ret && s.charCodeAt(i) >= 10000;\n    return ret;\n  };\n\n  _onSearch = (e) => {\n    let expandedKeys = [];\n    let expandedValue = [];\n    const { value } = e.target;\n    if (!value) {\n      expandedValue = this.treeData;\n    }\n    if (value && this._isChinese(value)) {\n      expandedKeys = this.treeDataMap\n        .map((x) => (x.title.indexOf(value) > -1 ? x.parentKey : null))\n        .filter((item, i, self) => item && self.indexOf(item) === i);\n\n      expandedValue = this.searchTree(this.treeData, value);\n    }\n    const { checkAll, indeterminate } = this.isCheckAll(\n      this.state.checkedNodes,\n      expandedValue\n    );\n    const checkedKeys = this.state.checkedNodes.map((x) => x.key);\n\n    this.setState({\n      checkAll,\n      indeterminate,\n      expandedKeys,\n      expandedValue,\n      searchValue: value,\n      autoExpandParent: true,\n      checkedKeys,\n    });\n  };\n\n  _onChangeAll = (e) => {\n    const checkAll = e.target.checked;\n    let checkedNodes = this.state.checkedNodes;\n    let checkedKeys = [];\n    const allSubset = this.getAllSubset([...this.state.expandedValue]);\n    let indeterminate = false;\n    if (checkAll) {\n      checkedNodes = _.uniqBy(allSubset.concat(checkedNodes), "key");\n      checkedKeys = checkedNodes.map((x) => x.value);\n    } else {\n      allSubset.forEach((v) => {\n        _.remove(checkedNodes, (n) => n.key === v.key);\n      });\n      checkedKeys = checkedNodes.map((x) => x.value);\n    }\n\n    this.setState({\n      checkAll,\n      checkedKeys,\n      checkedNodes,\n      indeterminate,\n    });\n  };\n\n  _onClearAll = () => {\n    this.setState({\n      checkAll: false,\n      indeterminate: false,\n      checkedKeys: [],\n      checkedNodes: [],\n      expandedKeys: [],\n    });\n  };\n\n  _onCheckTree = (val, e) => {\n    val = [...val, ...this.state.checkedKeys];\n    val = _.uniq(val);\n    if (e && !e.checked) {\n      const currentClick = e.node;\n      if (currentClick.children && currentClick.children.length > 0) {\n        currentClick.children.forEach((chil) => {\n          _.remove(val, (v) => v === chil.key);\n        });\n      }\n      _.remove(val, (v) => v === currentClick.key);\n    }\n\n    const checkedNodes = this.leafNodes.filter((x) => val.includes(x.key)),\n      checkedKeys = checkedNodes.map((x) => x.key);\n    const { checkAll, indeterminate } = this.isCheckAll(checkedNodes);\n\n    this.setState({\n      checkedKeys,\n      checkedNodes,\n      checkAll,\n      indeterminate,\n    });\n  };\n\n  _onExpandTree = (expandedKeys) => {\n    this.setState({\n      expandedKeys,\n      autoExpandParent: false,\n    });\n  };\n\n  _onRemove = (idx) => {\n    let { checkedKeys, checkedNodes, indeterminate, checkAll } = this.state;\n    checkedNodes.splice(idx, 1);\n    checkedKeys = checkedNodes.map((x) => x.key);\n    if (!checkedKeys.length) {\n      indeterminate = false;\n      checkAll = false;\n    }\n    this.setState({\n      checkAll,\n      checkedKeys,\n      checkedNodes,\n      indeterminate,\n    });\n  };\n\n  _onCancel = () => {\n    this.setState({\n      visible: false,\n    });\n    this.props.onPress({ index: 0 });\n  };\n\n  _onOk = () => {\n    const { checkedKeys, checkedNodes } = this.state;\n    this.setState({\n      visible: false,\n    });\n    this.props.onPress({\n      index: 1,\n      checkedKeys,\n      checkedNodes,\n    });\n  };\n  orderSort(obj1, obj2) {\n    var a = obj1.title;\n    var b = obj2.title;\n    if (b > a) {\n      return -1;\n    } else if (b < a) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n  render() {\n    const { title = "示例窗口", disabled = false } = this.props;\n    const {\n      visible,\n      checkAll,\n      indeterminate,\n      autoExpandParent,\n      checkedKeys = [],\n      checkedNodes = [],\n      expandedKeys = [],\n      searchValue = "",\n    } = this.state;\n\n    const loop = (data = []) =>\n      data.map((item) => {\n        const { lv, parentKey, key } = item;\n        const index = item.title.indexOf(searchValue);\n        const beforeStr = item.title.substr(0, index);\n        const afterStr = item.title.substr(index + searchValue.length);\n        const _title =\n          index > -1 ? (\n            <span>\n              {beforeStr}\n              <span className={styles.search_act}>{searchValue}</span>\n              {afterStr}\n            </span>\n          ) : (\n            <span>{item.title}</span>\n          );\n        if (item.children) {\n          return {\n            key,\n            title: _title,\n            lv,\n            parentKey,\n            children: loop(item.children),\n          };\n        }\n\n        return { key, title: _title, lv, parentKey };\n      });\n    return (\n      <Modal\n        width={580}\n        className={styles.modal}\n        visible={visible}\n        centered={true}\n        maskClosable={true}\n        title={\n          <div key=\'title\' className={styles.modal_title}>\n            {title}\n          </div>\n        }\n        cancelText={"取消"}\n        onCancel={this._onCancel}\n        okText={"提交"}\n        onOk={this._onOk}\n      >\n        <div className={styles.modal_body}>\n          <div className={styles.treebox}>\n            <div className={styles.box_header}>\n              <Input\n                placeholder=\'搜索\'\n                suffix={<SearchOutlined />}\n                allowClear={true}\n                onChange={this._onSearch}\n                disabled={disabled}\n              />\n            </div>\n            <div className={styles.box_content}>\n              <Checkbox\n                checked={checkAll}\n                indeterminate={indeterminate}\n                onChange={this._onChangeAll}\n                disabled={disabled}\n              >\n                全选\n              </Checkbox>\n              <Tree\n                treeData={loop(this.state.expandedValue)}\n                blockNode={true}\n                checkable={true}\n                checkedKeys={checkedKeys}\n                expandedKeys={expandedKeys}\n                autoExpandParent={autoExpandParent}\n                onExpand={this._onExpandTree}\n                onCheck={this._onCheckTree}\n                disabled={disabled}\n              />\n            </div>\n          </div>\n\n          <div className={styles.choosebox}>\n            <div className={styles.box_header}>\n              <div>{`已选${checkedNodes.length}项`}</div>\n              {!disabled && (\n                <div className={styles.clear} onClick={this._onClearAll}>\n                  清空\n                </div>\n              )}\n            </div>\n            <div className={styles.box_content}>\n              <ul className={styles.chooseList}>\n                {checkedNodes.sort(this.orderSort).map((item, idx) => {\n                  return (\n                    <li key={item.key}>\n                      <div className={styles.chooseName}>{item.title}</div>\n                      {!disabled && (\n                        <CloseOutlined\n                          className={styles.close}\n                          onClick={this._onRemove.bind(this, idx)}\n                        />\n                      )}\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nclass TRCheckboxModal {\n  __key__ = "";\n\n  show = (props) => {\n    return new Promise((resolve) => {\n      if (this.__key__ !== "") return;\n      this.__key__ = String(Date.now());\n      TRNotification.add({\n        key: this.__key__,\n        content: (\n          <ModalComponent\n            {...props}\n            onPress={(result) => {\n              TRNotification.remove(this.__key__);\n              this.__key__ = "";\n              resolve(result);\n            }}\n          />\n        ),\n        duration: null,\n      });\n    });\n  };\n\n  dismiss = () => {\n    if (this.__key__.length > 0) {\n      TRNotification.remove(this.__key__);\n      this.__key__ = "";\n    }\n  };\n}\n\nexport default new TRCheckboxModal();\n'},{fileName:"TreeSelect.notification.tsx",code:'\n/* （版本---"rc-notification": "4.4.0"） */\n\n// @ts-nocheck\nimport Notification from "rc-notification";\n\nclass TRNotificationSinge {\n  notification = null;\n  keyMap = new Map();\n  constructor() {\n    this.keys = [];\n    Notification.newInstance({}, (n) => (this.notification = n));\n  }\n\n  /**\n   * 添加方法\n   * @param key  唯一值\n   * @param content\n   * @param duration\n   * @param {function} dismiss 销毁方法\n   */\n  add({ key, content, duration = null, dismiss }) {\n    this.keyMap.set(key, dismiss);\n    this.notification.notice({\n      key,\n      content,\n      duration,\n    });\n  }\n  remove(key) {\n    this.notification.removeNotice(key);\n    this.keyMap.delete(key);\n  }\n\n  clear() {\n    this.keyMap.forEach((fuc, key) => {\n      fuc ? fuc() : this.remove(key);\n    });\n    this.keyMap.clear();\n  }\n}\n\nTRNotificationSinge.getInstance = (function () {\n  let instance;\n  return function () {\n    instance = instance ? instance : new TRNotificationSinge();\n    return instance;\n  };\n})();\n\nconst TRNotification = TRNotificationSinge.getInstance();\n\nexport default TRNotification;\n'}]),xn=()=>(0,b.jsx)(a.A,{title:"下拉选择框的复合组件",codeParams:yn,children:(0,b.jsx)(vn,{})});var kn=t(5202),Cn=t(9270);const Sn=/^([\w+-.%]+@[\w-.]+\.[A-Za-z]{2,4})(;[\w+-.]+@[\w-.]+\.[A-Za-z]{2,4})*$/,An=[{required:!0,message:"必填项"}],wn=[{required:!0,message:"请选择"}],_n=[{validator:(e,n)=>n&&n.length>0&&(n[0]||0===n[0]||n[1])?(n[0]||0===n[0])&&n[1]?Promise.resolve():Promise.reject("两个都必填"):Promise.reject("必填项")}],Rn=[{validator:(e,n)=>{if(!(n&&n.length>0))return Promise.reject("邮箱必填");{let e=!1;for(let t=0,l=n.length;t<l;t++){const l=n[t];if(!(l&&l[0]&&l[0].trim()))return Promise.reject("邮箱必填");Sn.test(l[0].trim())||(e=!0)}if(e)return Promise.reject("邮箱格式不正确")}return Promise.resolve()}}],Nn=()=>{const[e]=o.A.useForm();return(0,b.jsx)(o.A,{form:e,labelAlign:"right",children:(0,b.jsxs)(s.A,{gutter:16,children:[(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field1",rules:An,children:(0,b.jsx)(Cn.A,{form:e,children:(0,b.jsx)(Ue.A,{})})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field2",rules:wn,children:(0,b.jsx)(Cn.A,{form:e,children:(0,b.jsx)(K.A,{options:[{label:"A",value:"a"},{label:"B",value:"b"}]})})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field3",rules:_n,required:!0,validateStatus:"",children:(0,b.jsx)(Cn.A,{form:e,children:(0,b.jsx)(U.A,{options:[{name:"工作日",id:"workingDay"},{name:"自然日",id:"naturalDay"}],inputNumberProps:{addonAfter:"个"},selectProps:{fieldNames:{label:"name",value:"id"},allowClear:!0},setInputNumberStatus:e=>!e||!e[0]&&0!==e[0]?"error":"",setSelectStatus:e=>e&&e[1]?"":"error"})})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"字段标题",name:"field4",rules:An,children:(0,b.jsx)(Cn.A,{form:e,children:(0,b.jsx)(E.A,{checkboxLabel:"复选框标题"})})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"邮箱",name:"field5",rules:Rn,required:!0,validateStatus:"",children:(0,b.jsx)(Cn.A,{form:e,children:(0,b.jsx)(be,{maxRows:5,children:(0,b.jsx)(E.A,{checkboxLabel:"是否同步到平台",setInputStatus:e=>e&&e[0]&&e[0].trim()&&Sn.test(e[0].trim())?"":"error"})})})})}),(0,b.jsx)(i.A,{span:24,style:{display:"flex",justifyContent:"flex-end",paddingRight:"30px"},children:(0,b.jsx)(kn.Ay,{type:"primary",onClick:async()=>{try{const n=await(e?.validateFields());console.log("values:",n)}catch(e){}},children:"提交"})})]})})},Pn="WithValidateMessageSample_container__z3ia8",jn=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col, Input, Select, Button } from "antd";\nimport WithValidateMessage from "@/components/formItems/WithValidateMessage";\nimport CanAddMultiple from "@/components/formItems/CanAddMultiple";\nimport InputAndCheckbox from "@/components/formItems/InputAndCheckbox";\nimport type { Value as InputAndCheckboxValue } from "@/components/formItems/InputAndCheckbox";\nimport InputNumberAndSelect from "@/components/formItems/InputNumberAndSelect";\nimport type { Value as InputNumberAndSelectValue } from "@/components/formItems/InputNumberAndSelect";\n\nconst EMAIL_PATTERN =\n  /^([w+-.%]+@[w-.]+.[A-Za-z]{2,4})(;[w+-.]+@[w-.]+.[A-Za-z]{2,4})*$/;\n\nconst REQUIRED_FORM_ITEM_RULES = [{ required: true, message: "必填项" }];\nconst CUSTOM_SELECT_RULES = [{ required: true, message: "请选择" }];\nconst INPUTNUMBER_SELECT_RULES = [\n  {\n    validator: (_: Record<string, any>, value: InputNumberAndSelectValue) => {\n      if (value && value.length > 0) {\n        if (!value[0] && value[0] !== 0 && !value[1]) {\n          return Promise.reject("必填项");\n        } else {\n          if (!value[0] && value[0] !== 0) {\n            return Promise.reject("两个都必填");\n          }\n          if (!value[1]) {\n            return Promise.reject("两个都必填");\n          }\n        }\n      } else {\n        return Promise.reject("必填项");\n      }\n      return Promise.resolve();\n    },\n  },\n];\nconst MULTIPLE_EMAIL_RULES = [\n  {\n    validator: (\n      _: Record<string, any>,\n      value: ([string | undefined, boolean | undefined] | undefined)[]\n    ) => {\n      if (value && value.length > 0) {\n        let hasBadValue = false;\n        for (let i = 0, l = value.length; i < l; i++) {\n          const item = value[i];\n          if (!item || !item[0] || !item[0].trim()) {\n            return Promise.reject("邮箱必填");\n          } else if (!EMAIL_PATTERN.test(item[0].trim())) {\n            hasBadValue = true;\n          }\n        }\n        if (hasBadValue) {\n          return Promise.reject("邮箱格式不正确");\n        }\n      } else {\n        return Promise.reject("邮箱必填");\n      }\n      return Promise.resolve();\n    },\n  },\n];\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  // 点击提交\n  const onSubmit = async () => {\n    try {\n      const values = await form?.validateFields();\n      console.log("values:", values);\n    } catch (err) {}\n  };\n\n  return (\n    <Form form={form} labelAlign=\'right\'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item\n            label=\'字段标题\'\n            name=\'field1\'\n            rules={REQUIRED_FORM_ITEM_RULES}\n          >\n            <WithValidateMessage form={form}>\n              <Input />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\' rules={CUSTOM_SELECT_RULES}>\n            <WithValidateMessage form={form}>\n              <Select\n                options={[\n                  { label: "A", value: "a" },\n                  { label: "B", value: "b" },\n                ]}\n              />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\'字段标题\'\n            name=\'field3\'\n            rules={INPUTNUMBER_SELECT_RULES}\n            required\n            validateStatus=\'\'\n          >\n            <WithValidateMessage form={form}>\n              <InputNumberAndSelect\n                options={[\n                  { name: "工作日", id: "workingDay" },\n                  { name: "自然日", id: "naturalDay" },\n                ]}\n                inputNumberProps={{ addonAfter: "个" }}\n                selectProps={{\n                  fieldNames: { label: "name", value: "id" },\n                  allowClear: true,\n                }}\n                setInputNumberStatus={(\n                  value: InputNumberAndSelectValue | undefined\n                ) => {\n                  if (!value || (!value[0] && value[0] !== 0)) {\n                    return "error";\n                  }\n                  return "";\n                }}\n                setSelectStatus={(\n                  value: InputNumberAndSelectValue | undefined\n                ) => {\n                  if (!value || !value[1]) {\n                    return "error";\n                  }\n                  return "";\n                }}\n              />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\'字段标题\'\n            name=\'field4\'\n            rules={REQUIRED_FORM_ITEM_RULES}\n          >\n            <WithValidateMessage form={form}>\n              <InputAndCheckbox checkboxLabel=\'复选框标题\' />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\'邮箱\'\n            name=\'field5\'\n            rules={MULTIPLE_EMAIL_RULES}\n            required\n            validateStatus=\'\'\n          >\n            <WithValidateMessage form={form}>\n              <CanAddMultiple maxRows={5}>\n                <InputAndCheckbox\n                  checkboxLabel=\'是否同步到平台\'\n                  setInputStatus={(\n                    value: InputAndCheckboxValue | undefined\n                  ) => {\n                    if (\n                      !value ||\n                      !value[0] ||\n                      !value[0].trim() ||\n                      !EMAIL_PATTERN.test(value[0].trim())\n                    ) {\n                      return "error";\n                    }\n                    return "";\n                  }}\n                />\n              </CanAddMultiple>\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col\n          span={24}\n          style={{\n            display: "flex",\n            justifyContent: "flex-end",\n            paddingRight: "30px",\n          }}\n        >\n          <Button type=\'primary\' onClick={onSubmit}>\n            提交\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat(Cn.w),Dn=()=>(0,b.jsx)(a.A,{className:Pn,title:"用于显示自定义校验信息的FormItem组件的包装组件",codeParams:jn,children:(0,b.jsx)(Nn,{})});var Mn=t(7965);const In="MoneyInput_moneyInput__UKjfo",Vn=/^[-]?(\d+(\.)?(\d+)?)?$/,Fn=e=>{const{value:n,precision:t,min:l,max:a,onChange:o,onBlur:s,className:i="",...r}=e;return(0,b.jsx)(Ue.A,{...r,className:u()({[In]:!0,[i]:!!i}),value:n,onChange:e=>{const a=e.target?.value;if("string"==typeof a)if(a)if(Vn.test(a)){if(a.endsWith(".")){if("number"==typeof t&&t<=0)return}else{const e=a.split(".")[1];if(a.startsWith("-")){if((l||0===l)&&new Mn.A(l).gte(0)){if("-"===a)void 0===n&&o?.("");else if(e&&"number"==typeof t&&t>=0&&e.length>t){const e=new Mn.A(a).absoluteValue().toFixed(t,Mn.A.ROUND_DOWN);o?.(e)}else o?.(new Mn.A(a).absoluteValue().toString());return}}else if(e&&"number"==typeof t&&t>=0&&e.length>t){const e=new Mn.A(a).toFixed(t,Mn.A.ROUND_DOWN);return void o?.(e)}}o?.(a)}else void 0===n&&o?.("");else o?.("");else o?.(void 0)},onBlur:()=>{if(n){if("-"===n||!Vn.test(n))return o?.(""),void s?.("");let e=n;n.endsWith(".")&&(e=n.substring(0,n.length-1));const i=new Mn.A(e);if(l||0===l){const n=new Mn.A(l);i.lt(n)&&(e=n.toString())}if(a||0===a){const n=new Mn.A(a);i.gt(n)&&(e=n.toString())}const r=e.split(".")[1];r&&"number"==typeof t&&t>=0&&r.length>t&&(e=new Mn.A(e).toFixed(t,Mn.A.ROUND_DOWN)),(l||0===l)&&new Mn.A(l).gte(0)&&(e=new Mn.A(e).absoluteValue().toString()),n!==e&&o?.(e),s?.(e)}}})},Tn=()=>{const[e]=o.A.useForm();return(0,b.jsx)(o.A,{form:e,layout:"vertical",children:(0,b.jsxs)(s.A,{gutter:16,children:[(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"无限制输入",name:"field1",children:(0,b.jsx)(Fn,{placeholder:"请输入"})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"precision为2，min为0， max为999.99",name:"field2",children:(0,b.jsx)(Fn,{precision:2,min:0,max:999.99})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"precision为0，min为-10000， max为100000",name:"field3",children:(0,b.jsx)(Fn,{precision:0,min:-1e4,max:1e4})})}),(0,b.jsx)(i.A,{span:12,children:(0,b.jsx)(o.A.Item,{label:"precision为8，min为0， max为999999999999.99999999",name:"field4",children:(0,b.jsx)(Fn,{precision:8,min:0,max:"999999999999.99999999"})})}),(0,b.jsx)(i.A,{span:24,style:{display:"flex",justifyContent:"flex-end",paddingRight:"30px"},children:(0,b.jsx)(kn.Ay,{type:"primary",onClick:async()=>{try{const n=await(e?.validateFields());console.log("values:",n)}catch(e){}},children:"提交"})})]})})},On=[{fileName:"index.tsx",code:"import React from \"react\";\nimport { Form, Row, Col, Button } from \"antd\";\nimport MoneyInput from \"@/components/formItems/MoneyInput\";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  const onSubmit = async () => {\n    try {\n      const values = await form?.validateFields();\n      console.log(\"values:\", values);\n    } catch (err) {}\n  };\n\n  return (\n    <Form form={form} layout='vertical'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label='无限制输入' name='field1'>\n            <MoneyInput placeholder='请输入' />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label='precision为2，min为0， max为999.99' name='field2'>\n            <MoneyInput precision={2} min={0} max={999.99} />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label='precision为0，min为-10000， max为100000'\n            name='field3'\n          >\n            <MoneyInput precision={0} min={-10000} max={10000} />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label='precision为8，min为0， max为999999999999.99999999'\n            name='field4'\n          >\n            <MoneyInput precision={8} min={0} max={\"999999999999.99999999\"} />\n          </Form.Item>\n        </Col>\n        <Col\n          span={24}\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            paddingRight: \"30px\",\n          }}\n        >\n          <Button type='primary' onClick={onSubmit}>\n            提交\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;"}].concat([{fileName:"MoneyInput.tsx",code:'/**\n * 金额输入框组件，入参和出参都为字符串类型（支持输入例如9999999999999.999、999999999999.99999等数值）\n */\nimport React from "react";\nimport { Input } from "antd";\nimport type { InputProps } from "antd/lib";\nimport BigNumber from "bignumber.js";\nimport classnams from "classnames";\nimport styles from "./index.module.scss";\n\nconst NUMBER_REG = /^[-]?(d+(.)?(d+)?)?$/;\n\ntype MoneyInputProps = {\n  value?: string | undefined;\n  precision?: number; // 可输入的数值精度\n  min?: number | string; // 可输入的数值最小值\n  max?: number | string; // 可输入的数值最大值\n  onChange?: (value: string | undefined) => void;\n  onBlur?: (newValue: string | undefined) => void;\n  className?: string;\n} & InputProps;\n\nconst MoneyInput = (props: MoneyInputProps) => {\n  const {\n    value,\n    precision,\n    min,\n    max,\n    onChange,\n    onBlur,\n    className = "",\n    ...restProps\n  } = props;\n\n  const onInputChange = (e: any) => {\n    const v = e.target?.value;\n    if (typeof v === "string") {\n      if (v) {\n        if (NUMBER_REG.test(v)) {\n          if (v.endsWith(".")) {\n            if (typeof precision === "number" && precision <= 0) {\n              // precision为0时，不能输入小数点\n              return;\n            }\n          } else {\n            const valueArr = v.split(".");\n            const fractionalValue = valueArr[1]; // 小数部分的数字\n            if (v.startsWith("-")) {\n              if ((min || min === 0) && new BigNumber(min).gte(0)) {\n                // min>=0时，不能输入负号\n                if (v === "-") {\n                  if (value === undefined) {\n                    onChange?.("");\n                  }\n                } else {\n                  if (\n                    fractionalValue &&\n                    typeof precision === "number" &&\n                    precision >= 0 &&\n                    fractionalValue.length > precision\n                  ) {\n                    // 将小数部分多出的precision限制的部分直接去掉\n                    const newValueStr = new BigNumber(v)\n                      .absoluteValue()\n                      .toFixed(precision, BigNumber.ROUND_DOWN);\n                    onChange?.(newValueStr);\n                  } else {\n                    onChange?.(new BigNumber(v).absoluteValue().toString());\n                  }\n                }\n                return;\n              }\n            } else {\n              if (\n                fractionalValue &&\n                typeof precision === "number" &&\n                precision >= 0 &&\n                fractionalValue.length > precision\n              ) {\n                // 将小数部分多出的precision限制的部分直接去掉\n                const newValueStr = new BigNumber(v).toFixed(\n                  precision,\n                  BigNumber.ROUND_DOWN\n                );\n                onChange?.(newValueStr);\n                return;\n              }\n            }\n          }\n          onChange?.(v);\n        } else {\n          if (value === undefined) {\n            onChange?.("");\n          }\n        }\n      } else {\n        onChange?.("");\n      }\n    } else {\n      onChange?.(undefined);\n    }\n  };\n\n  const onInputBlur = () => {\n    if (value) {\n      if (value === "-" || !NUMBER_REG.test(value)) {\n        onChange?.("");\n        onBlur?.("");\n        return;\n      }\n\n      let newValueStr: string = value;\n\n      if (value.endsWith(".")) {\n        // 去掉最后的小数点\n        newValueStr = value.substring(0, value.length - 1);\n      }\n\n      const newValue = new BigNumber(newValueStr);\n      if (min || min === 0) {\n        const minValue = new BigNumber(min);\n        if (newValue.lt(minValue)) {\n          newValueStr = minValue.toString();\n        }\n      }\n\n      if (max || max === 0) {\n        const maxValue = new BigNumber(max);\n        if (newValue.gt(maxValue)) {\n          newValueStr = maxValue.toString();\n        }\n      }\n\n      const valueArr = newValueStr.split(".");\n      const fractionalValue = valueArr[1]; // 小数部分的数字\n      if (\n        fractionalValue &&\n        typeof precision === "number" &&\n        precision >= 0 &&\n        fractionalValue.length > precision\n      ) {\n        // 将小数部分多出的precision限制的部分直接去掉\n        newValueStr = new BigNumber(newValueStr).toFixed(\n          precision,\n          BigNumber.ROUND_DOWN\n        );\n      }\n\n      if ((min || min === 0) && new BigNumber(min).gte(0)) {\n        // 如果min>=0，则去掉负号\n        newValueStr = new BigNumber(newValueStr).absoluteValue().toString();\n      }\n\n      if (value !== newValueStr) {\n        onChange?.(newValueStr);\n      }\n      onBlur?.(newValueStr);\n    }\n  };\n\n  return (\n    <Input\n      {...restProps}\n      className={classnams({\n        [styles.moneyInput]: true,\n        [className]: !!className,\n      })}\n      value={value}\n      onChange={onInputChange}\n      onBlur={onInputBlur}\n    />\n  );\n};\n\nexport default MoneyInput;'}]),Kn=()=>(0,b.jsx)(a.A,{title:"金额输入框组件，入参和出参都为字符串类型（支持输入例如9999999999999.999、999999999999.99999等数值）",codeParams:On,children:(0,b.jsx)(Tn,{})}),En="FormItemSection_container__aQMvM",Ln="FormItemSection_sample__7pqvq",Yn=[(0,b.jsx)(k,{}),(0,b.jsx)(_,{}),(0,b.jsx)(O,{}),(0,b.jsx)(G,{}),(0,b.jsx)(z,{}),(0,b.jsx)(ie,{}),(0,b.jsx)(xe,{}),(0,b.jsx)(Be,{}),(0,b.jsx)(xn,{}),(0,b.jsx)(Dn,{}),(0,b.jsx)(Kn,{})],Bn=()=>(0,b.jsx)("div",{className:En,children:Yn.map(((e,n)=>(0,b.jsx)("div",{className:Ln,children:e},n)))})}}]);