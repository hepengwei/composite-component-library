(()=>{"use strict";var e,n,t,a={2836:(e,n,t)=>{var a=t(6540),l=t(5338),r=t(4976),s=t(4848);const o=a.createContext({headHeight:0,setHeadHeight:()=>{},menuWidth:0,setMenuWidth:()=>{},scrollTop:0,setScrollTop:()=>{},scrollContentRef:a.createRef(),setScrollContentRef:()=>{}});let i=a.createRef();const d=e=>{const[n,t]=(0,a.useState)(0),[l,r]=(0,a.useState)(0),[d,c]=(0,a.useState)(0),u=(0,a.useCallback)((function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;c(e),i.current&&i.current.scrollTop!==e&&(i.current.scrollTop=e)}),[]);return(0,s.jsx)(o.Provider,{value:{headHeight:n,menuWidth:l,scrollTop:d,setHeadHeight:t,setMenuWidth:r,setScrollTop:u,scrollContentRef:i,setScrollContentRef:e=>{e&&(i=e)}},children:e.children})},c=()=>(0,a.useContext)(o);var u=t(7767),m=t(1587),h=t(4568),p=t(4353),b=t.n(p),f=t(7197),x=t(1878),v=t(145),g=t(227),y=t(9552);const k=t.p+"images/235f02ed.jpeg",C="Header_container__lcnp0",_="Header_title__XumRj",A="Header_right__Tm89M",P="Header_btn__n+9vE",j="Header_rewardModal__JCltU",S="Header_closeBtn__Le6iI",w=()=>{const{setHeadHeight:e}=c(),n=(0,a.useRef)(null),[t,l]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{if(n.current){const{height:t}=n.current.getBoundingClientRect();e(t)}}),[]),(0,s.jsxs)("div",{className:C,ref:n,children:[(0,s.jsx)("div",{className:_,children:"复合组件示例库"}),(0,s.jsx)(f.A,{message:"本示例库并非组件库，封装的组件并没有考虑在所有场景下的适配",type:"warning",showIcon:!0,closable:!0}),(0,s.jsx)("div",{className:A,children:(0,s.jsx)(x.A,{placement:"bottomRight",title:"打赏",children:(0,s.jsx)("div",{className:P,onClick:()=>{l(!0)},children:(0,s.jsx)(g.A,{})})})}),(0,s.jsxs)(v.A,{wrapClassName:j,title:"打赏",open:t,footer:null,maskClosable:!1,width:320,children:[(0,s.jsx)("div",{className:S,onClick:()=>{l(!1)},children:(0,s.jsx)(y.A,{})}),(0,s.jsx)("img",{src:k,alt:""}),(0,s.jsx)("p",{children:"如果觉得网站不错，内容对你有所帮助，再打赏也不迟"})]})]})};var N=t(961),R=t(9277),D=t(3341),I=t(6157),F=t(1201),T=t(8467),M=t(5202),V=t(5226);const E="Menus_container__TGD0s",L="Menus_topBox__M+bkd",O="Menus_top__evyIx",$="Menus_menuLabel__VW605",K="Menus_bottom__9th6m";function B(e,n,t,a,l){return{key:n,icon:t,children:a,label:(0,s.jsx)("p",{className:$,children:e}),type:l}}const Y=()=>{const e=(0,u.Zp)(),n=(0,u.zy)(),[t,l]=(0,a.useState)(!1),{setMenuWidth:r}=c(),o=(0,a.useRef)(null),i=[B("表单","form",(0,s.jsx)(R.A,{}),[B("FormItem 部分","formItemSection"),B("FormList 部分","formListSection")]),B("表格","table",(0,s.jsx)(D.A,{}))],d=(0,a.useCallback)((0,T.A)((()=>{const e=N.findDOMNode(o.current);e&&r(e.clientWidth)}),{wait:360}).run,[]),m=(0,a.useMemo)((()=>{const{pathname:e}=n,t=[];if(e){const n=e.split("/"),a=n[n.length-1];a&&t.push(a)}return t}),[n]),h=(0,a.useMemo)((()=>{const{pathname:e}=n;if(e){const n=e.split("/");if(n.length>=2&&n[1])return[n[1]]}return["form"]}),[n]);return(0,a.useEffect)((()=>{d()}),[t]),(0,a.useEffect)((()=>(window.addEventListener("resize",d),()=>{window.removeEventListener("resize",d)})),[]),(0,s.jsxs)("div",{className:E,ref:o,children:[(0,s.jsxs)("div",{className:L,children:[(0,s.jsx)("div",{className:O,children:(0,s.jsx)(M.Ay,{type:"primary",onClick:()=>{l(!t)},style:{marginBottom:16},children:t?(0,s.jsx)(I.A,{}):(0,s.jsx)(F.A,{})})}),(0,s.jsx)(V.A,{defaultOpenKeys:h,selectedKeys:m,mode:"inline",inlineCollapsed:t,items:i,onClick:n=>{const{keyPath:t}=n,a=t.reduce(((e,n)=>e=`/${n}${e}`),"");e(a)}})]}),(0,s.jsx)("div",{className:K,children:!t&&(0,s.jsx)("span",{children:"持续更新, 敬请期待"})})]})},H="Home_container__BIX4n",q="Home_container_body__xDwsE",W="Home_container_content__kzcpF",U=()=>{const{setScrollTop:e,setScrollContentRef:n}=c(),t=(0,u.Ye)(ja),l=(0,u.zy)(),r=(0,u.Zp)(),o=(0,a.useRef)(null);return(0,a.useEffect)((()=>{const{pathname:e}=l;e&&"/"!==e||r("/form/formItemSection")}),[l]),(0,a.useEffect)((()=>{n(o)}),[]),(0,s.jsxs)("div",{className:H,children:[(0,s.jsx)(w,{}),(0,s.jsxs)("div",{className:q,children:[(0,s.jsx)(Y,{}),(0,s.jsx)("div",{className:W,onScroll:()=>{e(o.current?.scrollTop)},ref:o,children:t})]})]})};var z=t(1935),G=t(2395),Z=t(7046),Q=t(6008),J=t(3853),X=t(7450);const ee="CodeBlock_codeBlock__bzneC",ne="CodeBlock_line__pJCvl",te=e=>{const{code:n,language:t="tsx",theme:a=X.Zj.oneLight}=e;return(0,s.jsx)(X.f4,{theme:a,code:n,language:t,children:e=>{let{style:n,tokens:t,getLineProps:a,getTokenProps:l}=e;return(0,s.jsx)("pre",{className:ee,style:n,children:t.map(((e,n)=>(0,s.jsx)("div",{...a({line:e}),className:ne,children:e.map(((e,n)=>(0,s.jsx)("span",{...l({token:e})},n)))},n)))})}})},ae=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:6;return`${Math.random()}`.slice(2,e+2)},le="SampleBox_container__oAXz4",re="SampleBox_title__en5k9",se="SampleBox_content__r3wUD",oe="SampleBox_actions__H751f",ie="SampleBox_codeBlockBox__b1OZI",de="SampleBox_codeBlockContent__ZJS8D",ce="SampleBox_copyBtn__8qcBp",ue="SampleBox_footer__Tpigq",me=e=>{const{title:n,children:t,className:l,codeParams:r}=e,[o,i]=(0,a.useState)(!1),d=(0,a.useMemo)((()=>Array.isArray(r)?r.map(((e,n)=>({key:n.toString(),label:e.fileName,children:(0,s.jsxs)("div",{className:de,children:[(0,s.jsx)(te,{code:e.code}),(0,s.jsx)("div",{className:ce,onClick:()=>{(e=>{if(e)if(navigator.clipboard)navigator.clipboard.writeText(e);else{const n=document.createElement("input");n.setAttribute("value",e),document.body.appendChild(n),n.select(),document.execCommand("copy"),document.body.removeChild(n)}})(e.code),z.Ay.success("复制成功")},children:(0,s.jsx)(x.A,{title:"复制",children:(0,s.jsx)(Z.A,{})})})]})}))):[]),[r]);return(0,s.jsxs)("div",{className:`${le}${l?` ${l}`:""}`,children:[n&&(0,s.jsx)("div",{className:re,children:n}),(0,s.jsx)("div",{className:se,children:t}),r&&(0,s.jsx)("div",{className:oe,children:(0,s.jsx)(x.A,{title:o?"收起代码":"显示代码",children:(0,s.jsx)(Q.A,{onClick:()=>i(!o)})})}),o&&(0,s.jsxs)("div",{className:ie,children:[Array.isArray(r)?(0,s.jsx)(G.A,{centered:!0,items:d}):(0,s.jsx)(te,{code:r.code}),(0,s.jsxs)("div",{className:ue,onClick:()=>i(!1),children:[(0,s.jsx)(J.A,{}),"收起"]})]})]})};var he=t(3888),pe=t(1196),be=t(8119);const fe=e=>{const n=(0,a.useContext)(be.A);return(0,a.useMemo)((()=>!!e||!!n),[e,n])},xe="DatePickerAndCheckbox_container__KwiIN",ve="DatePickerAndCheckbox_checkbox__NinO0",ge="DatePickerAndCheckbox_noLabel__UkWsT",ye=e=>{const{value:n,checkboxLabel:t=null,disabled:l,datePickerProps:r={},checkboxProps:o={},onChange:i,"aria-invalid":d,setDatePickerStatus:c,style:u={}}=e,m=fe(l),h=(0,a.useMemo)((()=>{if(c&&"true"===d)return c(n)}),[d,n]);return(0,s.jsxs)("div",{className:xe,style:u,children:[(0,s.jsx)(he.A,{value:n&&n.length>=1?n[0]:void 0,disabled:m,status:h,...r,onChange:e=>{const t=n&&n.length>=2?[e||void 0,n[1]]:[e||void 0,void 0];i?.(t)}}),(0,s.jsx)(pe.A,{className:`${ve}${t?"":` ${ge}`}`,checked:n&&n.length>=2?n[1]:void 0,disabled:m,...o,onChange:e=>{const t=e?.target?.checked||!1,a=n&&n.length>=1?[n[0],t]:[void 0,t];i?.(a)},children:t})]})},ke=[{fileName:"DatePickerAndCheckbox.tsx",code:'/**\n * 左边日期选择框右边复选框的复合组件\n */\nimport React, { useMemo } from "react";\nimport { DatePicker, Checkbox } from "antd";\nimport { CheckboxChangeEvent } from "antd/es/checkbox";\nimport { Dayjs } from "dayjs";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\ntype Value = [Dayjs | null | undefined, boolean | undefined];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype DatePickerAndCheckboxProps = {\n  value?: Value;\n  checkboxLabel?: string;\n  disabled?: boolean;\n  datePickerProps?: Record<string, any>; // 传递给日期选择框的属性值\n  checkboxProps?: Record<string, any>; // 传递给复选框的属性值\n  onChange?: (value: Value) => void;\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setDatePickerStatus?: (value: Value | undefined) => Status; // 当form校验时，设置日期选择框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  style?: Record<string, any>;\n};\n\nconst DatePickerAndCheckbox = (props: DatePickerAndCheckboxProps) => {\n  const {\n    value,\n    checkboxLabel = null,\n    disabled: selfDisabled,\n    datePickerProps = {},\n    checkboxProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setDatePickerStatus,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onDatePickerChange = (date: Dayjs | null) => {\n    const newValue: Value =\n      value && value.length >= 2\n        ? [date || undefined, value[1]]\n        : [date || undefined, undefined];\n    onChange?.(newValue);\n  };\n\n  const onCheckboxChange = (e: CheckboxChangeEvent) => {\n    const checked = e?.target?.checked || false;\n    const newValue: Value =\n      value && value.length >= 1 ? [value[0], checked] : [undefined, checked];\n    onChange?.(newValue);\n  };\n\n  const datePickerStatus = useMemo(() => {\n    if (setDatePickerStatus && invalid === "true") {\n      return setDatePickerStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <DatePicker\n        value={value && value.length >= 1 ? value[0] : undefined}\n        disabled={disabled}\n        status={datePickerStatus}\n        {...datePickerProps}\n        onChange={onDatePickerChange}\n      />\n      <Checkbox\n        className={`${styles.checkbox}${\n          !checkboxLabel ? ` ${styles.noLabel}` : ""\n        }`}\n        checked={value && value.length >= 2 ? value[1] : undefined}\n        disabled={disabled}\n        {...checkboxProps}\n        onChange={onCheckboxChange}\n      >\n        {checkboxLabel}\n      </Checkbox>\n    </div>\n  );\n};\n\nexport default DatePickerAndCheckbox;'},{fileName:"DatePickerAndCheckbox.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .checkbox {\n    display: flex;\n    align-items: center;\n    margin-left: 8px;\n    span {\n      word-break: keep-all;\n    }\n  }\n  .noLabel {\n    span:not(.ant-checkbox) {\n      padding-inline-start: 0 !important;\n      padding-inline-end: 0 !important;\n    }\n  }\n}"}];var Ce=t(9467),_e=t(7152),Ae=t(6370);const Pe="DatePickerAndCheckboxSample_container__M7yhS",je=()=>{const[e]=Ce.A.useForm();return(0,s.jsx)(Ce.A,{form:e,labelAlign:"right",className:Pe,children:(0,s.jsxs)(_e.A,{gutter:16,children:[(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,s.jsx)(ye,{checkboxLabel:"复选框标题"})})}),(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",children:(0,s.jsx)(ye,{datePickerProps:{format:"YYYY/MM/DD"}})})})]})})},Se=[{fileName:"index.tsx",code:"import React from \"react\";\nimport { Form, Row, Col } from \"antd\";\nimport DatePickerAndCheckbox from \"@/components/formItems/DatePickerAndCheckbox\";\nimport styles from \"./index.module.scss\";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign='right' className={styles.container}>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field1'>\n            <DatePickerAndCheckbox checkboxLabel='复选框标题' />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field2'>\n            <DatePickerAndCheckbox datePickerProps={{ format: \"YYYY/MM/DD\" }} />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;"}].concat(ke),we=()=>(0,s.jsx)(me,{title:"左边日期选择框右边复选框的复合组件",codeParams:Se,children:(0,s.jsx)(je,{})}),Ne="RangePickerAndCheckbox_container__NEKOI",Re="RangePickerAndCheckbox_checkbox__apXZT",De="RangePickerAndCheckbox_noLabel__5RO6Q",{RangePicker:Ie}=he.A,Fe=e=>{const{value:n,checkboxLabel:t="",disabled:l,rangePickerProps:r={},checkboxProps:o={},onChange:i,"aria-invalid":d,setRangePickerStatus:c,style:u={}}=e,m=fe(l),h=(0,a.useMemo)((()=>{if(c&&"true"===d)return c(n)}),[d,n]);return(0,s.jsxs)("div",{className:Ne,style:u,children:[(0,s.jsx)(Ie,{value:n&&n.length>=2?[n[0],n[1]]:[void 0,void 0],disabled:m,status:h,...r,onChange:e=>{let t=n&&n.length>=3?[void 0,void 0,n[2]]:[void 0,void 0,void 0];e&&e.length>=2&&(t=n&&n.length>=3?[e[0],e[1],n[2]]:[e[0],e[1],void 0]),i?.(t)}}),(0,s.jsx)(pe.A,{className:`${Re}${t?"":` ${De}`}`,checked:!!(n&&n.length>=3)&&n[2],disabled:m,...o,onChange:e=>{const t=e?.target?.checked||!1,a=n&&n.length>=2?[n[0],n[1],t]:[void 0,void 0,t];i?.(a)},children:t})]})},Te=()=>{const[e]=Ce.A.useForm();return(0,s.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,s.jsxs)(_e.A,{gutter:16,children:[(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,s.jsx)(Fe,{checkboxLabel:"复选框标题"})})}),(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",children:(0,s.jsx)(Fe,{rangePickerProps:{format:"YYYY/MM/DD"}})})})]})})},Me="RangePickerAndCheckboxSample_container__lJatc",Ve=[{fileName:"index.tsx",code:"import React from \"react\";\nimport { Form, Row, Col } from \"antd\";\nimport RangePickerAndCheckbox from \"@/components/formItems/RangePickerAndCheckbox\";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign='right'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field1'>\n            <RangePickerAndCheckbox checkboxLabel='复选框标题' />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field2'>\n            <RangePickerAndCheckbox\n              rangePickerProps={{ format: \"YYYY/MM/DD\" }}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;"}].concat([{fileName:"RangePickerAndCheckbox.tsx",code:'/**\n * 左边日期范围选择框右边复选框的复合组件\n */\nimport React, { useMemo } from "react";\nimport { DatePicker, Checkbox } from "antd";\nimport { CheckboxChangeEvent } from "antd/es/checkbox";\nimport { Dayjs } from "dayjs";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\nconst { RangePicker } = DatePicker;\n\ntype Value = [\n  Dayjs | null | undefined,\n  Dayjs | null | undefined,\n  boolean | undefined\n];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype RangePickerAndCheckboxProps = {\n  value?: Value;\n  checkboxLabel?: string;\n  disabled?: boolean;\n  rangePickerProps?: Record<string, any>; // 传递给日期范围选择框的属性值\n  checkboxProps?: Record<string, any>; // 传递给复选框的属性值\n  onChange?: (value: Value) => void;\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setRangePickerStatus?: (value: Value | undefined) => Status; // 当form校验时，设置日期范围选择框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  style?: Record<string, any>;\n};\n\nconst RangePickerAndCheckbox = (props: RangePickerAndCheckboxProps) => {\n  const {\n    value,\n    checkboxLabel = "",\n    disabled: selfDisabled,\n    rangePickerProps = {},\n    checkboxProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setRangePickerStatus,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onRangePickerChange = (dates: [Dayjs, Dayjs] | null) => {\n    let newValue: Value =\n      value && value.length >= 3\n        ? [undefined, undefined, value[2]]\n        : [undefined, undefined, undefined];\n    if (dates && dates.length >= 2) {\n      newValue =\n        value && value.length >= 3\n          ? [dates[0], dates[1], value[2]]\n          : [dates[0], dates[1], undefined];\n    }\n    onChange?.(newValue);\n  };\n\n  const onCheckboxChange = (e: CheckboxChangeEvent) => {\n    const checked = e?.target?.checked || false;\n    const newValue: Value =\n      value && value.length >= 2\n        ? [value[0], value[1], checked]\n        : [undefined, undefined, checked];\n    onChange?.(newValue);\n  };\n\n  const rangePickerStatus = useMemo(() => {\n    if (setRangePickerStatus && invalid === "true") {\n      return setRangePickerStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <RangePicker\n        value={\n          value && value.length >= 2\n            ? [value[0], value[1]]\n            : [undefined, undefined]\n        }\n        disabled={disabled}\n        status={rangePickerStatus}\n        {...rangePickerProps}\n        // @ts-ignore\n        onChange={onRangePickerChange}\n      />\n      <Checkbox\n        className={`${styles.checkbox}${\n          !checkboxLabel ? ` ${styles.noLabel}` : ""\n        }`}\n        checked={value && value.length >= 3 ? value[2] : false}\n        disabled={disabled}\n        {...checkboxProps}\n        onChange={onCheckboxChange}\n      >\n        {checkboxLabel}\n      </Checkbox>\n    </div>\n  );\n};\n\nexport default RangePickerAndCheckbox;'},{fileName:"RangePickerAndCheckbox.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .checkbox {\n    display: flex;\n    align-items: center;\n    margin-left: 8px;\n    span {\n      word-break: keep-all;\n    }\n  }\n  .noLabel {\n    span:not(.ant-checkbox) {\n      padding-inline-start: 0 !important;\n      padding-inline-end: 0 !important;\n    }\n  }\n}"}]),Ee=()=>(0,s.jsx)(me,{className:Me,title:"左边日期范围选择框右边复选框的复合组件",codeParams:Ve,children:(0,s.jsx)(Te,{})}),Le="CustomRangePicker_container__ORuOy",Oe="CustomRangePicker_datePicker__8v8Zv",$e="CustomRangePicker_center__vEzdz",Ke=e=>{const{value:n,placeholder:t,customCenter:l="~",disabled:r,datePickerProps:o={},onChange:i,"aria-invalid":d,setDatePickerStatus:c,style:u={}}=e,m=fe(r),h=(0,a.useMemo)((()=>c&&"true"===d?c(n):[void 0,void 0]),[d,n]),p=(0,a.useMemo)((()=>[t?.[0]?t[0]:"开始日期",t?.[1]?t[1]:"结束日期"]),[t]);return(0,s.jsxs)("div",{className:Le,style:u,children:[(0,s.jsx)(he.A,{className:Oe,value:n&&n.length>=1?n[0]:void 0,placeholder:p[0],disabledDate:e=>{if(o?.disabledDate)return o.disabledDate(e,"start");if(n&&n.length>=2&&n[1]){if(e.format("YYYY-MM-DD")===n[1].format("YYYY-MM-DD"))return!1;if(e>n[1])return!0}return!1},disabledTime:o?.showTime?e=>{if(o?.disabledTime)return o.disabledTime(e,"start");if(n&&n.length>=2&&n[1]&&b()(e.format("YYYY-MM-DD"))>=b()(n[1].format("YYYY-MM-DD"))){const[e,t,a]=n[1].format("HH:mm:ss").split(":"),l=Number(e),r=Number(t),s=Number(a);return{disabledHours:()=>{const e=[];for(let n=l+1;n<24;n++)e.push(n);return e},disabledMinutes:e=>{const n=[];if(e>=l)for(let e=r+1;e<60;e++)n.push(e);return n},disabledSeconds:(e,n)=>{const t=[];if(e>=l&&n>=r)for(let e=s+1;e<60;e++)t.push(e);return t}}}return{}}:void 0,disabled:m,status:h[0],onChange:e=>{let t=n&&n.length>=2?[void 0,n[1]]:[void 0,void 0];e&&(t=n&&n.length>=2?[e,n[1]]:[e,void 0]),i?.(t)},...o}),(0,s.jsx)("div",{className:$e,children:l}),(0,s.jsx)(he.A,{className:Oe,value:n&&n.length>=2?n[1]:void 0,placeholder:p[1],disabledDate:e=>{if(o?.disabledDate)return o.disabledDate(e,"end");if(n&&n.length>=1&&n[0]){if(e.format("YYYY-MM-DD")===n[0].format("YYYY-MM-DD"))return!1;if(e<n[0])return!0}return!1},disabledTime:o?.showTime?e=>{if(o?.disabledTime)return o.disabledTime(e,"end");if(n&&n.length>=1&&n[0]&&b()(e.format("YYYY-MM-DD"))<=b()(n[0].format("YYYY-MM-DD"))){const[e,t,a]=n[0].format("HH:mm:ss").split(":"),l=Number(e),r=Number(t),s=Number(a);return{disabledHours:()=>{const e=[];for(let n=0;n<l;n++)e.push(n);return e},disabledMinutes:e=>{const n=[];if(e<=l)for(let e=0;e<r;e++)n.push(e);return n},disabledSeconds:(e,n)=>{const t=[];if(e<=l&&n<=r)for(let e=0;e<s;e++)t.push(e);return t}}}return{}}:void 0,disabled:m,status:h[1],onChange:e=>{let t=n&&n.length>=1?[n[0],void 0]:[void 0,void 0];e&&(t=n&&n.length>=1?[n[0],e]:[void 0,e]),i?.(t)},...o})]})},Be=[{fileName:"CustomRangePicker.tsx",code:'/**\n * 自定义日期范围选择复合组件\n */\nimport React, { ReactNode, useMemo } from "react";\nimport { DatePicker } from "antd";\nimport dayjs, { Dayjs } from "dayjs";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\ntype Value = [Dayjs | null | undefined, Dayjs | null | undefined];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype CustomRangePickerProps = {\n  value?: Value;\n  placeholder?: [string, string];\n  customCenter?: ReactNode;\n  disabled?: boolean;\n  datePickerProps?: Record<string, any>;\n  onChange?: (value: Value) => void;\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setDatePickerStatus?: (value: Value | undefined) => Status; // 当form校验时，设置日期选择框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  style?: Record<string, any>;\n};\n\nconst CustomRangePicker = (props: CustomRangePickerProps) => {\n  const {\n    value,\n    placeholder,\n    customCenter = "~",\n    disabled: selfDisabled,\n    datePickerProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setDatePickerStatus,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onStartDateChange = (date: Dayjs | null) => {\n    let newValue: Value =\n      value && value.length >= 2\n        ? [undefined, value[1]]\n        : [undefined, undefined];\n    if (date) {\n      newValue =\n        value && value.length >= 2 ? [date, value[1]] : [date, undefined];\n    }\n    onChange?.(newValue);\n  };\n\n  const onEndDateChange = (date: Dayjs | null) => {\n    let newValue: Value =\n      value && value.length >= 1\n        ? [value[0], undefined]\n        : [undefined, undefined];\n    if (date) {\n      newValue =\n        value && value.length >= 1 ? [value[0], date] : [undefined, date];\n    }\n    onChange?.(newValue);\n  };\n\n  const startDisabledDate = (currentDate: Dayjs) => {\n    if (datePickerProps?.disabledDate) {\n      return datePickerProps.disabledDate(currentDate, "start");\n    }\n    if (value && value.length >= 2 && value[1]) {\n      if (datePickerProps?.showTime) {\n        const currentFormatDate = currentDate.format("YYYYMMDD");\n        const endFormatDate = value[1].format("YYYYMMDD");\n        if (currentFormatDate === endFormatDate) {\n          return false;\n        }\n      }\n      if (currentDate > value[1]) return true;\n    }\n    return false;\n  };\n\n  const endDisabledDate = (currentDate: Dayjs) => {\n    if (datePickerProps?.disabledDate) {\n      return datePickerProps.disabledDate(currentDate, "end");\n    }\n    if (value && value.length >= 1 && value[0]) {\n      if (datePickerProps?.showTime) {\n        const currentFormatDate = currentDate.format("YYYYMMDD");\n        const startFormatDate = value[0].format("YYYYMMDD");\n        if (currentFormatDate === startFormatDate) {\n          return false;\n        }\n      }\n      if (currentDate < value[0]) return true;\n    }\n    return false;\n  };\n\n  const startDisabledTime = (selectedDate: Dayjs) => {\n    if (datePickerProps?.disabledTime) {\n      return datePickerProps.disabledTime(selectedDate, "start");\n    }\n    if (value && value.length >= 2 && value[1]) {\n      if (\n        dayjs(selectedDate.format("YYYY-MM-DD")) >=\n        dayjs(value[1].format("YYYY-MM-DD"))\n      ) {\n        const [hourStr, minuteStr, secondStr] = value[1]\n          .format("HH:mm:ss")\n          .split(":");\n        const hour = Number(hourStr);\n        const minute = Number(minuteStr);\n        const second = Number(secondStr);\n        return {\n          disabledHours: () => {\n            const disabledHours: number[] = [];\n            for (let i = hour + 1; i < 24; i++) {\n              disabledHours.push(i);\n            }\n            return disabledHours;\n          },\n          disabledMinutes: (selectedHour: number) => {\n            const disabledMinutes: number[] = [];\n            if (selectedHour >= hour) {\n              for (let i = minute + 1; i < 60; i++) {\n                disabledMinutes.push(i);\n              }\n            }\n            return disabledMinutes;\n          },\n          disabledSeconds: (selectedHour: number, selectedMinute: number) => {\n            const disabledSeconds: number[] = [];\n            if (selectedHour >= hour && selectedMinute >= minute) {\n              for (let i = second + 1; i < 60; i++) {\n                disabledSeconds.push(i);\n              }\n            }\n            return disabledSeconds;\n          },\n        };\n      }\n    }\n    return {};\n  };\n\n  const endDisabledTime = (selectedDate: Dayjs) => {\n    if (datePickerProps?.disabledTime) {\n      return datePickerProps.disabledTime(selectedDate, "end");\n    }\n    if (value && value.length >= 1 && value[0]) {\n      if (\n        dayjs(selectedDate.format("YYYY-MM-DD")) <=\n        dayjs(value[0].format("YYYY-MM-DD"))\n      ) {\n        const [hourStr, minuteStr, secondStr] = value[0]\n          .format("HH:mm:ss")\n          .split(":");\n        const hour = Number(hourStr);\n        const minute = Number(minuteStr);\n        const second = Number(secondStr);\n        return {\n          disabledHours: () => {\n            const disabledHours: number[] = [];\n            for (let i = 0; i < hour; i++) {\n              disabledHours.push(i);\n            }\n            return disabledHours;\n          },\n          disabledMinutes: (selectedHour: number) => {\n            const disabledMinutes: number[] = [];\n            if (selectedHour <= hour) {\n              for (let i = 0; i < minute; i++) {\n                disabledMinutes.push(i);\n              }\n            }\n            return disabledMinutes;\n          },\n          disabledSeconds: (selectedHour: number, selectedMinute: number) => {\n            const disabledSeconds: number[] = [];\n            if (selectedHour <= hour && selectedMinute <= minute) {\n              for (let i = 0; i < second; i++) {\n                disabledSeconds.push(i);\n              }\n            }\n            return disabledSeconds;\n          },\n        };\n      }\n    }\n    return {};\n  };\n\n  const datePickerStatus = useMemo(() => {\n    if (setDatePickerStatus && invalid === "true") {\n      return setDatePickerStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  const finalPlaceholder = useMemo(() => {\n    const startPlaceholder = placeholder?.[0] ? placeholder[0] : "开始日期";\n    const endPlaceholder = placeholder?.[1] ? placeholder[1] : "结束日期";\n    return [startPlaceholder, endPlaceholder];\n  }, [placeholder]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <DatePicker\n        className={styles.datePicker}\n        value={value && value.length >= 1 ? value[0] : undefined}\n        placeholder={finalPlaceholder[0]}\n        disabledDate={startDisabledDate}\n        disabledTime={datePickerProps?.showTime ? startDisabledTime : undefined}\n        disabled={disabled}\n        status={datePickerStatus}\n        onChange={onStartDateChange}\n        {...datePickerProps}\n      />\n      <div className={styles.center}>{customCenter}</div>\n      <DatePicker\n        className={styles.datePicker}\n        value={value && value.length >= 2 ? value[1] : undefined}\n        placeholder={finalPlaceholder[1]}\n        disabledDate={endDisabledDate}\n        disabledTime={datePickerProps?.showTime ? endDisabledTime : undefined}\n        disabled={disabled}\n        status={datePickerStatus}\n        onChange={onEndDateChange}\n        {...datePickerProps}\n      />\n    </div>\n  );\n};\n\nexport default CustomRangePicker;'},{fileName:"CustomRangePicker.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .datePicker {\n    display: flex;\n    flex: 1;\n  }\n  .center {\n    padding: 0 8px;\n  }\n}"}];var Ye=t(2203);const He=()=>{const[e]=Ce.A.useForm();return(0,s.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,s.jsxs)(_e.A,{gutter:16,children:[(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,s.jsx)(Ke,{})})}),(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",children:(0,s.jsx)(Ke,{placeholder:["开始时间","结束时间"],datePickerProps:{format:"YYYY/MM/DD HH:mm:ss",showTime:!0},customCenter:(0,s.jsx)(Ye.A,{})})})})]})})},qe="CustomRangePickerSample_container__9+JLJ",We=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col } from "antd";\nimport { SwapRightOutlined } from "@ant-design/icons";\nimport CustomRangePicker from "@/components/formItems/CustomRangePicker";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign=\'right\'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field1\'>\n            <CustomRangePicker />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\'>\n            <CustomRangePicker\n              placeholder={["开始时间", "结束时间"]}\n              datePickerProps={{\n                format: "YYYY/MM/DD HH:mm:ss",\n                showTime: true,\n              }}\n              customCenter={<SwapRightOutlined />}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat(Be),Ue=()=>(0,s.jsx)(me,{className:qe,title:"自定义日期范围选择复合组件",codeParams:We,children:(0,s.jsx)(He,{})});var ze=t(7444);const Ge="InputAndCheckbox_container__yadK+",Ze="InputAndCheckbox_checkbox__50f6e",Qe="InputAndCheckbox_noLabel__-JvmU",Je=e=>{const{value:n,checkboxLabel:t=null,disabled:l,inputProps:r={},checkboxProps:o={},onChange:i,"aria-invalid":d,setInputStatus:c,style:u={}}=e,m=fe(l),h=(0,a.useMemo)((()=>{if(c&&"true"===d)return c(n)}),[d,n]);return(0,s.jsxs)("div",{className:Ge,style:u,children:[(0,s.jsx)(ze.A,{value:n&&n.length>=1?n[0]:void 0,disabled:m,status:h,...r,onChange:e=>{const t=e?.target?.value,a=n&&n.length>=2?[t,n[1]]:[t,void 0];i?.(a)}}),(0,s.jsx)(pe.A,{className:`${Ze}${t?"":` ${Qe}`}`,checked:n&&n.length>=2?n[1]:void 0,disabled:m,...o,onChange:e=>{const t=e?.target?.checked||!1,a=n&&n.length>=1?[n[0],t]:[void 0,t];i?.(a)},children:t})]})},Xe=[{fileName:"InputAndCheckbox.tsx",code:'/**\n * 左边输入框右边复选框的复合组件\n */\nimport React, { useMemo } from "react";\nimport { Input, Checkbox } from "antd";\nimport { CheckboxChangeEvent } from "antd/es/checkbox";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\nexport type Value = [string | undefined, boolean | undefined];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype InputAndCheckboxProps = {\n  value?: Value;\n  checkboxLabel?: string;\n  disabled?: boolean;\n  inputProps?: Record<string, any>; // 传递给输入框的属性值\n  checkboxProps?: Record<string, any>; // 传递给复选框的属性值\n  onChange?: (value: Value) => void;\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setInputStatus?: (value: Value | undefined) => Status; // 当form校验时，设置输入框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  style?: Record<string, any>;\n};\n\nconst InputAndCheckbox = (props: InputAndCheckboxProps) => {\n  const {\n    value,\n    checkboxLabel = null,\n    disabled: selfDisabled,\n    inputProps = {},\n    checkboxProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setInputStatus,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onInputChange = (e: any) => {\n    const v = e?.target?.value;\n    const newValue: Value =\n      value && value.length >= 2 ? [v, value[1]] : [v, undefined];\n    onChange?.(newValue);\n  };\n\n  const onCheckboxChange = (e: CheckboxChangeEvent) => {\n    const checked = e?.target?.checked || false;\n    const newValue: Value =\n      value && value.length >= 1 ? [value[0], checked] : [undefined, checked];\n    onChange?.(newValue);\n  };\n\n  const inputStatus = useMemo(() => {\n    if (setInputStatus && invalid === "true") {\n      return setInputStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <Input\n        value={value && value.length >= 1 ? value[0] : undefined}\n        disabled={disabled}\n        status={inputStatus}\n        {...inputProps}\n        onChange={onInputChange}\n      />\n      <Checkbox\n        className={`${styles.checkbox}${\n          !checkboxLabel ? ` ${styles.noLabel}` : ""\n        }`}\n        checked={value && value.length >= 2 ? value[1] : undefined}\n        disabled={disabled}\n        {...checkboxProps}\n        onChange={onCheckboxChange}\n      >\n        {checkboxLabel}\n      </Checkbox>\n    </div>\n  );\n};\n\nexport default InputAndCheckbox;'},{fileName:"InputAndCheckbox.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .checkbox {\n    display: flex;\n    align-items: center;\n    margin-left: 8px;\n    span {\n      word-break: keep-all;\n    }\n  }\n  .noLabel {\n    span:not(.ant-checkbox) {\n      padding-inline-start: 0 !important;\n      padding-inline-end: 0 !important;\n    }\n  }\n}"}];var en=t(6492);const{Option:nn}=en.A,tn=()=>{const[e]=Ce.A.useForm(),n=(0,s.jsxs)(en.A,{defaultValue:"http://",children:[(0,s.jsx)(nn,{value:"http://",children:"http://"}),(0,s.jsx)(nn,{value:"https://",children:"https://"})]}),t=(0,s.jsxs)(en.A,{defaultValue:".com",children:[(0,s.jsx)(nn,{value:".com",children:".com"}),(0,s.jsx)(nn,{value:".jp",children:".jp"}),(0,s.jsx)(nn,{value:".cn",children:".cn"}),(0,s.jsx)(nn,{value:".org",children:".org"})]});return(0,s.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,s.jsxs)(_e.A,{gutter:16,children:[(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,s.jsx)(Je,{inputProps:{addonBefore:n,addonAfter:t},checkboxLabel:"复选框标题"})})}),(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",children:(0,s.jsx)(Je,{})})})]})})},an="InputAndCheckboxSample_container__W59nb",ln=[{fileName:"index.tsx",code:"import React from \"react\";\nimport { Form, Row, Col, Select } from \"antd\";\nimport InputAndCheckbox from \"@/components/formItems/InputAndCheckbox\";\n\nconst { Option } = Select;\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  const selectBefore = (\n    <Select defaultValue='http://'>\n      <Option value='http://'>http://</Option>\n      <Option value='https://'>https://</Option>\n    </Select>\n  );\n  const selectAfter = (\n    <Select defaultValue='.com'>\n      <Option value='.com'>.com</Option>\n      <Option value='.jp'>.jp</Option>\n      <Option value='.cn'>.cn</Option>\n      <Option value='.org'>.org</Option>\n    </Select>\n  );\n\n  return (\n    <Form form={form} labelAlign='right'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field1'>\n            <InputAndCheckbox\n              inputProps={{\n                addonBefore: selectBefore,\n                addonAfter: selectAfter,\n              }}\n              checkboxLabel='复选框标题'\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field2'>\n            <InputAndCheckbox />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;"}].concat(Xe),rn=()=>(0,s.jsx)(me,{className:an,title:"左边输入框右边复选框的复合组件",codeParams:ln,children:(0,s.jsx)(tn,{})});var sn=t(7142);const on="InputNumberAndSelect_container__7s7iS",dn="InputNumberAndSelect_inputNumber__Xbfyv",cn="InputNumberAndSelect_select__hietx",un=e=>{const{value:n,options:t=[],disabled:l,inputNumberProps:r={},selectProps:o={},onChange:i,"aria-invalid":d,setInputNumberStatus:c,setSelectStatus:u,style:m={}}=e,h=fe(l),p=(0,a.useMemo)((()=>{if(c&&"true"===d)return c(n)}),[d,n]),b=(0,a.useMemo)((()=>{if(u&&"true"===d)return u(n)}),[d,n]);return(0,s.jsxs)("div",{className:on,style:m,children:[(0,s.jsx)(sn.A,{className:dn,value:n&&n.length>=1?n[0]:void 0,disabled:h,status:p,...r,onChange:e=>{const t=n&&n.length>=2?[e,n[1]]:[e,void 0];i?.(t)}}),(0,s.jsx)(en.A,{className:cn,value:n&&n.length>=2?n[1]:void 0,options:t,disabled:h,status:b,...o,onChange:(e,t)=>{const a=n&&n.length>=1?[n[0],e]:[void 0,e];i?.(a,t)}})]})},mn=()=>{const[e]=Ce.A.useForm();return(0,s.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,s.jsxs)(_e.A,{gutter:16,children:[(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,s.jsx)(un,{options:[{name:"工作日",id:"workingDay"},{name:"自然日",id:"naturalDay"}],inputNumberProps:{addonAfter:"个"},selectProps:{fieldNames:{label:"name",value:"id"}}})})}),(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",children:(0,s.jsx)(un,{options:[{label:"年",value:"year"},{label:"月",value:"month"},{label:"天",value:"day"}],inputNumberProps:{min:0,max:1e4,precision:2}})})})]})})},hn="InputNumberAndSelectSample_container__YVhxN",pn=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col } from "antd";\nimport InputNumberAndSelect from "@/components/formItems/InputNumberAndSelect";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign=\'right\'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field1\'>\n            <InputNumberAndSelect\n              options={[\n                { name: "工作日", id: "workingDay" },\n                { name: "自然日", id: "naturalDay" },\n              ]}\n              inputNumberProps={{ addonAfter: "个" }}\n              selectProps={{\n                fieldNames: { label: "name", value: "id" },\n              }}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\'>\n            <InputNumberAndSelect\n              options={[\n                { label: "年", value: "year" },\n                { label: "月", value: "month" },\n                { label: "天", value: "day" },\n              ]}\n              inputNumberProps={{ min: 0, max: 10000, precision: 2 }}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat([{fileName:"InputNumberAndSelect.tsx",code:'/**\n * 左边数值输入框右边下拉框的复合组件\n */\nimport React, { useMemo } from "react";\nimport { InputNumber, Select } from "antd";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\nexport type Value = [number | string | null | undefined, string | undefined];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype InputNumberAndSelectProps = {\n  value?: Value;\n  options: Record<string, any>;\n  disabled?: boolean;\n  inputNumberProps?: Record<string, any>; // 传递给数值输入框的属性值\n  selectProps?: Record<string, any>; // 传递给下拉框的属性值\n  onChange?: (value: Value, option?: Record<string, any>) => void; // 如果修改下拉框则onChange的第二个参数会返回option\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setInputNumberStatus?: (value: Value | undefined) => Status; // 当form校验时，设置数值输入框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  setSelectStatus?: (value: Value | undefined) => Status; // 当form校验时，设置日期选择框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  style?: Record<string, any>;\n};\n\nconst InputNumberAndSelect = (props: InputNumberAndSelectProps) => {\n  const {\n    value,\n    options = [],\n    disabled: selfDisabled,\n    inputNumberProps = {},\n    selectProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setInputNumberStatus,\n    setSelectStatus,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onInputNumberChange = (v: number | string | null) => {\n    const newValue: Value =\n      value && value.length >= 2 ? [v, value[1]] : [v, undefined];\n    onChange?.(newValue);\n  };\n\n  const onSelectChange = (v: string, option: Record<string, any>) => {\n    const newValue: Value =\n      value && value.length >= 1 ? [value[0], v] : [undefined, v];\n    onChange?.(newValue, option);\n  };\n\n  const inputNumberStatus = useMemo(() => {\n    if (setInputNumberStatus && invalid === "true") {\n      return setInputNumberStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  const selectStatus = useMemo(() => {\n    if (setSelectStatus && invalid === "true") {\n      return setSelectStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <InputNumber\n        className={styles.inputNumber}\n        value={value && value.length >= 1 ? value[0] : undefined}\n        disabled={disabled}\n        status={inputNumberStatus}\n        {...inputNumberProps}\n        onChange={onInputNumberChange}\n      />\n      <Select\n        className={styles.select}\n        value={value && value.length >= 2 ? value[1] : undefined}\n        options={options as any[]}\n        disabled={disabled}\n        status={selectStatus}\n        {...selectProps}\n        onChange={onSelectChange}\n      />\n    </div>\n  );\n};\n\nexport default InputNumberAndSelect;'},{fileName:"InputNumberAndSelect.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .inputNumber {\n    display: flex;\n    flex: 1;\n  }\n  .select {\n    display: flex;\n    flex: 1;\n    margin-left: 8px;\n  }\n}"}]),bn=()=>(0,s.jsx)(me,{className:hn,title:"左边数值输入框右边下拉框的复合组件",codeParams:pn,children:(0,s.jsx)(mn,{})});var fn=t(9822),xn=t(5709);const vn="CanAddMultiple_container__ZEPWF",gn="CanAddMultiple_row__--s1X",yn="CanAddMultiple_addBtn__tRlxQ",kn="CanAddMultiple_disabled__ZEO7H",Cn="CanAddMultiple_deleteBtn__s+wlP",_n=e=>{const{value:n,disabled:t,hideBtn:l=!1,maxRows:r=-1,children:o,onChange:i,style:d={},...c}=e,u=fe(t),m=(e,t,a)=>{if(n&&n.length>0){const l=[];n.forEach(((n,a)=>{a===e?l.push(t):l.push(n)})),i?.(l,...a)}else i?.([t],...a)},h=()=>{if(u)return;let e=[void 0,void 0];if(n&&n.length>0){if(r>0&&n.length>=r)return void z.Ay.warning(`最多可添加${r}个`);e=[...n,void 0]}i?.(e)},p=(0,a.useMemo)((()=>n&&n.length>0?n:[void 0]),[n]);return(0,s.jsx)("div",{className:vn,style:d,children:p.map(((e,t)=>(0,s.jsxs)("div",{className:gn,children:[o?a.cloneElement(o,{value:e,disabled:u,index:t,onChange:function(e){for(var n=arguments.length,a=new Array(n>1?n-1:0),l=1;l<n;l++)a[l-1]=arguments[l];return m(t,e,a)},...c}):null,!l&&(0,s.jsxs)(s.Fragment,{children:[0===t&&(0,s.jsx)("div",{className:`${yn}${u?` ${kn}`:""}`,onClick:h,children:(0,s.jsx)(fn.A,{})}),t>0&&(0,s.jsx)("div",{className:`${Cn}${u?` ${kn}`:""}`,onClick:()=>(e=>{if(!u&&n&&n.length>0){const t=n.filter(((n,t)=>t!==e));i?.(t)}})(t),children:(0,s.jsx)(xn.A,{})})]})]},t)))})},An=[{fileName:"CanAddMultiple.tsx",code:'/**\n * 可增加和删除多条数据的包装组件\n */\nimport React, { useMemo, ReactElement } from "react";\nimport { message } from "antd";\nimport { PlusCircleOutlined, MinusCircleOutlined } from "@ant-design/icons";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\ntype Value = any[];\n\ntype CanAddMultipleProps = {\n  value?: Value;\n  disabled?: boolean;\n  hideBtn?: boolean; // 是否隐藏新增和删除按钮\n  maxRows?: number; // 最多可显示的行个数, 默认为-1无限制\n  children?: ReactElement | null; // children必须是支持value和onChange属性的组件\n  onChange?: (value: Value, ...restProps: any[]) => void;\n  style?: Record<string, any>;\n} & { [key in string]: any };\n\nconst CanAddMultiple = (props: CanAddMultipleProps) => {\n  const {\n    value,\n    disabled: selfDisabled,\n    hideBtn = false,\n    maxRows = -1,\n    children,\n    onChange,\n    style = {},\n    ...restProrps\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onChildrenChange = (index: number, rowValue: any, restProps: any[]) => {\n    if (value && value.length > 0) {\n      const newValue: Value = [];\n      value.forEach((item: any, i: number) => {\n        if (i === index) {\n          newValue.push(rowValue);\n        } else {\n          newValue.push(item);\n        }\n      });\n      onChange?.(newValue, ...restProps);\n    } else {\n      onChange?.([rowValue], ...restProps);\n    }\n  };\n\n  const onAdd = () => {\n    if (disabled) return;\n    let newValue: Value = [undefined, undefined];\n    if (value && value.length > 0) {\n      if (maxRows > 0 && value.length >= maxRows) {\n        message.warning(`最多可添加${maxRows}个`);\n        return;\n      }\n      newValue = [...value, undefined];\n    }\n    onChange?.(newValue);\n  };\n\n  const onDelete = (index: number) => {\n    if (disabled) return;\n    if (value && value.length > 0) {\n      const newValue: Value = value.filter((_: any, i: number) => i !== index);\n      onChange?.(newValue);\n    }\n  };\n\n  const finalValue = useMemo(() => {\n    if (value && value.length > 0) {\n      return value;\n    }\n    return [undefined];\n  }, [value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      {finalValue.map((itemValue: any, index: number) => {\n        return (\n          <div className={styles.row} key={index}>\n            {children\n              ? React.cloneElement(children, {\n                  value: itemValue,\n                  disabled,\n                  index,\n                  onChange: (value: any, ...restProps: any[]) =>\n                    onChildrenChange(index, value, restProps),\n                  ...restProrps,\n                })\n              : null}\n            {!hideBtn && (\n              <>\n                {index === 0 && (\n                  <div\n                    className={`${styles.addBtn}${\n                      disabled ? ` ${styles.disabled}` : ""\n                    }`}\n                    onClick={onAdd}\n                  >\n                    <PlusCircleOutlined />\n                  </div>\n                )}\n                {index > 0 && (\n                  <div\n                    className={`${styles.deleteBtn}${\n                      disabled ? ` ${styles.disabled}` : ""\n                    }`}\n                    onClick={() => onDelete(index)}\n                  >\n                    <MinusCircleOutlined />\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CanAddMultiple;'},{fileName:"CanAddMultiple.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  .row {\n    display: flex;\n    align-items: center;\n    &:not(:first-child) {\n      margin-top: 8px;\n    }\n\n    $btnSize: 16px;\n    .addBtn:not(.disabled) {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      :global {\n        svg {\n          width: $btnSize;\n          height: $btnSize;\n          path {\n            fill: $globalPrimaryColor;\n          }\n        }\n      }\n    }\n\n    .deleteBtn:not(.disabled) {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      :global {\n        svg {\n          width: $btnSize;\n          height: $btnSize;\n          path {\n            fill: $globalRedColor;\n          }\n        }\n      }\n    }\n\n    .disabled {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: not-allowed;\n      :global {\n        svg {\n          width: $btnSize;\n          height: $btnSize;\n          path {\n            fill: $disabledColor;\n          }\n        }\n      }\n    }\n  }\n}"}],{Option:Pn}=en.A,jn=()=>{const[e]=Ce.A.useForm(),n=(0,s.jsxs)(en.A,{defaultValue:"http://",children:[(0,s.jsx)(Pn,{value:"http://",children:"http://"}),(0,s.jsx)(Pn,{value:"https://",children:"https://"})]}),t=(0,s.jsxs)(en.A,{defaultValue:".com",children:[(0,s.jsx)(Pn,{value:".com",children:".com"}),(0,s.jsx)(Pn,{value:".jp",children:".jp"}),(0,s.jsx)(Pn,{value:".cn",children:".cn"}),(0,s.jsx)(Pn,{value:".org",children:".org"})]});return(0,s.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,s.jsxs)(_e.A,{gutter:16,children:[(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,s.jsx)(_n,{maxRows:5,children:(0,s.jsx)(Je,{inputProps:{addonBefore:n,addonAfter:t},checkboxLabel:"复选框标题"})})})}),(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",children:(0,s.jsx)(_n,{maxRows:6,children:(0,s.jsx)(un,{style:{marginRight:"8px"},options:[{name:"工作日",id:"workingDay"},{name:"自然日",id:"naturalDay"}],inputNumberProps:{addonAfter:"个"},selectProps:{fieldNames:{label:"name",value:"id"}}})})})})]})})},Sn="CanAddMultipleSample_container__F08Q9",wn=[{fileName:"index.tsx",code:"import React from \"react\";\nimport { Form, Row, Col, Select } from \"antd\";\nimport CanAddMultiple from \"@/components/formItems/CanAddMultiple\";\nimport InputAndCheckbox from \"@/components/formItems/InputAndCheckbox\";\nimport InputNumberAndSelect from \"@/components/formItems/InputNumberAndSelect\";\n\nconst { Option } = Select;\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  const selectBefore = (\n    <Select defaultValue='http://'>\n      <Option value='http://'>http://</Option>\n      <Option value='https://'>https://</Option>\n    </Select>\n  );\n  const selectAfter = (\n    <Select defaultValue='.com'>\n      <Option value='.com'>.com</Option>\n      <Option value='.jp'>.jp</Option>\n      <Option value='.cn'>.cn</Option>\n      <Option value='.org'>.org</Option>\n    </Select>\n  );\n\n  return (\n    <Form form={form} labelAlign='right'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field1'>\n            <CanAddMultiple maxRows={5}>\n              <InputAndCheckbox\n                inputProps={{\n                  addonBefore: selectBefore,\n                  addonAfter: selectAfter,\n                }}\n                checkboxLabel='复选框标题'\n              />\n            </CanAddMultiple>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field2'>\n            <CanAddMultiple maxRows={6}>\n              <InputNumberAndSelect\n                style={{ marginRight: \"8px\" }}\n                options={[\n                  { name: \"工作日\", id: \"workingDay\" },\n                  { name: \"自然日\", id: \"naturalDay\" },\n                ]}\n                inputNumberProps={{ addonAfter: \"个\" }}\n                selectProps={{\n                  fieldNames: { label: \"name\", value: \"id\" },\n                }}\n              />\n            </CanAddMultiple>\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;"}].concat(An),Nn=()=>(0,s.jsx)(me,{className:Sn,title:"可增加和删除多条数据的包装组件",codeParams:wn,children:(0,s.jsx)(jn,{})}),Rn=[{fileName:"TreeSelect.tsx",code:'/**\n * 下拉选择框的复合组件\n */\nimport React from "react";\nimport { Select } from "antd";\nimport { MockItem } from "./mock";\nimport { default as CheckboxModal } from "./modal";\n\ninterface TreeSelectProps {\n  defaultValue?: string[];\n  options: MockItem[];\n  onChange: (checkedKeys: string[]) => void;\n  title: string;\n  width?: number;\n}\n\nconst flattenDeep = (arr: any = [], result: any = []) => {\n  arr.map((item: any) => {\n    item?.children?.length > 0\n      ? flattenDeep(item.children, result)\n      : result.push(item);\n  });\n  return result;\n};\n\nconst TreeSelect: React.FC<TreeSelectProps> = ({\n  defaultValue = [],\n  onChange = (checkedKeys: any) => {},\n  options = [],\n  title = "示例测试",\n  width = 200,\n}) => {\n  const stations = flattenDeep(options, []);\n  const len = defaultValue.length;\n  const allLen = stations.length;\n  const onClickSelect = async () => {\n    // 点击下拉\n    const { index, checkedKeys } = await CheckboxModal.show({\n      title,\n      value: defaultValue,\n      treeData: options,\n    });\n    index === 1 && !!checkedKeys.length && onChange(checkedKeys);\n  };\n\n  return (\n    <Select\n      style={{ width: width }}\n      value={\n        !options.length\n          ? "请联系管理员开通权限"\n          : `${len === allLen ? "全部" : `${len}/${allLen}项`}${title}`\n      }\n      disabled={!options.length}\n      options={[]}\n      open={false}\n      showArrow\n      onClick={onClickSelect}\n    />\n  );\n};\n\nexport default TreeSelect;\n'},{fileName:"TreeSelect.module.scss",code:'$space: 24px;\n$border_light: #d9d9d9;\n$border_dark: #868686;\n\n@mixin modalDefault() {\n  .ant-modal-header {\n    padding-top: 18px;\n    padding-bottom: 0;\n    border-bottom: 0;\n  }\n  .ant-modal-body {\n    padding: $space;\n  }\n  .ant-modal-footer {\n    padding: $space;\n    padding-top: 0;\n    border-top: 0;\n  }\n  .ant-btn + .ant-btn:not(.ant-dropdown-trigger) {\n    margin-left: 16px;\n  }\n}\n\n.modal {\n  @include modalDefault();\n\n  .modal_title {\n    display: flex;\n    align-items: center;\n    height: 30px;\n    padding-left: 37px;\n    font-weight: 500;\n    font-size: 18px;\n    line-height: 1;\n    background-image: url("../../../../../../../images/plan_icon.png");\n    background-repeat: no-repeat;\n    background-size: 30px 30px;\n  }\n\n  .modal_body {\n    display: flex;\n    width: 100%;\n    height: 328px;\n    overflow: hidden;\n    border: 1px solid $border_light;\n    border-radius: 4px;\n\n    .treebox,\n    .choosebox {\n      display: flex;\n      flex: 1;\n      flex-direction: column;\n      padding: 16px 0;\n      overflow: hidden;\n    }\n    .treebox {\n      border-right: 1px solid $border_light;\n    }\n    .box_header {\n      height: 32px;\n      margin-bottom: 8px;\n      padding: 0 16px;\n    }\n    .box_content {\n      flex: 1;\n      padding: 0 16px;\n      overflow-y: auto;\n    }\n    .choosebox {\n      .box_header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n    }\n    .chooseList {\n      margin: 0;\n      padding: 0;\n      color: #595959;\n      list-style: none;\n\n      > li {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        margin-top: 8px;\n\n        .chooseName {\n          flex: 1;\n        }\n      }\n    }\n    .close {\n      width: 16px;\n      height: 16px;\n      color: #bfbfbf;\n    }\n    .clear {\n      color: #8c8c8c;\n      cursor: pointer;\n    }\n  }\n\n  .foot {\n    width: 80px;\n    font-weight: 500;\n    font-size: 12px;\n    border-radius: 5px;\n  }\n\n  .search_act {\n    color: #18a0fb;\n  }\n}\n\nhtml[data-type-color="dark"] {\n  .modal {\n    .ant-btn-primary {\n      background: #18a0fb !important;\n    }\n\n    @include modalDefault();\n\n    .modal_title {\n      background-image: url("../../../../../../../images/plan_icon_dark.png");\n    }\n\n    .modal_body {\n      border-color: $border_dark;\n\n      .treebox {\n        border-color: $border_dark;\n      }\n\n      .chooseList {\n        color: #fff;\n      }\n      .close {\n        color: #d8d8d8;\n      }\n      .clear {\n        color: #fff;\n      }\n    }\n  }\n}\n'},{fileName:"TreeSelect.modal.jsx",code:'\n/**\n * title: 顶部名称\n * value: 选中值\n * treeData: 树形结构\n */\n\nimport React from "react";\nimport { Modal, Checkbox, Tree, Input } from "antd";\nimport TRNotification from "./noctification";\nimport { CloseOutlined, SearchOutlined } from "@ant-design/icons";\nimport _ from "lodash";\nimport styles from "./index.module.scss";\n\nclass ModalComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    const { treeData = [] } = props;\n\n    this.state = {\n      visible: true,\n      checkAll: false,\n      indeterminate: false,\n      autoExpandParent: true,\n      checkedKeys: [],\n      checkedNodes: [],\n      expandedKeys: [],\n      expandedValue: treeData,\n      searchValue: "",\n    };\n    this.deepLv = 1; // 最深叶子等级\n    this.treeDataMap = this._tree2map(treeData, [], null, 1);\n    this.treeData = treeData;\n    this.leafNodes = this.treeDataMap.filter((x) => x.lv === this.deepLv);\n\n    this._onSearch = this._onSearch.bind(this); // 搜索\n    this._onChangeAll = this._onChangeAll.bind(this); // 全选\n    this._onClearAll = this._onClearAll.bind(this); // 清空\n    this._onCheckTree = this._onCheckTree.bind(this); // 树选择\n    this._onExpandTree = this._onExpandTree.bind(this); // 树展开\n    this._onCancel = this._onCancel.bind(this); // 取消\n    this._onOk = this._onOk.bind(this); // 提交\n  }\n\n  componentDidMount() {\n    this._onCheckTree(this.props.value);\n  }\n\n  isCheckAll = (checkedNodes, expandedValue) => {\n    let checkAll = false;\n    let indeterminate = false;\n    const currentLeafArr = [];\n    const currentCheck = [];\n\n    const recursion = (treeData) => {\n      for (let i = 0; i < treeData.length; i++) {\n        const node = treeData[i];\n        if (node.children && node.children.length > 0) {\n          recursion(node.children);\n        } else {\n          currentLeafArr.push(node.key);\n          const item = _.find(checkedNodes, (n) => n.key === node.key);\n          if (item) {\n            currentCheck.push(item);\n          }\n        }\n      }\n    };\n    recursion(expandedValue ? expandedValue : this.state.expandedValue);\n\n    if (currentCheck.length >= currentLeafArr.length) {\n      checkAll = true;\n    }\n\n    if (\n      currentCheck.length > 0 &&\n      currentCheck.length < currentLeafArr.length\n    ) {\n      indeterminate = true;\n    }\n    return { checkAll, indeterminate };\n  };\n\n  getAllSubset = (arr) => {\n    const allSubset = [];\n    const recursion = (treeData) => {\n      if (treeData && treeData.length > 0) {\n        for (let i = 0; i < treeData.length; i++) {\n          const node = treeData[i];\n          if (node.children && node.children.length > 0) {\n            recursion(node.children);\n          } else {\n            // 与下面保持一致\n            const newNode = {\n              ...node,\n              key: node.key || node.value,\n              title: node.title || node.label,\n            };\n            allSubset.push(newNode);\n          }\n        }\n      }\n    };\n    recursion(arr);\n    return allSubset;\n  };\n\n  searchTree = (tree, value) => {\n    let result = [];\n    let addedKeys = new Set(); // 用于跟踪已经添加的节点key\n\n    function recursiveSearch(nodes) {\n      nodes.forEach((node) => {\n        if (node.title.indexOf(value) > -1) {\n          // 检查父节点是否已在结果集中\n          if (!addedKeys.has(node.key) && !addedKeys.has(node.parentKey)) {\n            result.push(node);\n            addedKeys.add(node.key);\n          }\n        }\n        if (node.children) {\n          recursiveSearch(node.children);\n        }\n      });\n    }\n\n    recursiveSearch(tree);\n    return result;\n  };\n\n  _tree2map = (tree = [], list = [], parentKey = null, lv = 1) => {\n    // 降维,key要唯一\n    if (lv > this.deepLv) this.deepLv = lv;\n    for (let i = 0; i < tree.length; i++) {\n      const node = tree[i];\n      // 取值处理，可以继续添加\n      const title = node.title || node.label;\n      const key = node.key || node.value;\n      node.key = key;\n      node.title = title;\n      node.parentKey = parentKey;\n      node.lv = lv;\n      list.push({\n        key,\n        title,\n        parentKey,\n        lv,\n      });\n      if (node.children?.length) {\n        this._tree2map(node.children, list, node.key, lv + 1);\n      }\n    }\n\n    return list;\n  };\n\n  _isChinese = (s) => {\n    // 中文全匹配\n    var ret = true;\n    for (var i = 0; i < s.length; i++) ret = ret && s.charCodeAt(i) >= 10000;\n    return ret;\n  };\n\n  _onSearch = (e) => {\n    let expandedKeys = [];\n    let expandedValue = [];\n    const { value } = e.target;\n    if (!value) {\n      expandedValue = this.treeData;\n    }\n    if (value && this._isChinese(value)) {\n      expandedKeys = this.treeDataMap\n        .map((x) => (x.title.indexOf(value) > -1 ? x.parentKey : null))\n        .filter((item, i, self) => item && self.indexOf(item) === i);\n\n      expandedValue = this.searchTree(this.treeData, value);\n    }\n    const { checkAll, indeterminate } = this.isCheckAll(\n      this.state.checkedNodes,\n      expandedValue\n    );\n    const checkedKeys = this.state.checkedNodes.map((x) => x.key);\n\n    this.setState({\n      checkAll,\n      indeterminate,\n      expandedKeys,\n      expandedValue,\n      searchValue: value,\n      autoExpandParent: true,\n      checkedKeys,\n    });\n  };\n\n  _onChangeAll = (e) => {\n    const checkAll = e.target.checked;\n    let checkedNodes = this.state.checkedNodes;\n    let checkedKeys = [];\n    const allSubset = this.getAllSubset([...this.state.expandedValue]);\n    let indeterminate = false;\n    if (checkAll) {\n      checkedNodes = _.uniqBy(allSubset.concat(checkedNodes), "key");\n      checkedKeys = checkedNodes.map((x) => x.value);\n    } else {\n      allSubset.forEach((v) => {\n        _.remove(checkedNodes, (n) => n.key === v.key);\n      });\n      checkedKeys = checkedNodes.map((x) => x.value);\n    }\n\n    this.setState({\n      checkAll,\n      checkedKeys,\n      checkedNodes,\n      indeterminate,\n    });\n  };\n\n  _onClearAll = () => {\n    this.setState({\n      checkAll: false,\n      indeterminate: false,\n      checkedKeys: [],\n      checkedNodes: [],\n      expandedKeys: [],\n    });\n  };\n\n  _onCheckTree = (val, e) => {\n    val = [...val, ...this.state.checkedKeys];\n    val = _.uniq(val);\n    if (e && !e.checked) {\n      const currentClick = e.node;\n      if (currentClick.children && currentClick.children.length > 0) {\n        currentClick.children.forEach((chil) => {\n          _.remove(val, (v) => v === chil.key);\n        });\n      }\n      _.remove(val, (v) => v === currentClick.key);\n    }\n\n    const checkedNodes = this.leafNodes.filter((x) => val.includes(x.key)),\n      checkedKeys = checkedNodes.map((x) => x.key);\n    const { checkAll, indeterminate } = this.isCheckAll(checkedNodes);\n\n    this.setState({\n      checkedKeys,\n      checkedNodes,\n      checkAll,\n      indeterminate,\n    });\n  };\n\n  _onExpandTree = (expandedKeys) => {\n    this.setState({\n      expandedKeys,\n      autoExpandParent: false,\n    });\n  };\n\n  _onRemove = (idx) => {\n    let { checkedKeys, checkedNodes, indeterminate, checkAll } = this.state;\n    checkedNodes.splice(idx, 1);\n    checkedKeys = checkedNodes.map((x) => x.key);\n    if (!checkedKeys.length) {\n      indeterminate = false;\n      checkAll = false;\n    }\n    this.setState({\n      checkAll,\n      checkedKeys,\n      checkedNodes,\n      indeterminate,\n    });\n  };\n\n  _onCancel = () => {\n    this.setState({\n      visible: false,\n    });\n    this.props.onPress({ index: 0 });\n  };\n\n  _onOk = () => {\n    const { checkedKeys, checkedNodes } = this.state;\n    this.setState({\n      visible: false,\n    });\n    this.props.onPress({\n      index: 1,\n      checkedKeys,\n      checkedNodes,\n    });\n  };\n  orderSort(obj1, obj2) {\n    var a = obj1.title;\n    var b = obj2.title;\n    if (b > a) {\n      return -1;\n    } else if (b < a) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n  render() {\n    const { title = "示例窗口", disabled = false } = this.props;\n    const {\n      visible,\n      checkAll,\n      indeterminate,\n      autoExpandParent,\n      checkedKeys = [],\n      checkedNodes = [],\n      expandedKeys = [],\n      searchValue = "",\n    } = this.state;\n\n    const loop = (data = []) =>\n      data.map((item) => {\n        const { lv, parentKey, key } = item;\n        const index = item.title.indexOf(searchValue);\n        const beforeStr = item.title.substr(0, index);\n        const afterStr = item.title.substr(index + searchValue.length);\n        const _title =\n          index > -1 ? (\n            <span>\n              {beforeStr}\n              <span className={styles.search_act}>{searchValue}</span>\n              {afterStr}\n            </span>\n          ) : (\n            <span>{item.title}</span>\n          );\n        if (item.children) {\n          return {\n            key,\n            title: _title,\n            lv,\n            parentKey,\n            children: loop(item.children),\n          };\n        }\n\n        return { key, title: _title, lv, parentKey };\n      });\n    return (\n      <Modal\n        width={580}\n        className={styles.modal}\n        visible={visible}\n        centered={true}\n        maskClosable={true}\n        title={\n          <div key=\'title\' className={styles.modal_title}>\n            {title}\n          </div>\n        }\n        cancelText={"取消"}\n        onCancel={this._onCancel}\n        okText={"提交"}\n        onOk={this._onOk}\n      >\n        <div className={styles.modal_body}>\n          <div className={styles.treebox}>\n            <div className={styles.box_header}>\n              <Input\n                placeholder=\'搜索\'\n                suffix={<SearchOutlined />}\n                allowClear={true}\n                onChange={this._onSearch}\n                disabled={disabled}\n              />\n            </div>\n            <div className={styles.box_content}>\n              <Checkbox\n                checked={checkAll}\n                indeterminate={indeterminate}\n                onChange={this._onChangeAll}\n                disabled={disabled}\n              >\n                全选\n              </Checkbox>\n              <Tree\n                treeData={loop(this.state.expandedValue)}\n                blockNode={true}\n                checkable={true}\n                checkedKeys={checkedKeys}\n                expandedKeys={expandedKeys}\n                autoExpandParent={autoExpandParent}\n                onExpand={this._onExpandTree}\n                onCheck={this._onCheckTree}\n                disabled={disabled}\n              />\n            </div>\n          </div>\n\n          <div className={styles.choosebox}>\n            <div className={styles.box_header}>\n              <div>{`已选${checkedNodes.length}项`}</div>\n              {!disabled && (\n                <div className={styles.clear} onClick={this._onClearAll}>\n                  清空\n                </div>\n              )}\n            </div>\n            <div className={styles.box_content}>\n              <ul className={styles.chooseList}>\n                {checkedNodes.sort(this.orderSort).map((item, idx) => {\n                  return (\n                    <li key={item.key}>\n                      <div className={styles.chooseName}>{item.title}</div>\n                      {!disabled && (\n                        <CloseOutlined\n                          className={styles.close}\n                          onClick={this._onRemove.bind(this, idx)}\n                        />\n                      )}\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nclass TRCheckboxModal {\n  __key__ = "";\n\n  show = (props) => {\n    return new Promise((resolve) => {\n      if (this.__key__ !== "") return;\n      this.__key__ = String(Date.now());\n      TRNotification.add({\n        key: this.__key__,\n        content: (\n          <ModalComponent\n            {...props}\n            onPress={(result) => {\n              TRNotification.remove(this.__key__);\n              this.__key__ = "";\n              resolve(result);\n            }}\n          />\n        ),\n        duration: null,\n      });\n    });\n  };\n\n  dismiss = () => {\n    if (this.__key__.length > 0) {\n      TRNotification.remove(this.__key__);\n      this.__key__ = "";\n    }\n  };\n}\n\nexport default new TRCheckboxModal();\n'},{fileName:"TreeSelect.notification.tsx",code:'\n/* （版本---"rc-notification": "4.4.0"） */\n\n// @ts-nocheck\nimport Notification from "rc-notification";\n\nclass TRNotificationSinge {\n  notification = null;\n  keyMap = new Map();\n  constructor() {\n    this.keys = [];\n    Notification.newInstance({}, (n) => (this.notification = n));\n  }\n\n  /**\n   * 添加方法\n   * @param key  唯一值\n   * @param content\n   * @param duration\n   * @param {function} dismiss 销毁方法\n   */\n  add({ key, content, duration = null, dismiss }) {\n    this.keyMap.set(key, dismiss);\n    this.notification.notice({\n      key,\n      content,\n      duration,\n    });\n  }\n  remove(key) {\n    this.notification.removeNotice(key);\n    this.keyMap.delete(key);\n  }\n\n  clear() {\n    this.keyMap.forEach((fuc, key) => {\n      fuc ? fuc() : this.remove(key);\n    });\n    this.keyMap.clear();\n  }\n}\n\nTRNotificationSinge.getInstance = (function () {\n  let instance;\n  return function () {\n    instance = instance ? instance : new TRNotificationSinge();\n    return instance;\n  };\n})();\n\nconst TRNotification = TRNotificationSinge.getInstance();\n\nexport default TRNotification;\n'}];var Dn=t(811),In=t(8676);class Fn{notification=null;keyMap=(()=>new Map)();constructor(){this.keys=[],In.A.newInstance({},(e=>this.notification=e))}add(e){let{key:n,content:t,duration:a=null,dismiss:l}=e;this.keyMap.set(n,l),this.notification.notice({key:n,content:t,duration:a})}remove(e){this.notification.removeNotice(e),this.keyMap.delete(e)}clear(){this.keyMap.forEach(((e,n)=>{e?e():this.remove(n)})),this.keyMap.clear()}}Fn.getInstance=function(){let e;return function(){return e=e||new Fn,e}}();const Tn=Fn.getInstance();var Mn=t(2877),Vn=t(7852),En=t(2543),Ln=t.n(En);const On="TreeSelect_modal__RA3WD",$n="TreeSelect_modal_title__1iJkY",Kn="TreeSelect_modal_body__6ZM8L",Bn="TreeSelect_treebox__hUQAp",Yn="TreeSelect_choosebox__1d2Gk",Hn="TreeSelect_box_header__npPGp",qn="TreeSelect_box_content__D7zpo",Wn="TreeSelect_chooseList__-PDwI",Un="TreeSelect_chooseName__EjF0Z",zn="TreeSelect_close__dDSzc",Gn="TreeSelect_clear__rwXuO",Zn="TreeSelect_search_act__zXmnz";class Qn extends a.Component{constructor(e){super(e);const{treeData:n=[]}=e;this.state={visible:!0,checkAll:!1,indeterminate:!1,autoExpandParent:!0,checkedKeys:[],checkedNodes:[],expandedKeys:[],expandedValue:n,searchValue:""},this.deepLv=1,this.treeDataMap=this._tree2map(n,[],null,1),this.treeData=n,this.leafNodes=this.treeDataMap.filter((e=>e.lv===this.deepLv)),this._onSearch=this._onSearch.bind(this),this._onChangeAll=this._onChangeAll.bind(this),this._onClearAll=this._onClearAll.bind(this),this._onCheckTree=this._onCheckTree.bind(this),this._onExpandTree=this._onExpandTree.bind(this),this._onCancel=this._onCancel.bind(this),this._onOk=this._onOk.bind(this)}componentDidMount(){this._onCheckTree(this.props.value)}isCheckAll=(e,n)=>{let t=!1,a=!1;const l=[],r=[],s=n=>{for(let t=0;t<n.length;t++){const a=n[t];if(a.children&&a.children.length>0)s(a.children);else{l.push(a.key);const n=Ln().find(e,(e=>e.key===a.key));n&&r.push(n)}}};return s(n||this.state.expandedValue),r.length>=l.length&&(t=!0),r.length>0&&r.length<l.length&&(a=!0),{checkAll:t,indeterminate:a}};getAllSubset=e=>{const n=[],t=e=>{if(e&&e.length>0)for(let a=0;a<e.length;a++){const l=e[a];if(l.children&&l.children.length>0)t(l.children);else{const e={...l,key:l.key||l.value,title:l.title||l.label};n.push(e)}}};return t(e),n};searchTree=(e,n)=>{let t=[],a=new Set;return function e(l){l.forEach((l=>{l.title.indexOf(n)>-1&&(a.has(l.key)||a.has(l.parentKey)||(t.push(l),a.add(l.key))),l.children&&e(l.children)}))}(e),t};_tree2map=(()=>{var e=this;return function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;l>e.deepLv&&(e.deepLv=l);for(let r=0;r<n.length;r++){const s=n[r],o=s.title||s.label,i=s.key||s.value;s.key=i,s.title=o,s.parentKey=a,s.lv=l,t.push({key:i,title:o,parentKey:a,lv:l}),s.children?.length&&e._tree2map(s.children,t,s.key,l+1)}return t}})();_isChinese=e=>{for(var n=!0,t=0;t<e.length;t++)n=n&&e.charCodeAt(t)>=1e4;return n};_onSearch=e=>{let n=[],t=[];const{value:a}=e.target;a||(t=this.treeData),a&&this._isChinese(a)&&(n=this.treeDataMap.map((e=>e.title.indexOf(a)>-1?e.parentKey:null)).filter(((e,n,t)=>e&&t.indexOf(e)===n)),t=this.searchTree(this.treeData,a));const{checkAll:l,indeterminate:r}=this.isCheckAll(this.state.checkedNodes,t),s=this.state.checkedNodes.map((e=>e.key));this.setState({checkAll:l,indeterminate:r,expandedKeys:n,expandedValue:t,searchValue:a,autoExpandParent:!0,checkedKeys:s})};_onChangeAll=e=>{const n=e.target.checked;let t=this.state.checkedNodes,a=[];const l=this.getAllSubset([...this.state.expandedValue]);n?(t=Ln().uniqBy(l.concat(t),"key"),a=t.map((e=>e.value))):(l.forEach((e=>{Ln().remove(t,(n=>n.key===e.key))})),a=t.map((e=>e.value))),this.setState({checkAll:n,checkedKeys:a,checkedNodes:t,indeterminate:!1})};_onClearAll=()=>{this.setState({checkAll:!1,indeterminate:!1,checkedKeys:[],checkedNodes:[],expandedKeys:[]})};_onCheckTree=(e,n)=>{if(e=[...e,...this.state.checkedKeys],e=Ln().uniq(e),n&&!n.checked){const t=n.node;t.children&&t.children.length>0&&t.children.forEach((n=>{Ln().remove(e,(e=>e===n.key))})),Ln().remove(e,(e=>e===t.key))}const t=this.leafNodes.filter((n=>e.includes(n.key))),a=t.map((e=>e.key)),{checkAll:l,indeterminate:r}=this.isCheckAll(t);this.setState({checkedKeys:a,checkedNodes:t,checkAll:l,indeterminate:r})};_onExpandTree=e=>{this.setState({expandedKeys:e,autoExpandParent:!1})};_onRemove=e=>{let{checkedKeys:n,checkedNodes:t,indeterminate:a,checkAll:l}=this.state;t.splice(e,1),n=t.map((e=>e.key)),n.length||(a=!1,l=!1),this.setState({checkAll:l,checkedKeys:n,checkedNodes:t,indeterminate:a})};_onCancel=()=>{this.setState({visible:!1}),this.props.onPress({index:0})};_onOk=()=>{const{checkedKeys:e,checkedNodes:n}=this.state;this.setState({visible:!1}),this.props.onPress({index:1,checkedKeys:e,checkedNodes:n})};orderSort(e,n){var t=e.title,a=n.title;return a>t?-1:a<t?1:0}render(){const{title:e="示例窗口",disabled:n=!1}=this.props,{visible:t,checkAll:a,indeterminate:l,autoExpandParent:r,checkedKeys:o=[],checkedNodes:i=[],expandedKeys:d=[],searchValue:c=""}=this.state,u=function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).map((e=>{const{lv:n,parentKey:t,key:a}=e,l=e.title.indexOf(c),r=e.title.substr(0,l),o=e.title.substr(l+c.length),i=l>-1?(0,s.jsxs)("span",{children:[r,(0,s.jsx)("span",{className:Zn,children:c}),o]}):(0,s.jsx)("span",{children:e.title});return e.children?{key:a,title:i,lv:n,parentKey:t,children:u(e.children)}:{key:a,title:i,lv:n,parentKey:t}}))};return(0,s.jsx)(v.A,{width:580,className:On,visible:t,centered:!0,maskClosable:!0,title:(0,s.jsx)("div",{className:$n,children:e},"title"),cancelText:"取消",onCancel:this._onCancel,okText:"提交",onOk:this._onOk,children:(0,s.jsxs)("div",{className:Kn,children:[(0,s.jsxs)("div",{className:Bn,children:[(0,s.jsx)("div",{className:Hn,children:(0,s.jsx)(ze.A,{placeholder:"搜索",suffix:(0,s.jsx)(Mn.A,{}),allowClear:!0,onChange:this._onSearch,disabled:n})}),(0,s.jsxs)("div",{className:qn,children:[(0,s.jsx)(pe.A,{checked:a,indeterminate:l,onChange:this._onChangeAll,disabled:n,children:"全选"}),(0,s.jsx)(Dn.A,{treeData:u(this.state.expandedValue),blockNode:!0,checkable:!0,checkedKeys:o,expandedKeys:d,autoExpandParent:r,onExpand:this._onExpandTree,onCheck:this._onCheckTree,disabled:n})]})]}),(0,s.jsxs)("div",{className:Yn,children:[(0,s.jsxs)("div",{className:Hn,children:[(0,s.jsx)("div",{children:`已选${i.length}项`}),!n&&(0,s.jsx)("div",{className:Gn,onClick:this._onClearAll,children:"清空"})]}),(0,s.jsx)("div",{className:qn,children:(0,s.jsx)("ul",{className:Wn,children:i.sort(this.orderSort).map(((e,t)=>(0,s.jsxs)("li",{children:[(0,s.jsx)("div",{className:Un,children:e.title}),!n&&(0,s.jsx)(Vn.A,{className:zn,onClick:this._onRemove.bind(this,t)})]},e.key)))})})]})]})})}}const Jn=new class{__key__="";show=e=>new Promise((n=>{""===this.__key__&&(this.__key__=String(Date.now()),Tn.add({key:this.__key__,content:(0,s.jsx)(Qn,{...e,onPress:e=>{Tn.remove(this.__key__),this.__key__="",n(e)}}),duration:null}))}));dismiss=()=>{this.__key__.length>0&&(Tn.remove(this.__key__),this.__key__="")}},Xn=function(){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).map((n=>{n?.children?.length>0?Xn(n.children,e):e.push(n)})),e},et=e=>{let{defaultValue:n=[],onChange:t=e=>{},options:a=[],title:l="示例测试",width:r=200}=e;const o=Xn(a,[]),i=n.length,d=o.length;return(0,s.jsx)(en.A,{style:{width:r},value:a.length?`${i===d?"全部":`${i}/${d}项`}${l}`:"请联系管理员开通权限",disabled:!a.length,options:[],open:!1,showArrow:!0,onClick:async()=>{const{index:e,checkedKeys:r}=await Jn.show({title:l,value:n,treeData:a});1===e&&r.length&&t(r)}})},nt=[{id:999,label:"四川测试公司",value:"sichuan",type:null,children:[{id:1,label:"成都市",value:"chengdu",type:null,children:[{id:1,label:"示例1",value:"1",type:null,children:[{id:1,label:"示例1-1",value:"2",type:3,children:null}]}]},{id:2,label:"眉山市",value:"meishan",type:null,children:[{id:1,label:"示例2",value:"3",type:null,children:[{id:1,label:"示例2-1",value:"4",type:3,children:null}]}]},{id:3,label:"乐山市",value:"leshan",type:null,children:[{id:1,label:"示例3",value:"5",type:null,children:[{id:1,label:"示例3-1",value:"6",type:3,children:null}]}]}]},{id:1,label:"云南测试公司",value:"yunnan",type:null,children:[{id:1,label:"昆明市",value:"kunming",type:null,children:[{id:1,label:"示例1",value:"7",type:null,children:[{id:1,label:"示例1-2",value:"8",type:3,children:null}]}]},{id:2,label:"大理市",value:"dali",type:null,children:[{id:1,label:"示例2",value:"9",type:null,children:[{id:1,label:"示例2-1",value:"10",type:3,children:null}]}]}]}],tt="SelectBoxSample_container__PTinc",at=()=>{const[e]=Ce.A.useForm();return(0,s.jsx)(Ce.A,{form:e,labelAlign:"right",className:tt,children:(0,s.jsx)(_e.A,{gutter:16,children:(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,s.jsx)(et,{title:"示例测试",defaultValue:["4"],options:nt||[],onChange:()=>{}})})})})})},lt=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col } from "antd";\nimport TreeSelect from "./components/TreeSelect";\nimport { mock } from "./components/TreeSelect/mock";\nimport styles from "./index.module.scss";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign="right" className={styles.container}>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label="字段标题" name="field1">\n            <TreeSelect\n              title="示例测试"\n              defaultValue={["4"]}\n              options={mock || []}\n              onChange={() => {}}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;\n'},{fileName:"mock.ts",code:'export interface MockItem {\n  id: number;\n  label: string;\n  value: string;\n  type: number | null;\n  children: MockItem[] | null;\n}\n\nexport const mock: MockItem[] = [\n  {\n    id: 999,\n    label: "四川测试公司",\n    value: "sichuan",\n    type: null,\n    children: [\n      {\n        id: 1,\n        label: "成都市",\n        value: "chengdu",\n        type: null,\n        children: [\n          {\n            id: 1,\n            label: "示例1",\n            value: "1",\n            type: null,\n            children: [\n              {\n                id: 1,\n                label: "示例1-1",\n                value: "2",\n                type: 3,\n                children: null,\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 2,\n        label: "眉山市",\n        value: "meishan",\n        type: null,\n        children: [\n          {\n            id: 1,\n            label: "示例2",\n            value: "3",\n            type: null,\n            children: [\n              {\n                id: 1,\n                label: "示例2-1",\n                value: "4",\n                type: 3,\n                children: null,\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 3,\n        label: "乐山市",\n        value: "leshan",\n        type: null,\n        children: [\n          {\n            id: 1,\n            label: "示例3",\n            value: "5",\n            type: null,\n            children: [\n              {\n                id: 1,\n                label: "示例3-1",\n                value: "6",\n                type: 3,\n                children: null,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 1,\n    label: "云南测试公司",\n    value: "yunnan",\n    type: null,\n    children: [\n      {\n        id: 1,\n        label: "昆明市",\n        value: "kunming",\n        type: null,\n        children: [\n          {\n            id: 1,\n            label: "示例1",\n            value: "7",\n            type: null,\n            children: [\n              {\n                id: 1,\n                label: "示例1-2",\n                value: "8",\n                type: 3,\n                children: null,\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 2,\n        label: "大理市",\n        value: "dali",\n        type: null,\n        children: [\n          {\n            id: 1,\n            label: "示例2",\n            value: "9",\n            type: null,\n            children: [\n              {\n                id: 1,\n                label: "示例2-1",\n                value: "10",\n                type: 3,\n                children: null,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n];\n'}].concat(Rn),rt=()=>(0,s.jsx)(me,{title:"下拉选择框的复合组件",codeParams:lt,children:(0,s.jsx)(at,{})});var st=t(2629);const ot="WithValidateMessage_container__w-KWx",it="WithValidateMessage_componentBox__FXDFV",dt="WithValidateMessage_messageBox__Mc3qF",ct=e=>{const{form:n,nevervalidate:t=!1,id:l="","aria-invalid":r,children:o,className:i,style:d={},...c}=e,u=(0,a.useMemo)((()=>{let e="";if(!t&&n&&l&&"true"===r){const t=l.split("_");let a=[];a=t.length>=3?n.getFieldError([t[0],Number(t[1]),t[2]]):n.getFieldError(t[0]),e=a[0]}return e}),[n,t,l,r]);return(0,s.jsxs)("div",{className:`${ot}${i?` ${i}`:""}`,style:d,children:[(0,s.jsx)("div",{className:it,style:{width:t?"100%":"calc(100% - 28px)"},children:o?a.cloneElement(o,{...c,"aria-invalid":r,id:l}):null}),!t&&!!u&&(0,s.jsx)("div",{className:dt,children:(0,s.jsx)(x.A,{title:u,children:(0,s.jsx)(st.A,{})})})]})},ut=[{fileName:"WithValidateMessage.tsx",code:'/**\n * 用于显示自定义校验信息的FormItem组件的包装组件(注意：如果子组件需要传onChange属性，则必须由该包装组件进行传递，不能写在子组件里；要在外层组件中将.ant-form-item-explain类样式的display属性覆盖为none)\n */\nimport React, { useMemo, ReactElement } from "react";\nimport { Tooltip, type FormInstance } from "antd";\nimport { ExclamationCircleOutlined } from "@ant-design/icons";\nimport styles from "./index.module.scss";\n\ntype WithValidateMessageProps = {\n  form?: FormInstance | null; // form对象，nevervalidate为true时可以不传\n  nevervalidate?: boolean; // 是否绝对不会进行校验，该值为true时，组件后面不会有校验信息的图标，也不会占用空间\n  id?: string; // Form.Item组件自动传入\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  children?: ReactElement | null; // children必须是支持value和onChange属性的组件\n  className?: string;\n  style?: Record<string, any>;\n} & { [key in string]: any };\n\nconst WithValidateMessage = (props: WithValidateMessageProps) => {\n  const {\n    form,\n    nevervalidate = false,\n    id = "",\n    ["aria-invalid"]: invalid,\n    children,\n    className,\n    style = {},\n    ...restProps\n  } = props;\n\n  // 获取校验信息\n  const errorMessage = useMemo(() => {\n    let str = "";\n    if (!nevervalidate && form && id && invalid === "true") {\n      const namePath = id.split("_");\n      let errorList = [];\n      // 兼容Form.List\n      if (namePath.length >= 3) {\n        errorList = form.getFieldError([\n          namePath[0],\n          Number(namePath[1]),\n          namePath[2],\n        ]);\n      } else {\n        errorList = form.getFieldError(namePath[0]);\n      }\n      str = errorList[0];\n    }\n    return str;\n  }, [form, nevervalidate, id, invalid]);\n\n  return (\n    <div\n      className={`${styles.container}${className ? ` ${className}` : ""}`}\n      style={style}\n    >\n      <div\n        className={styles.componentBox}\n        style={{ width: nevervalidate ? "100%" : "calc(100% - 28px)" }}\n      >\n        {children\n          ? React.cloneElement(children, {\n              ...restProps,\n              "aria-invalid": invalid,\n              id,\n            })\n          : null}\n      </div>\n      {!nevervalidate && !!errorMessage && (\n        <div className={styles.messageBox}>\n          <Tooltip title={errorMessage}>\n            <ExclamationCircleOutlined />\n          </Tooltip>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WithValidateMessage;'},{fileName:"WithValidateMessage.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  $messageWidth: 26px;\n  .componentBox {\n    display: flex;\n    align-items: center;\n  }\n  .messageBox {\n    width: $messageWidth;\n    height: $messageWidth;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 3px;\n    margin-left: 2px;\n    svg {\n      width: 18px;\n      height: 18px;\n      path {\n        fill: $globalRedColor;\n      }\n    }\n  }\n}"}],mt=/^([\w+-.%]+@[\w-.]+\.[A-Za-z]{2,4})(;[\w+-.]+@[\w-.]+\.[A-Za-z]{2,4})*$/,ht=[{required:!0,message:"必填项"}],pt=[{required:!0,message:"请选择"}],bt=[{validator:(e,n)=>n&&n.length>0&&(n[0]||0===n[0]||n[1])?(n[0]||0===n[0])&&n[1]?Promise.resolve():Promise.reject("两个都必填"):Promise.reject("必填项")}],ft=[{validator:(e,n)=>{if(!(n&&n.length>0))return Promise.reject("邮箱必填");{let e=!1;for(let t=0,a=n.length;t<a;t++){const a=n[t];if(!(a&&a[0]&&a[0].trim()))return Promise.reject("邮箱必填");mt.test(a[0].trim())||(e=!0)}if(e)return Promise.reject("邮箱格式不正确")}return Promise.resolve()}}],xt=()=>{const[e]=Ce.A.useForm();return(0,s.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,s.jsxs)(_e.A,{gutter:16,children:[(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",rules:ht,children:(0,s.jsx)(ct,{form:e,children:(0,s.jsx)(ze.A,{})})})}),(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",rules:pt,children:(0,s.jsx)(ct,{form:e,children:(0,s.jsx)(en.A,{options:[{label:"A",value:"a"},{label:"B",value:"b"}]})})})}),(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field3",rules:bt,required:!0,validateStatus:"",children:(0,s.jsx)(ct,{form:e,children:(0,s.jsx)(un,{options:[{name:"工作日",id:"workingDay"},{name:"自然日",id:"naturalDay"}],inputNumberProps:{addonAfter:"个"},selectProps:{fieldNames:{label:"name",value:"id"},allowClear:!0},setInputNumberStatus:e=>!e||!e[0]&&0!==e[0]?"error":"",setSelectStatus:e=>e&&e[1]?"":"error"})})})}),(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"字段标题",name:"field4",rules:ht,children:(0,s.jsx)(ct,{form:e,children:(0,s.jsx)(Je,{checkboxLabel:"复选框标题"})})})}),(0,s.jsx)(Ae.A,{span:12,children:(0,s.jsx)(Ce.A.Item,{label:"邮箱",name:"field5",rules:ft,required:!0,validateStatus:"",children:(0,s.jsx)(ct,{form:e,children:(0,s.jsx)(_n,{maxRows:5,children:(0,s.jsx)(Je,{checkboxLabel:"是否同步到平台",setInputStatus:e=>e&&e[0]&&e[0].trim()&&mt.test(e[0].trim())?"":"error"})})})})}),(0,s.jsx)(Ae.A,{span:24,style:{display:"flex",justifyContent:"flex-end",paddingRight:"30px"},children:(0,s.jsx)(M.Ay,{type:"primary",onClick:async()=>{try{const n=await(e?.validateFields());console.log("values:",n)}catch(e){}},children:"提交"})})]})})},vt="WithValidateMessageSample_container__z3ia8",gt=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col, Input, Select, Button } from "antd";\nimport WithValidateMessage from "@/components/formItems/WithValidateMessage";\nimport CanAddMultiple from "@/components/formItems/CanAddMultiple";\nimport InputAndCheckbox from "@/components/formItems/InputAndCheckbox";\nimport type { Value as InputAndCheckboxValue } from "@/components/formItems/InputAndCheckbox";\nimport InputNumberAndSelect from "@/components/formItems/InputNumberAndSelect";\nimport type { Value as InputNumberAndSelectValue } from "@/components/formItems/InputNumberAndSelect";\n\nconst EMAIL_PATTERN =\n  /^([w+-.%]+@[w-.]+.[A-Za-z]{2,4})(;[w+-.]+@[w-.]+.[A-Za-z]{2,4})*$/;\n\nconst REQUIRED_FORM_ITEM_RULES = [{ required: true, message: "必填项" }];\nconst CUSTOM_SELECT_RULES = [{ required: true, message: "请选择" }];\nconst INPUTNUMBER_SELECT_RULES = [\n  {\n    validator: (_: Record<string, any>, value: InputNumberAndSelectValue) => {\n      if (value && value.length > 0) {\n        if (!value[0] && value[0] !== 0 && !value[1]) {\n          return Promise.reject("必填项");\n        } else {\n          if (!value[0] && value[0] !== 0) {\n            return Promise.reject("两个都必填");\n          }\n          if (!value[1]) {\n            return Promise.reject("两个都必填");\n          }\n        }\n      } else {\n        return Promise.reject("必填项");\n      }\n      return Promise.resolve();\n    },\n  },\n];\nconst MULTIPLE_EMAIL_RULES = [\n  {\n    validator: (\n      _: Record<string, any>,\n      value: ([string | undefined, boolean | undefined] | undefined)[]\n    ) => {\n      if (value && value.length > 0) {\n        let hasBadValue = false;\n        for (let i = 0, l = value.length; i < l; i++) {\n          const item = value[i];\n          if (!item || !item[0] || !item[0].trim()) {\n            return Promise.reject("邮箱必填");\n          } else if (!EMAIL_PATTERN.test(item[0].trim())) {\n            hasBadValue = true;\n          }\n        }\n        if (hasBadValue) {\n          return Promise.reject("邮箱格式不正确");\n        }\n      } else {\n        return Promise.reject("邮箱必填");\n      }\n      return Promise.resolve();\n    },\n  },\n];\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  // 点击提交\n  const onSubmit = async () => {\n    try {\n      const values = await form?.validateFields();\n      console.log("values:", values);\n    } catch (err) {}\n  };\n\n  return (\n    <Form form={form} labelAlign=\'right\'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item\n            label=\'字段标题\'\n            name=\'field1\'\n            rules={REQUIRED_FORM_ITEM_RULES}\n          >\n            <WithValidateMessage form={form}>\n              <Input />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\' rules={CUSTOM_SELECT_RULES}>\n            <WithValidateMessage form={form}>\n              <Select\n                options={[\n                  { label: "A", value: "a" },\n                  { label: "B", value: "b" },\n                ]}\n              />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\'字段标题\'\n            name=\'field3\'\n            rules={INPUTNUMBER_SELECT_RULES}\n            required\n            validateStatus=\'\'\n          >\n            <WithValidateMessage form={form}>\n              <InputNumberAndSelect\n                options={[\n                  { name: "工作日", id: "workingDay" },\n                  { name: "自然日", id: "naturalDay" },\n                ]}\n                inputNumberProps={{ addonAfter: "个" }}\n                selectProps={{\n                  fieldNames: { label: "name", value: "id" },\n                  allowClear: true,\n                }}\n                setInputNumberStatus={(\n                  value: InputNumberAndSelectValue | undefined\n                ) => {\n                  if (!value || (!value[0] && value[0] !== 0)) {\n                    return "error";\n                  }\n                  return "";\n                }}\n                setSelectStatus={(\n                  value: InputNumberAndSelectValue | undefined\n                ) => {\n                  if (!value || !value[1]) {\n                    return "error";\n                  }\n                  return "";\n                }}\n              />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\'字段标题\'\n            name=\'field4\'\n            rules={REQUIRED_FORM_ITEM_RULES}\n          >\n            <WithValidateMessage form={form}>\n              <InputAndCheckbox checkboxLabel=\'复选框标题\' />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\'邮箱\'\n            name=\'field5\'\n            rules={MULTIPLE_EMAIL_RULES}\n            required\n            validateStatus=\'\'\n          >\n            <WithValidateMessage form={form}>\n              <CanAddMultiple maxRows={5}>\n                <InputAndCheckbox\n                  checkboxLabel=\'是否同步到平台\'\n                  setInputStatus={(\n                    value: InputAndCheckboxValue | undefined\n                  ) => {\n                    if (\n                      !value ||\n                      !value[0] ||\n                      !value[0].trim() ||\n                      !EMAIL_PATTERN.test(value[0].trim())\n                    ) {\n                      return "error";\n                    }\n                    return "";\n                  }}\n                />\n              </CanAddMultiple>\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col\n          span={24}\n          style={{\n            display: "flex",\n            justifyContent: "flex-end",\n            paddingRight: "30px",\n          }}\n        >\n          <Button type=\'primary\' onClick={onSubmit}>\n            提交\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat(ut),yt=()=>(0,s.jsx)(me,{className:vt,title:"用于显示自定义校验信息的FormItem组件的包装组件",codeParams:gt,children:(0,s.jsx)(xt,{})}),kt="FormItemSection_container__aQMvM",Ct="FormItemSection_sample__7pqvq",_t=[(0,s.jsx)(we,{}),(0,s.jsx)(Ee,{}),(0,s.jsx)(Ue,{}),(0,s.jsx)(rn,{}),(0,s.jsx)(bn,{}),(0,s.jsx)(Nn,{}),(0,s.jsx)(rt,{}),(0,s.jsx)(yt,{})],At=()=>(0,s.jsx)("div",{className:kt,children:_t.map(((e,n)=>(0,s.jsx)("div",{className:Ct,children:e},n)))});var Pt=t(401),jt=t(5059),St=t(1475);const wt="DraggableFormListContext_draggableRow__nIx6b",Nt="DraggableFormListContext_defaultBtn__JLXQk",Rt="DraggableFormListContext_disabled__tQWcQ",Dt="DraggableFormListContext_removeBtn__+PPAc",It=e=>{const{quote:n,index:t,children:a,remove:l,onToTop:r,disabled:o=!1}=e;return(0,s.jsx)(Pt.sx,{draggableId:n.key.toString(),index:t,children:e=>(0,s.jsx)("div",{ref:e.innerRef,...e.draggableProps,children:(0,s.jsxs)("div",{className:wt,children:[(0,s.jsx)("div",{...o?{}:e.dragHandleProps,className:`${Nt}${o?` ${Rt}`:""}`,style:{marginRight:"8px"},children:(0,s.jsx)(jt.A,{})}),a,l&&(0,s.jsx)("div",{className:`${Dt}${o?` ${Rt}`:""}`,style:{marginLeft:"10px"},onClick:()=>{o||l(t)},children:(0,s.jsx)(xn.A,{})}),r&&(0,s.jsx)("div",{className:`${Nt}${o?` ${Rt}`:""}`,style:{marginLeft:"10px"},onClick:()=>{0!==t&&(o||r(t))},children:(0,s.jsx)(St.A,{})})]})})})},Ft=e=>{const{droppableId:n="",fields:t,move:l,children:r,remove:o,showToTop:i=!1,disabled:d}=e,c=fe(d),u=(0,a.useCallback)((e=>{l(e,0)}),[]);return(0,s.jsx)(Pt.JY,{onDragEnd:e=>{const{source:n,destination:t}=e;if(n&&t&&n.droppableId==t.droppableId&&n.index!==t.index){const e=n.index,a=t.index;l(e,a)}},children:(0,s.jsx)(Pt.gL,{droppableId:n,children:e=>(0,s.jsx)("div",{ref:e.innerRef,...e.droppableProps,children:t.map(((e,n)=>{const{key:t,...a}=e;return(0,s.jsx)(It,{quote:e,index:n,remove:o,onToTop:i?u:null,disabled:c,children:r(a,n)},t)}))})})})},Tt=[{fileName:"DraggableFormListContext.tsx",code:'/**\n * 可上下拖拽排序的Form.List的包装组件\n */\nimport React, { useCallback, ReactNode } from "react";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport { DragDropContext, Droppable, DropResult } from "react-beautiful-dnd";\nimport type { DroppableProvided } from "react-beautiful-dnd";\nimport DraggableFormListRow from "./DraggableFormListRow";\n\ntype DraggableFormListContextProps = {\n  droppableId: string;\n  fields: Record<string, any>[];\n  move: (from: number, to: number) => void;\n  children: (quote: Record<string, any>, index?: number) => ReactNode;\n  remove?: (index: number | number[]) => void;\n  showToTop?: boolean; // 是否显示置顶按钮\n  disabled?: boolean;\n};\n\nconst DraggableFormListContext = (props: DraggableFormListContextProps) => {\n  const {\n    droppableId = "",\n    fields,\n    move,\n    children,\n    remove,\n    showToTop = false,\n    disabled: selfDisabled,\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const handleDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n    if (\n      source &&\n      destination &&\n      source.droppableId == destination.droppableId &&\n      source.index !== destination.index\n    ) {\n      const from = source.index;\n      const to = destination.index;\n      move(from, to);\n    }\n  };\n\n  const handleToTop = useCallback((index: number) => {\n    move(index, 0);\n  }, []);\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <Droppable droppableId={droppableId}>\n        {(provided: DroppableProvided) => (\n          <div ref={provided.innerRef} {...provided.droppableProps}>\n            {fields.map((quote: any, index: number) => {\n              const { key, ...restQuoteProps } = quote;\n              return (\n                <DraggableFormListRow\n                  quote={quote}\n                  index={index}\n                  remove={remove}\n                  onToTop={showToTop ? handleToTop : null}\n                  disabled={disabled}\n                  key={key}\n                >\n                  {children(restQuoteProps, index)}\n                </DraggableFormListRow>\n              );\n            })}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n\nexport default DraggableFormListContext;'},{fileName:"DraggableFormListRow.tsx",code:'/**\n * 可增加和删除多条数据的包装组件\n */\nimport React, { ReactNode } from "react";\nimport { Draggable } from "react-beautiful-dnd";\nimport type { DraggableProvided } from "react-beautiful-dnd";\nimport {\n  HolderOutlined,\n  VerticalAlignTopOutlined,\n  MinusCircleOutlined,\n} from "@ant-design/icons";\nimport styles from "./index.module.scss";\n\ntype DraggableFormListRowProps = {\n  quote: Record<string, any>;\n  index: number;\n  children: ReactNode;\n  remove?: ((index: number) => void) | null;\n  onToTop?: ((index: number) => void) | null;\n  disabled?: boolean;\n};\n\nconst DraggableFormListRow = (props: DraggableFormListRowProps) => {\n  const { quote, index, children, remove, onToTop, disabled = false } = props;\n\n  return (\n    <Draggable draggableId={quote.key.toString()} index={index}>\n      {(provided: DraggableProvided) => (\n        <div ref={provided.innerRef} {...provided.draggableProps}>\n          <div className={styles.draggableRow}>\n            <div\n              {...(!disabled ? provided.dragHandleProps : {})}\n              className={`${styles.defaultBtn}${\n                disabled ? ` ${styles.disabled}` : ""\n              }`}\n              style={{ marginRight: "8px" }}\n            >\n              <HolderOutlined />\n            </div>\n            {children}\n            {remove && (\n              <div\n                className={`${styles.removeBtn}${\n                  disabled ? ` ${styles.disabled}` : ""\n                }`}\n                style={{ marginLeft: "10px" }}\n                onClick={() => {\n                  if (disabled) return;\n                  remove(index);\n                }}\n              >\n                <MinusCircleOutlined />\n              </div>\n            )}\n            {onToTop && (\n              <div\n                className={`${styles.defaultBtn}${\n                  disabled ? ` ${styles.disabled}` : ""\n                }`}\n                style={{ marginLeft: "10px" }}\n                onClick={() => {\n                  if (index === 0) return;\n                  if (disabled) return;\n                  onToTop(index);\n                }}\n              >\n                <VerticalAlignTopOutlined />\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nexport default DraggableFormListRow;'},{fileName:"DraggableFormListContext.module.scss",code:".draggableRow {\n  display: flex;\n  align-items: center;\n  padding: 8px 0;\n\n  $btnSize: 16px;\n  .defaultBtn:not(.disabled) {\n    cursor: pointer;\n    :global {\n      svg {\n        width: $btnSize;\n        height: $btnSize;\n        path {\n          fill: $globalPrimaryColor;\n        }\n      }\n    }\n  }\n\n  .removeBtn:not(.disabled) {\n    cursor: pointer;\n    :global {\n      svg {\n        width: $btnSize;\n        height: $btnSize;\n        path {\n          fill: $globalRedColor;\n        }\n      }\n    }\n  }\n\n  .disabled {\n    cursor: not-allowed !important;\n    :global {\n      svg {\n        width: $btnSize;\n        height: $btnSize;\n        path {\n          fill: $disabledColor;\n        }\n      }\n    }\n  }\n}"}];var Mt=t(9237);const Vt=(e,n)=>{const[t,l]=(0,a.useState)(0);return(0,a.useEffect)((()=>{if(e.current){const{clientHeight:n}=e.current;l(n)}}),[]),{droppableHeight:t,setDroppableHeight:l,onAdd:e=>{l((e=>e+n)),e?.()},onRemove:(e,t)=>{l((e=>Math.max(e-n,0))),e?.(t)}}},Et="DraggableFormListSample_container__x0PmK",Lt="DraggableFormListSample_itemTitleRow__W0a+q",Ot="DraggableFormListSample_formListRow__v94NW",$t=()=>{const[e]=Ce.A.useForm(),n=(0,a.useRef)(null),{droppableHeight:t,onAdd:l,onRemove:r}=Vt(n,48),o=(0,a.useRef)(1);return(0,s.jsx)(Ce.A,{form:e,labelAlign:"right",initialValues:{fieldList:[{id:"1",field1:"默认值",field2:"workingDay",field3:["默认值",!0],field4:[b()(),b()(),!1]}]},children:(0,s.jsx)(Ce.A.List,{name:"fieldList",children:(e,a)=>{let{add:i,move:d,remove:c}=a;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("div",{className:Lt,children:(0,s.jsx)(M.Ay,{type:"primary",icon:(0,s.jsx)(Mt.A,{}),ghost:!0,onClick:()=>(e=>{o.current>=5?z.Ay.warning("最多可增加5条数据"):(l(e),o.current=o.current+1)})(i),children:"新增"})}),(0,s.jsx)("div",{style:{width:"100%",height:t>0?`${t}px`:"auto"},ref:n,children:(0,s.jsx)(Ft,{droppableId:"fieldList",fields:e,showToTop:!0,move:d,remove:e=>((e,n)=>{o.current<=1?z.Ay.warning("最少要有1条数据"):(r(e,n),o.current=o.current-1)})(c,e),children:e=>(0,s.jsxs)("div",{className:Ot,children:[(0,s.jsx)(Ce.A.Item,{...e,name:[e.name,"id"],hidden:!0}),(0,s.jsx)(Ce.A.Item,{...e,label:"字段1",name:[e.name,"field1"],children:(0,s.jsx)(ze.A,{})}),(0,s.jsx)(Ce.A.Item,{...e,label:"字段2",name:[e.name,"field2"],children:(0,s.jsx)(en.A,{options:[{label:"工作日",value:"workingDay"},{label:"自然日",value:"naturalDay"}],style:{width:"200px"}})}),(0,s.jsx)(Ce.A.Item,{...e,label:"字段3",name:[e.name,"field3"],children:(0,s.jsx)(Je,{})}),(0,s.jsx)(Ce.A.Item,{...e,label:"字段4",name:[e.name,"field4"],children:(0,s.jsx)(Fe,{})})]})})})]})}})})},Kt=[{fileName:"index.tsx",code:'import React, { useRef } from "react";\nimport { Button, Form, Input, message, Select } from "antd";\nimport { PlusOutlined } from "@ant-design/icons";\nimport dayjs from "dayjs";\nimport DraggableFormListContext from "@/components/formLists/DraggableFormListContext";\nimport useFixHeight from "@/components/formLists/DraggableFormListContext/hooks/useFixHeight";\nimport InputAndCheckbox from "@/components/formItems/InputAndCheckbox";\nimport RangePickerAndCheckbox from "@/components/formItems/RangePickerAndCheckbox";\nimport styles from "./index.module.scss";\n\nconst DRAGGABLE_HEIGHT = 48;\n\nconst Content = () => {\n  const [form] = Form.useForm();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { droppableHeight, onAdd, onRemove } = useFixHeight(\n    containerRef,\n    DRAGGABLE_HEIGHT\n  );\n  const rows = useRef<number>(1);\n\n  const onAddClick = (add: any) => {\n    if (rows.current >= 5) {\n      message.warning("最多可增加5条数据");\n      return;\n    }\n    onAdd(add);\n    rows.current = rows.current + 1;\n  };\n\n  const onRemoveClick = (remove: any, index: number) => {\n    if (rows.current <= 1) {\n      message.warning("最少要有1条数据");\n      return;\n    }\n    onRemove(remove, index);\n    rows.current = rows.current - 1;\n  };\n\n  return (\n      <Form\n        form={form}\n        labelAlign=\'right\'\n        initialValues={{\n          fieldList: [\n            {\n              id: "1",\n              field1: "默认值",\n              field2: "workingDay",\n              field3: ["默认值", true],\n              field4: [dayjs(), dayjs(), false],\n            },\n          ],\n        }}\n      >\n        <Form.List name=\'fieldList\'>\n          {(fields, { add, move, remove }) => (\n            <>\n              <div className={styles.itemTitleRow}>\n                <Button\n                  type=\'primary\'\n                  icon={<PlusOutlined />}\n                  ghost\n                  onClick={() => onAddClick(add)}\n                >\n                  新增\n                </Button>\n              </div>\n              <div\n                style={{\n                  width: "100%",\n                  height: droppableHeight > 0 ? `${droppableHeight}px` : "auto",\n                }}\n                ref={containerRef}\n              >\n                <DraggableFormListContext\n                  droppableId=\'fieldList\'\n                  fields={fields}\n                  showToTop\n                  move={move}\n                  remove={(index) => onRemoveClick(remove, index as number)}\n                >\n                  {(quote) => (\n                    <div className={styles.formListRow}>\n                      <Form.Item\n                        {...quote}\n                        name={[quote.name, "id"]}\n                        hidden\n                      ></Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段1\'\n                        name={[quote.name, "field1"]}\n                      >\n                        <Input />\n                      </Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段2\'\n                        name={[quote.name, "field2"]}\n                      >\n                        <Select\n                          options={[\n                            { label: "工作日", value: "workingDay" },\n                            { label: "自然日", value: "naturalDay" },\n                          ]}\n                          style={{ width: "200px" }}\n                        />\n                      </Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段3\'\n                        name={[quote.name, "field3"]}\n                      >\n                        <InputAndCheckbox />\n                      </Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段4\'\n                        name={[quote.name, "field4"]}\n                      >\n                        <RangePickerAndCheckbox />\n                      </Form.Item>\n                    </div>\n                  )}\n                </DraggableFormListContext>\n              </div>\n            </>\n          )}\n        </Form.List>\n      </Form>\n  );\n};\n\nexport default Content;\n'}].concat(Tt),Bt=()=>(0,s.jsx)(me,{className:Et,title:"可上下拖拽排序的Form.List的包装组件",codeParams:Kt,children:(0,s.jsx)($t,{})}),Yt="DraggableWithValidateFormListSample_container__6VHhw",Ht="DraggableWithValidateFormListSample_itemTitleRow__KkWRb",qt="DraggableWithValidateFormListSample_formListRow__1BmxV",Wt=[{required:!0,message:"必填项"}],Ut=()=>{const[e]=Ce.A.useForm(),n=(0,a.useRef)(null),{droppableHeight:t,onAdd:l,onRemove:r}=Vt(n,48),o=(0,a.useRef)(1);return(0,s.jsxs)(Ce.A,{form:e,labelAlign:"right",initialValues:{fieldList:[{}]},children:[(0,s.jsx)(Ce.A.List,{name:"fieldList",children:(a,i)=>{let{add:d,move:c,remove:u}=i;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("div",{className:Ht,children:(0,s.jsx)(M.Ay,{type:"primary",icon:(0,s.jsx)(Mt.A,{}),ghost:!0,onClick:()=>(e=>{o.current>=5?z.Ay.warning("最多可增加5条数据"):(l(e),o.current=o.current+1)})(d),children:"新增"})}),(0,s.jsx)("div",{style:{width:"100%",height:t>0?`${t}px`:"auto"},ref:n,children:(0,s.jsx)(Ft,{droppableId:"fieldList",fields:a,showToTop:!0,move:c,remove:e=>((e,n)=>{o.current<=1?z.Ay.warning("最少要有1条数据"):(r(e,n),o.current=o.current-1)})(u,e),children:n=>(0,s.jsxs)("div",{className:qt,children:[(0,s.jsx)(Ce.A.Item,{...n,name:[n.name,"id"],hidden:!0}),(0,s.jsx)(Ce.A.Item,{...n,label:"字段1",name:[n.name,"field1"],rules:Wt,children:(0,s.jsx)(ct,{form:e,style:{width:"214px"},children:(0,s.jsx)(ze.A,{})})}),(0,s.jsx)(Ce.A.Item,{...n,label:"字段2",name:[n.name,"field2"],rules:Wt,children:(0,s.jsx)(ct,{form:e,style:{width:"214px"},children:(0,s.jsx)(en.A,{options:[{label:"工作日",value:"workingDay"},{label:"自然日",value:"naturalDay"}],style:{width:"200px"}})})}),(0,s.jsx)(Ce.A.Item,{...n,label:"字段3",name:[n.name,"field3"],rules:Wt,children:(0,s.jsx)(ct,{form:e,style:{width:"214px"},children:(0,s.jsx)(Je,{})})}),(0,s.jsx)(Ce.A.Item,{...n,label:"字段4",name:[n.name,"field4"],rules:Wt,children:(0,s.jsx)(ct,{form:e,style:{width:"294px"},children:(0,s.jsx)(Fe,{})})})]})})})]})}}),(0,s.jsx)("div",{style:{display:"flex",justifyContent:"flex-end"},children:(0,s.jsx)(M.Ay,{type:"primary",onClick:async()=>{try{const n=await(e?.validateFields());console.log("values:",n)}catch(e){}},children:"提交"})})]})},zt=[{fileName:"index.tsx",code:'import React, { useRef } from "react";\nimport { Button, Form, Input, message, Select } from "antd";\nimport { PlusOutlined } from "@ant-design/icons";\nimport DraggableFormListContext from "@/components/formLists/DraggableFormListContext";\nimport useFixHeight from "@/components/formLists/DraggableFormListContext/hooks/useFixHeight";\nimport WithValidateMessage from "@/components/formItems/WithValidateMessage";\nimport InputAndCheckbox from "@/components/formItems/InputAndCheckbox";\nimport RangePickerAndCheckbox from "@/components/formItems/RangePickerAndCheckbox";\nimport styles from "./index.module.scss";\n\nconst DRAGGABLE_HEIGHT = 48;\nconst REQUIRED_FORM_ITEM_RULES = [{ required: true, message: "必填项" }];\n\nconst Content = () => {\n  const [form] = Form.useForm();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { droppableHeight, onAdd, onRemove } = useFixHeight(\n    containerRef,\n    DRAGGABLE_HEIGHT\n  );\n  const rows = useRef<number>(1);\n\n  const onAddClick = (add: any) => {\n    if (rows.current >= 5) {\n      message.warning("最多可增加5条数据");\n      return;\n    }\n    onAdd(add);\n    rows.current = rows.current + 1;\n  };\n\n  const onRemoveClick = (remove: any, index: number) => {\n    if (rows.current <= 1) {\n      message.warning("最少要有1条数据");\n      return;\n    }\n    onRemove(remove, index);\n    rows.current = rows.current - 1;\n  };\n\n  // 点击提交\n  const onSubmit = async () => {\n    try {\n      const values = await form?.validateFields();\n      console.log("values:", values);\n    } catch (err) {}\n  };\n\n  return (\n    <Form\n      form={form}\n      labelAlign=\'right\'\n      initialValues={{\n        fieldList: [{}],\n      }}\n    >\n      <Form.List name=\'fieldList\'>\n        {(fields, { add, move, remove }) => (\n          <>\n            <div className={styles.itemTitleRow}>\n              <Button\n                type=\'primary\'\n                icon={<PlusOutlined />}\n                ghost\n                onClick={() => onAddClick(add)}\n              >\n                新增\n              </Button>\n            </div>\n            <div\n              style={{\n                width: "100%",\n                height: droppableHeight > 0 ? `${droppableHeight}px` : "auto",\n              }}\n              ref={containerRef}\n            >\n              <DraggableFormListContext\n                droppableId=\'fieldList\'\n                fields={fields}\n                showToTop\n                move={move}\n                remove={(index) => onRemoveClick(remove, index as number)}\n              >\n                {(quote) => (\n                  <div className={styles.formListRow}>\n                    <Form.Item\n                      {...quote}\n                      name={[quote.name, "id"]}\n                      hidden\n                    ></Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段1\'\n                      name={[quote.name, "field1"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "214px" }}\n                      >\n                        <Input />\n                      </WithValidateMessage>\n                    </Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段2\'\n                      name={[quote.name, "field2"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "214px" }}\n                      >\n                        <Select\n                          options={[\n                            { label: "工作日", value: "workingDay" },\n                            { label: "自然日", value: "naturalDay" },\n                          ]}\n                          style={{ width: "200px" }}\n                        />\n                      </WithValidateMessage>\n                    </Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段3\'\n                      name={[quote.name, "field3"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "214px" }}\n                      >\n                        <InputAndCheckbox />\n                      </WithValidateMessage>\n                    </Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段4\'\n                      name={[quote.name, "field4"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "294px" }}\n                      >\n                        <RangePickerAndCheckbox />\n                      </WithValidateMessage>\n                    </Form.Item>\n                  </div>\n                )}\n              </DraggableFormListContext>\n            </div>\n          </>\n        )}\n      </Form.List>\n      <div\n        style={{\n          display: "flex",\n          justifyContent: "flex-end",\n        }}\n      >\n        <Button type=\'primary\' onClick={onSubmit}>\n          提交\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default Content;\n'}].concat(Tt,ut),Gt=()=>(0,s.jsx)(me,{className:Yt,title:"可上下拖拽排序且显示自定义校验信息的Form.List",codeParams:zt,children:(0,s.jsx)(Ut,{})}),Zt="FormListSection_container__9--VJ",Qt="FormListSection_sample__M7-lo",Jt=[(0,s.jsx)(Bt,{}),(0,s.jsx)(Gt,{})],Xt=()=>(0,s.jsx)("div",{className:Zt,children:Jt.map(((e,n)=>(0,s.jsx)("div",{className:Qt,children:e},n)))});var ea=t(770),na=t(3438),ta=t(9763),aa=t(4783),la=t(7192);const ra="EditableTable_editableTable__8yjKc",{RangePicker:sa}=he.A,oa=/^([\w+-.%]+@[\w-.]+\.[A-Za-z]{2,4})(;[\w+-.]+@[\w-.]+\.[A-Za-z]{2,4})*$/,ia=a.createContext(null),da=e=>{let{form:n,editType:t,editProps:l,component:r,disabled:o,dataIndex:i,record:d,save:c}=e;const u={...l,disabled:l.disabled||o};delete u.validateStatus;const m=()=>c(i);let h=(0,s.jsx)(ze.A,{style:{width:"100%"},onBlur:m,...u});switch(t){case"inputNumber":h=(0,s.jsx)(sn.A,{style:{width:"100%"},onBlur:m,...u});break;case"select":h=(0,s.jsx)(en.A,{style:{width:"100%"},...u});break;case"datePicker":h=(0,s.jsx)(he.A,{style:{width:"100%"},...u});break;case"rangePicker":h=(0,s.jsx)(sa,{style:{width:"100%"},...u});break;case"radioGroup":h=(0,s.jsx)(ea.Ay.Group,{...u});break;case"checkboxGroup":h=(0,s.jsx)(pe.A.Group,{...u});break;case"cascader":h=(0,s.jsx)(na.A,{style:{width:"100%"},...u})}return r&&(h=a.cloneElement(r,{record:d,...u})),(0,s.jsx)(ct,{onChange:(e,n)=>{if(!t&&!r||["input","inputNumber"].includes(t))return;if("radioGroup"===t)return void c?.(i,e?.target?.value||void 0);const a=e?.target?"":e;c?.(i,a),l.onChange?.(a,n,d)},form:n,nevervalidate:!!l.nevervalidate,children:h})},ca=a.memo((e=>{const{rowKey:n="id",editable:t=!1,editType:l="input",editProps:r,component:o,disabled:i,dataIndex:d,record:c,children:u,ruleOptions:m,rules:h,handleSave:p,...b}=e,f=(0,a.useContext)(ia);let x=r||{};"function"==typeof r&&(x=r(c)||{});const v=(0,a.useMemo)((()=>{let e=[];return h&&h.length>0?e=h:(m?.isRequired&&e.push({required:!0,message:"必填项"}),m?.isEmail&&e.push({pattern:oa,message:"请输入正确邮箱格式"})),e}),[m,h]),g=async(e,n)=>{const t=n||await(f?.getFieldValue(e)),a={...c,[e]:t};p?.(a);try{await(f?.validateFields([e]))}catch(e){}};(0,a.useEffect)((()=>{f?.setFieldsValue({[d]:c?.[d]})}),[]);let y=u;return t?y=(0,s.jsx)(Ce.A.Item,{style:{margin:0},name:d,rules:v,required:!!m?.isRequired,validateStatus:x.validateStatus,children:da({editType:l,editProps:x,component:o,disabled:i,dataIndex:d,record:c,form:f,save:g})}):d===n&&(y=(0,s.jsx)(Ce.A.Item,{style:{margin:0},name:d,hidden:!0})),(0,s.jsx)("td",{title:i?c?.[d]:"",...b,children:y})}));class ua extends a.PureComponent{render(){return(0,s.jsx)(ca,{...(0,la.A)(this.props,["onMouseEnter","onMouseLeave"])})}}const ma=e=>{let{rowKey:n,onFromaValuesChange:t,...a}=e;const[l]=Ce.A.useForm();return(0,s.jsx)(Ce.A,{form:l,onValuesChange:(e,r)=>{t?.(e,l,{...r,[n]:a["data-row-key"]})},component:!1,children:(0,s.jsx)(ia.Provider,{value:l,children:(0,s.jsx)("tr",{...a})})})},ha=e=>{let{rowKey:n="id",dataSource:t,columns:l,setDataSource:r,disabled:o=!1,onFormValuesChange:i,deleteRowCallback:d,...c}=e;const u=(0,a.useMemo)((()=>({body:{row:e=>(0,s.jsx)(ma,{...e,rowKey:n,onFromaValuesChange:i}),cell:ua}})),[]),m=e=>{const a=t.map((t=>t[n]===e[n]?{...t,...e}:t));setTimeout((()=>{r(a)}))},h=(0,a.useMemo)((()=>l.map((e=>({...e,onCell:n=>({editable:e.editable,editType:e.editType,editProps:e.editProps,component:e.component,disabled:o,dataIndex:e.dataIndex,record:n,ruleOptions:e.ruleOptions,rules:e.rules,handleSave:m})})))),[l,o,m]),p=[...h,{title:"操作",key:"action",dataIndex:"action",align:"center",width:80,fixed:"right",render:(e,a)=>(0,s.jsx)("div",{style:{padding:0},children:o?(0,s.jsx)(M.Ay,{type:"link",danger:!0,disabled:!0,children:"删除"}):(0,s.jsxs)(ta.A,{title:"是否确定删除此行？",onConfirm:()=>{(e=>{const a=t.filter((t=>t[n]!==e[n]));r(a),d?.(e)})(a)},children:[(0,s.jsx)(M.Ay,{style:{padding:0},type:"link",danger:!0,children:"删除"})," "]})})}];return(0,s.jsx)("div",{className:ra,children:(0,s.jsx)(aa.A,{rowKey:n,columns:p,components:u,dataSource:t,pagination:!1,tableLayout:"fixed",bordered:!0,...c})})},pa="EditableTableSample_container__NVS4M",ba="EditableTableSample_itemTitleRow__cXagi",fa="EditableTableSample_columnTitle__R1Y+H",xa="EditableTableSample_requiredIcon__3n192",va=[{validator:(e,n)=>n&&n.length>0&&(n[0]||0===n[0]||n[1])?(n[0]||0===n[0])&&n[1]?Promise.resolve():Promise.reject("两个都必填"):Promise.reject("必填项")}],ga=()=>{const[e,n]=(0,a.useState)([]),t=[{title:(0,s.jsxs)("div",{className:fa,children:[(0,s.jsx)("span",{className:xa,children:"*"}),(0,s.jsx)("span",{children:"邮箱"})]}),dataIndex:"email",width:160,editable:!0,ruleOptions:{isRequired:!0,isEmail:!0}},{title:(0,s.jsxs)("div",{className:fa,children:[(0,s.jsx)("span",{className:xa,children:"*"}),(0,s.jsx)("span",{children:"日期"})]}),dataIndex:"date",width:140,editable:!0,editType:"datePicker",ruleOptions:{isRequired:!0}},{title:"日期类型",dataIndex:"dateType",width:120,editable:!0,editType:"select",editProps:{options:[{label:"年",value:"year"},{label:"月",value:"month"},{label:"天",value:"day"}],allowClear:!0,nevervalidate:!0}},{title:"是否提交",dataIndex:"isSubmit",width:120,editable:!0,editType:"radioGroup",editProps:{options:[{label:"是",value:"1"},{label:"否",value:"0"}],nevervalidate:!0}},{title:(0,s.jsxs)("div",{className:fa,children:[(0,s.jsx)("span",{className:xa,children:"*"}),(0,s.jsx)("span",{children:"交易日"})]}),dataIndex:"field",width:240,editable:!0,component:(0,s.jsx)(un,{options:[{label:"工作日",value:"workingDay"},{label:"自然日",value:"naturalDay"}],inputNumberProps:{addonAfter:"个"},setInputNumberStatus:e=>!e||!e[0]&&0!==e[0]?"error":"",setSelectStatus:e=>e&&e[1]?"":"error"}),editProps:{validateStatus:""},ruleOptions:{isRequired:!0},rules:va}];return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("div",{className:ba,children:(0,s.jsx)(M.Ay,{type:"primary",icon:(0,s.jsx)(Mt.A,{}),ghost:!0,onClick:()=>{if(e.length>=5)return void z.Ay.warning("最多可增加5条数据");const t=[...e,{id:`ROW_ID_${ae()}`}];n(t)},children:"新增"})}),(0,s.jsx)(ha,{columns:t,dataSource:e,setDataSource:n})]})},ya=[{fileName:"index.tsx",code:'import React, { useState } from "react";\nimport { Button, message } from "antd";\nimport { PlusOutlined } from "@ant-design/icons";\nimport EditableTable from "@/components/EditableTable";\nimport type { EditableTableColumnProps } from "@/components/EditableTable";\nimport InputNumberAndSelect from "@/components/formItems/InputNumberAndSelect";\nimport type { Value as InputNumberAndSelectValue } from "@/components/formItems/InputNumberAndSelect";\nimport { getRandomId } from "utils/util";\nimport styles from "./index.module.scss";\n\nconst INPUTNUMBER_SELECT_RULES = [\n  {\n    validator: (_: Record<string, any>, value: InputNumberAndSelectValue) => {\n      if (value && value.length > 0) {\n        if (!value[0] && value[0] !== 0 && !value[1]) {\n          return Promise.reject("必填项");\n        } else {\n          if (!value[0] && value[0] !== 0) {\n            return Promise.reject("两个都必填");\n          }\n          if (!value[1]) {\n            return Promise.reject("两个都必填");\n          }\n        }\n      } else {\n        return Promise.reject("必填项");\n      }\n      return Promise.resolve();\n    },\n  },\n];\n\nconst Content = () => {\n  const [tableData, setTableData] = useState<Record<string, any>[]>([]);\n\n  const onAddClick = () => {\n    if (tableData.length >= 5) {\n      message.warning("最多可增加5条数据");\n      return;\n    }\n    const newDataSource = [...tableData, { id: `ROW_ID_${getRandomId()}` }];\n    setTableData(newDataSource);\n  };\n\n  const columns: EditableTableColumnProps[] = [\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>邮箱</span>\n        </div>\n      ),\n      dataIndex: "email",\n      width: 160,\n      editable: true,\n      ruleOptions: {\n        isRequired: true,\n        isEmail: true,\n      },\n    },\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>日期</span>\n        </div>\n      ),\n      dataIndex: "date",\n      width: 140,\n      editable: true,\n      editType: "datePicker",\n      ruleOptions: {\n        isRequired: true,\n      },\n    },\n    {\n      title: "日期类型",\n      dataIndex: "dateType",\n      width: 120,\n      editable: true,\n      editType: "select",\n      editProps: {\n        options: [\n          { label: "年", value: "year" },\n          { label: "月", value: "month" },\n          { label: "天", value: "day" },\n        ],\n        allowClear: true,\n        nevervalidate: true,\n      },\n    },\n    {\n      title: "是否提交",\n      dataIndex: "isSubmit",\n      width: 120,\n      editable: true,\n      editType: "radioGroup",\n      editProps: {\n        options: [\n          { label: "是", value: "1" },\n          { label: "否", value: "0" },\n        ],\n        nevervalidate: true,\n      },\n    },\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>交易日</span>\n        </div>\n      ),\n      dataIndex: "field",\n      width: 240,\n      editable: true,\n      component: (\n        <InputNumberAndSelect\n          options={[\n            { label: "工作日", value: "workingDay" },\n            { label: "自然日", value: "naturalDay" },\n          ]}\n          inputNumberProps={{\n            addonAfter: "个",\n          }}\n          setInputNumberStatus={(\n            value: InputNumberAndSelectValue | undefined\n          ) => {\n            if (!value || (!value[0] && value[0] !== 0)) {\n              return "error";\n            }\n            return "";\n          }}\n          setSelectStatus={(value: InputNumberAndSelectValue | undefined) => {\n            if (!value || !value[1]) {\n              return "error";\n            }\n            return "";\n          }}\n        />\n      ),\n      editProps: {\n        validateStatus: "",\n      },\n      ruleOptions: {\n        isRequired: true,\n      },\n      rules: INPUTNUMBER_SELECT_RULES,\n    },\n  ];\n\n  return (\n    <>\n      <div className={styles.itemTitleRow}>\n        <Button\n          type=\'primary\'\n          icon={<PlusOutlined />}\n          ghost\n          onClick={onAddClick}\n        >\n          新增\n        </Button>\n      </div>\n      <EditableTable\n        columns={columns}\n        dataSource={tableData}\n        setDataSource={setTableData}\n      />\n    </>\n  );\n};\n\nexport default Content;\n'}].concat([{fileName:"EditableTable.tsx",code:'/**\n * 可进行编辑的表格组件\n */\nimport React, { ReactNode, useEffect, useContext, useMemo } from "react";\nimport {\n  Form,\n  Table,\n  Input,\n  InputNumber,\n  Select,\n  DatePicker,\n  Radio,\n  Checkbox,\n  Cascader,\n  Button,\n  Popconfirm,\n} from "antd";\nimport type { TableProps, TableColumnProps, GetRef, FormRule } from "antd";\nimport { omit } from "lodash-es";\nimport WithValidateMessage from "@/components/formItems/WithValidateMessage";\nimport styles from "./index.module.scss";\n\nconst { RangePicker } = DatePicker;\nconst EMAIL_PATTERN =\n  /^([w+-.%]+@[w-.]+.[A-Za-z]{2,4})(;[w+-.]+@[w-.]+.[A-Za-z]{2,4})*$/;\n\nexport type EditType =\n  | "input"\n  | "inputNumber"\n  | "select"\n  | "datePicker"\n  | "rangePicker"\n  | "radioGroup"\n  | "checkboxGroup"\n  | "cascader";\n\ntype EditProps =\n  | ({\n      nevervalidate?: boolean;\n      validateStatus?: "warning" | "error" | "";\n    } & Record<string, any>)\n  | ((record: Record<string, any>) => Record<string, any>);\n\ntype FormInstance<T> = GetRef<typeof Form<T>>;\n\ntype EditableTableColumnRuleOptions = {\n  isRequired?: boolean;\n  isEmail?: boolean;\n  isPositiveInt?: boolean;\n};\n\nexport type EditableTableColumnProps = {\n  editable?: boolean;\n  editType?: EditType;\n  editProps?: EditProps;\n  component?: ReactNode | null;\n  ruleOptions?: EditableTableColumnRuleOptions;\n  rules?: FormRule[];\n} & TableColumnProps;\n\ntype RenderItemProps = {\n  editType: EditType;\n  editProps: EditProps;\n  disabled?: boolean;\n  dataIndex: string;\n  component?: ReactNode | null;\n  record?: Record<string, any>;\n  save: (dataIndex: string, cellValue?: any) => void;\n};\n\ntype EditableTableCellProps = {\n  rowKey?: string;\n  disabled?: boolean;\n  dataIndex: string;\n  record: Record<string, any>;\n  editProps?: EditProps;\n  component?: ReactNode | null;\n  handleSave: (event: any) => void;\n} & Omit<EditableTableColumnProps, "dataIndex">;\n\ntype EditableTableProps = {\n  dataSource: Record<string, any>[];\n  columns: EditableTableColumnProps[];\n  setDataSource: (dataSource: Record<string, any>[]) => void;\n  rowKey?: string;\n  disabled?: boolean;\n  onFormValuesChange?: (\n    changedValues: Record<string, any>,\n    form?: FormInstance<any> | null,\n    allValues?: Record<string, any>\n  ) => void;\n  deleteRowCallback?: (record: Record<string, any>) => void; // 删除一行后的回调\n} & TableProps;\n\nconst EditableContext = React.createContext<FormInstance<any> | null>(null);\n\nconst renderItem = ({\n  form,\n  editType,\n  editProps,\n  component,\n  disabled,\n  dataIndex,\n  record,\n  save,\n}: RenderItemProps & { form: FormInstance<any> | null }) => {\n  const restProps: Record<string, any> = {\n    ...editProps,\n    disabled: (editProps as Record<string, any>).disabled || disabled,\n  };\n  delete restProps.validateStatus;\n\n  const onBlur = () => save(dataIndex);\n\n  const onChange = (cellValue?: any, option?: Record<string, any>) => {\n    if (\n      (!editType && !component) ||\n      ["input", "inputNumber"].includes(editType)\n    )\n      return;\n    if (editType === "radioGroup") {\n      save?.(dataIndex, cellValue?.target?.value || undefined);\n      return;\n    }\n    const newValue = cellValue?.target ? "" : cellValue;\n    save?.(dataIndex, newValue);\n    (editProps as Record<string, any>).onChange?.(newValue, option, record);\n  };\n\n  let itemComponent: any = (\n    <Input style={{ width: "100%" }} onBlur={onBlur} {...restProps} />\n  );\n\n  switch (editType) {\n    case "inputNumber":\n      itemComponent = (\n        <InputNumber style={{ width: "100%" }} onBlur={onBlur} {...restProps} />\n      );\n      break;\n    case "select":\n      itemComponent = <Select style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "datePicker":\n      itemComponent = <DatePicker style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "rangePicker":\n      itemComponent = <RangePicker style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "radioGroup":\n      itemComponent = <Radio.Group {...restProps} />;\n      break;\n    case "checkboxGroup":\n      itemComponent = <Checkbox.Group {...restProps} />;\n      break;\n    case "cascader":\n      itemComponent = <Cascader style={{ width: "100%" }} {...restProps} />;\n      break;\n  }\n\n  if (component) {\n    itemComponent = React.cloneElement(component, { record, ...restProps });\n  }\n\n  return (\n    <WithValidateMessage\n      onChange={onChange}\n      form={form}\n      nevervalidate={!!(editProps as Record<string, any>).nevervalidate}\n    >\n      {itemComponent}\n    </WithValidateMessage>\n  );\n};\n\nconst EditableTableCell = React.memo((props: EditableTableCellProps) => {\n  const {\n    rowKey = "id",\n    editable = false,\n    editType = "input",\n    editProps,\n    component,\n    disabled,\n    dataIndex,\n    record,\n    children,\n    ruleOptions,\n    rules,\n    handleSave,\n    ...restProps\n  } = props;\n  const form = useContext(EditableContext);\n\n  let finalComponentProps: Record<string, any> = editProps || {};\n  if (typeof editProps === "function") {\n    finalComponentProps = editProps(record) || {};\n  }\n\n  const finalRules = useMemo(() => {\n    let finalRulesArr: FormRule[] = [];\n    if (rules && rules.length > 0) {\n      finalRulesArr = rules;\n    } else {\n      if (ruleOptions?.isRequired) {\n        finalRulesArr.push({ required: true, message: "必填项" });\n      }\n      if (ruleOptions?.isEmail) {\n        finalRulesArr.push({\n          pattern: EMAIL_PATTERN,\n          message: "请输入正确邮箱格式",\n        });\n      }\n    }\n    return finalRulesArr;\n  }, [ruleOptions, rules]);\n\n  const save = async (currentDataIndex: string, cellValue?: any) => {\n    const value = cellValue || (await form?.getFieldValue(currentDataIndex));\n    const newRecord = { ...record, [currentDataIndex]: value };\n    handleSave?.(newRecord);\n    try {\n      await form?.validateFields([currentDataIndex]);\n    } catch (err) {\n      //   console.log(\'EditableTable保存数据失败\', err);\n    }\n  };\n\n  useEffect(() => {\n    form?.setFieldsValue({\n      [dataIndex]: record?.[dataIndex],\n    });\n  }, []);\n\n  let childNode: ReactNode = children;\n\n  if (editable) {\n    childNode = (\n      <Form.Item\n        style={{ margin: 0 }}\n        name={dataIndex}\n        rules={finalRules}\n        required={!!ruleOptions?.isRequired}\n        validateStatus={finalComponentProps.validateStatus}\n      >\n        {renderItem({\n          editType,\n          editProps: finalComponentProps,\n          component,\n          disabled,\n          dataIndex,\n          record,\n          form,\n          save,\n        })}\n      </Form.Item>\n    );\n  } else if (dataIndex === rowKey) {\n    childNode = (\n      <Form.Item style={{ margin: 0 }} name={dataIndex} hidden></Form.Item>\n    );\n  }\n\n  return (\n    <td title={disabled ? record?.[dataIndex] : ""} {...restProps}>\n      {childNode}\n    </td>\n  );\n});\n\nclass TableCellWrapper extends React.PureComponent {\n  render() {\n    return (\n      <EditableTableCell\n        {...omit(this.props, ["onMouseEnter", "onMouseLeave"])}\n      />\n    );\n  }\n}\n\nconst EditableTableRow = ({\n  rowKey,\n  onFromaValuesChange,\n  ...restProps\n}: any) => {\n  const [form] = Form.useForm();\n\n  const onValuesChange = (\n    changedValues: Record<string, any>,\n    allValues: Record<string, any>\n  ) => {\n    onFromaValuesChange?.(changedValues, form, {\n      ...allValues,\n      [rowKey]: restProps["data-row-key"],\n    });\n  };\n\n  return (\n    <Form form={form} onValuesChange={onValuesChange} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...restProps} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableTable = ({\n  rowKey = "id",\n  dataSource,\n  columns,\n  setDataSource,\n  disabled = false,\n  onFormValuesChange,\n  deleteRowCallback,\n  ...restProps\n}: EditableTableProps) => {\n  const components = useMemo(\n    () => ({\n      body: {\n        row: (props: any) => (\n          <EditableTableRow\n            {...props}\n            rowKey={rowKey}\n            onFromaValuesChange={onFormValuesChange}\n          />\n        ),\n        cell: TableCellWrapper,\n      },\n    }),\n    []\n  );\n\n  const handleSave = (row: Record<string, any>) => {\n    const newDataSource = dataSource.map((item) => {\n      if (item[rowKey] === row[rowKey]) {\n        return {\n          ...item,\n          ...row,\n        };\n      }\n      return item;\n    });\n\n    setTimeout(() => {\n      setDataSource(newDataSource);\n    });\n  };\n\n  const handleDeleteRow = (record: Record<string, any>) => {\n    const newDataSource = dataSource.filter(\n      (item) => item[rowKey] !== record[rowKey]\n    );\n    setDataSource(newDataSource);\n    deleteRowCallback?.(record);\n  };\n\n  const newColumns = useMemo(() => {\n    return columns.map((col) => ({\n      ...col,\n      onCell: (record: Record<string, any>) => ({\n        editable: col.editable,\n        editType: col.editType,\n        editProps: col.editProps,\n        component: col.component,\n        disabled,\n        dataIndex: col.dataIndex,\n        record,\n        ruleOptions: col.ruleOptions,\n        rules: col.rules,\n        handleSave,\n      }),\n    }));\n  }, [columns, disabled, handleSave]);\n\n  const finalColumns = [\n    ...newColumns,\n    {\n      title: "操作",\n      key: "action",\n      dataIndex: "action",\n      align: "center",\n      width: 80,\n      fixed: "right",\n      render: (_: any, record: Record<string, any>) => {\n        return (\n          <div style={{ padding: 0 }}>\n            {disabled ? (\n              <Button type=\'link\' danger disabled>\n                删除\n              </Button>\n            ) : (\n              <Popconfirm\n                title=\'是否确定删除此行？\'\n                onConfirm={() => {\n                  handleDeleteRow(record);\n                }}\n              >\n                <Button style={{ padding: 0 }} type=\'link\' danger>\n                  删除\n                </Button>{" "}\n              </Popconfirm>\n            )}\n          </div>\n        );\n      },\n    },\n  ];\n\n  return (\n    <div className={styles.editableTable}>\n      <Table\n        rowKey={rowKey}\n        columns={finalColumns as any}\n        components={components}\n        dataSource={dataSource}\n        pagination={false}\n        tableLayout=\'fixed\'\n        bordered\n        {...restProps}\n      />\n    </div>\n  );\n};\n\nexport default EditableTable;\n'},{fileName:"EditableTable.module.scss",code:".editableTable {\n  :global {\n    .ant-form-item {\n      .ant-form-item-control {\n        .ant-form-item-explain {\n          display: none !important;\n        }\n      }\n    }\n  }\n}"}]),ka=()=>(0,s.jsx)(me,{className:pa,title:"可进行编辑的表格组件",codeParams:ya,children:(0,s.jsx)(ga,{})}),Ca="table_container__jiecw",_a="table_sample__jVvCw",Aa=[(0,s.jsx)(ka,{})],Pa=()=>(0,s.jsx)("div",{className:Ca,children:Aa.map(((e,n)=>(0,s.jsx)("div",{className:_a,children:e},n)))}),ja=[{path:"/form",children:[{path:"/form/formItemSection",element:(0,s.jsx)(At,{})},{path:"/form/formListSection",element:(0,s.jsx)(Xt,{})}]},{path:"/table",element:(0,s.jsx)(Pa,{})}],Sa=[{path:"/*",element:(0,s.jsx)(U,{})}];b().locale("zh-cn");const wa=()=>{const e=(0,u.Ye)(Sa);return(0,s.jsx)("div",{className:"app_container",translate:"no",children:(0,s.jsx)(m.Ay,{locale:h.A,children:e})})},Na=document.getElementById("root");Na&&(0,l.H)(Na).render((0,s.jsx)(d,{children:(0,s.jsx)(r.I9,{children:(0,s.jsx)(wa,{})})}))}},l={};function r(e){var n=l[e];if(void 0!==n)return n.exports;var t=l[e]={id:e,loaded:!1,exports:{}};return a[e].call(t.exports,t,t.exports,r),t.loaded=!0,t.exports}r.m=a,e=[],r.O=(n,t,a,l)=>{if(!t){var s=1/0;for(c=0;c<e.length;c++){t=e[c][0],a=e[c][1],l=e[c][2];for(var o=!0,i=0;i<t.length;i++)(!1&l||s>=l)&&Object.keys(r.O).every((e=>r.O[e](t[i])))?t.splice(i--,1):(o=!1,l<s&&(s=l));if(o){e.splice(c--,1);var d=a();void 0!==d&&(n=d)}}return n}l=l||0;for(var c=e.length;c>0&&e[c-1][2]>l;c--)e[c]=e[c-1];e[c]=[t,a,l]},r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,r.t=function(e,a){if(1&a&&(e=this(e)),8&a)return e;if("object"==typeof e&&e){if(4&a&&e.__esModule)return e;if(16&a&&"function"==typeof e.then)return e}var l=Object.create(null);r.r(l);var s={};n=n||[null,t({}),t([]),t(t)];for(var o=2&a&&e;"object"==typeof o&&!~n.indexOf(o);o=t(o))Object.getOwnPropertyNames(o).forEach((n=>s[n]=()=>e[n]));return s.default=()=>e,r.d(l,s),l},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var n=r.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");if(t.length)for(var a=t.length-1;a>-1&&(!e||!/^http(s?):/.test(e));)e=t[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{var e={792:0};r.O.j=n=>0===e[n];var n=(n,t)=>{var a,l,s=t[0],o=t[1],i=t[2],d=0;if(s.some((n=>0!==e[n]))){for(a in o)r.o(o,a)&&(r.m[a]=o[a]);if(i)var c=i(r)}for(n&&n(t);d<s.length;d++)l=s[d],r.o(e,l)&&e[l]&&e[l][0](),e[l]=0;return r.O(c)},t=self.webpackChunkcomposite_component_library=self.webpackChunkcomposite_component_library||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))})();var s=r.O(void 0,[874,134],(()=>r(2836)));s=r.O(s)})();