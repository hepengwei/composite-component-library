(()=>{"use strict";var e,n,t,a={4849:(e,n,t)=>{var a=t(6540),l=t(5338),r=t(4976),o=t(4848);const s=a.createContext({headHeight:0,setHeadHeight:()=>{},menuWidth:0,setMenuWidth:()=>{},scrollTop:0,setScrollTop:()=>{},scrollContentRef:a.createRef(),setScrollContentRef:()=>{}});let i=a.createRef();const d=e=>{const[n,t]=(0,a.useState)(0),[l,r]=(0,a.useState)(0),[d,c]=(0,a.useState)(0),u=(0,a.useCallback)((function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;c(e),i.current&&i.current.scrollTop!==e&&(i.current.scrollTop=e)}),[]);return(0,o.jsx)(s.Provider,{value:{headHeight:n,menuWidth:l,scrollTop:d,setHeadHeight:t,setMenuWidth:r,setScrollTop:u,scrollContentRef:i,setScrollContentRef:e=>{e&&(i=e)}},children:e.children})},c=()=>(0,a.useContext)(s);var u=t(7767),m=t(1587),p=t(4568),h=t(4353),b=t.n(h),f=t(7197),x=t(1878),g=t(145),v=t(227),y=t(9552);const k=t.p+"images/235f02ed.jpeg",C="Header_container__lcnp0",_="Header_title__XumRj",A="Header_right__Tm89M",j="Header_btn__n+9vE",P="Header_rewardModal__JCltU",I="Header_closeBtn__Le6iI",R=()=>{const{setHeadHeight:e}=c(),n=(0,a.useRef)(null),[t,l]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{if(n.current){const{height:t}=n.current.getBoundingClientRect();e(t)}}),[]),(0,o.jsxs)("div",{className:C,ref:n,children:[(0,o.jsx)("div",{className:_,children:"复合组件示例库"}),(0,o.jsx)(f.A,{message:"本示例库并非组件库，封装的组件并没有考虑在所有场景下的适配",type:"warning",showIcon:!0,closable:!0}),(0,o.jsx)("div",{className:A,children:(0,o.jsx)(x.A,{placement:"bottomRight",title:"打赏",children:(0,o.jsx)("div",{className:j,onClick:()=>{l(!0)},children:(0,o.jsx)(v.A,{})})})}),(0,o.jsxs)(g.A,{wrapClassName:P,title:"打赏",open:t,footer:null,maskClosable:!1,width:320,children:[(0,o.jsx)("div",{className:I,onClick:()=>{l(!1)},children:(0,o.jsx)(y.A,{})}),(0,o.jsx)("img",{src:k,alt:""}),(0,o.jsx)("p",{children:"如果觉得网站不错，内容对你有所帮助，再打赏也不迟"})]})]})};var w=t(961),S=t(9277),N=t(3341),F=t(6157),D=t(1201),T=t(8467),E=t(5202),V=t(5226);const M="Menus_container__TGD0s",L="Menus_topBox__M+bkd",O="Menus_top__evyIx",$="Menus_menuLabel__VW605",B="Menus_bottom__9th6m";function q(e,n,t,a,l){return{key:n,icon:t,children:a,label:(0,o.jsx)("p",{className:$,children:e}),type:l}}const W=()=>{const e=(0,u.Zp)(),n=(0,u.zy)(),[t,l]=(0,a.useState)(!1),{setMenuWidth:r}=c(),s=(0,a.useRef)(null),i=[q("表单","form",(0,o.jsx)(S.A,{}),[q("FormItem 部分","formItemSection"),q("FormList 部分","formListSection")]),q("表格","table",(0,o.jsx)(N.A,{}))],d=(0,a.useCallback)((0,T.A)((()=>{const e=w.findDOMNode(s.current);e&&r(e.clientWidth)}),{wait:360}).run,[]),m=(0,a.useMemo)((()=>{const{pathname:e}=n,t=[];if(e){const n=e.split("/"),a=n[n.length-1];a&&t.push(a)}return t}),[n]),p=(0,a.useMemo)((()=>{const{pathname:e}=n;if(e){const n=e.split("/");if(n.length>=2&&n[1])return[n[1]]}return["form"]}),[n]);return(0,a.useEffect)((()=>{d()}),[t]),(0,a.useEffect)((()=>(window.addEventListener("resize",d),()=>{window.removeEventListener("resize",d)})),[]),(0,o.jsxs)("div",{className:M,ref:s,children:[(0,o.jsxs)("div",{className:L,children:[(0,o.jsx)("div",{className:O,children:(0,o.jsx)(E.Ay,{type:"primary",onClick:()=>{l(!t)},style:{marginBottom:16},children:t?(0,o.jsx)(F.A,{}):(0,o.jsx)(D.A,{})})}),(0,o.jsx)(V.A,{defaultOpenKeys:p,selectedKeys:m,mode:"inline",inlineCollapsed:t,items:i,onClick:n=>{const{keyPath:t}=n,a=t.reduce(((e,n)=>e=`/${n}${e}`),"");e(a)}})]}),(0,o.jsx)("div",{className:B,children:!t&&(0,o.jsx)("span",{children:"持续更新, 敬请期待"})})]})},K="Home_container__BIX4n",H="Home_container_body__xDwsE",U="Home_container_content__kzcpF",z=()=>{const{setScrollTop:e,setScrollContentRef:n}=c(),t=(0,u.Ye)(pa),l=(0,u.zy)(),r=(0,u.Zp)(),s=(0,a.useRef)(null);return(0,a.useEffect)((()=>{const{pathname:e}=l;e&&"/"!==e||r("/form/formItemSection")}),[l]),(0,a.useEffect)((()=>{n(s)}),[]),(0,o.jsxs)("div",{className:K,children:[(0,o.jsx)(R,{}),(0,o.jsxs)("div",{className:H,children:[(0,o.jsx)(W,{}),(0,o.jsx)("div",{className:U,onScroll:()=>{e(s.current?.scrollTop)},ref:s,children:t})]})]})};var G=t(1935),Y=t(2395),Q=t(7046),Z=t(6008),X=t(3853),J=t(7450);const ee="CodeBlock_codeBlock__bzneC",ne="CodeBlock_line__pJCvl",te=e=>{const{code:n,language:t="tsx",theme:a=J.Zj.oneLight}=e;return(0,o.jsx)(J.f4,{theme:a,code:n,language:t,children:e=>{let{style:n,tokens:t,getLineProps:a,getTokenProps:l}=e;return(0,o.jsx)("pre",{className:ee,style:n,children:t.map(((e,n)=>(0,o.jsx)("div",{...a({line:e}),className:ne,children:e.map(((e,n)=>(0,o.jsx)("span",{...l({token:e})},n)))},n)))})}})},ae=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:6;return`${Math.random()}`.slice(2,e+2)},le="SampleBox_container__oAXz4",re="SampleBox_title__en5k9",oe="SampleBox_content__r3wUD",se="SampleBox_actions__H751f",ie="SampleBox_codeBlockBox__b1OZI",de="SampleBox_codeBlockContent__ZJS8D",ce="SampleBox_copyBtn__8qcBp",ue="SampleBox_footer__Tpigq",me=e=>{const{title:n,children:t,className:l,codeParams:r}=e,[s,i]=(0,a.useState)(!1),d=(0,a.useMemo)((()=>Array.isArray(r)?r.map(((e,n)=>({key:n.toString(),label:e.fileName,children:(0,o.jsxs)("div",{className:de,children:[(0,o.jsx)(te,{code:e.code}),(0,o.jsx)("div",{className:ce,onClick:()=>{(e=>{if(e)if(navigator.clipboard)navigator.clipboard.writeText(e);else{const n=document.createElement("input");n.setAttribute("value",e),document.body.appendChild(n),n.select(),document.execCommand("copy"),document.body.removeChild(n)}})(e.code),G.Ay.success("复制成功")},children:(0,o.jsx)(x.A,{title:"复制",children:(0,o.jsx)(Q.A,{})})})]})}))):[]),[r]);return(0,o.jsxs)("div",{className:`${le}${l?` ${l}`:""}`,children:[n&&(0,o.jsx)("div",{className:re,children:n}),(0,o.jsx)("div",{className:oe,children:t}),r&&(0,o.jsx)("div",{className:se,children:(0,o.jsx)(x.A,{title:s?"收起代码":"显示代码",children:(0,o.jsx)(Z.A,{onClick:()=>i(!s)})})}),s&&(0,o.jsxs)("div",{className:ie,children:[Array.isArray(r)?(0,o.jsx)(Y.A,{centered:!0,items:d}):(0,o.jsx)(te,{code:r.code}),(0,o.jsxs)("div",{className:ue,onClick:()=>i(!1),children:[(0,o.jsx)(X.A,{}),"收起"]})]})]})};var pe=t(3888),he=t(1196),be=t(8119);const fe=e=>{const n=(0,a.useContext)(be.A);return(0,a.useMemo)((()=>!!e||!!n),[e,n])},xe="DatePickerAndCheckbox_container__KwiIN",ge="DatePickerAndCheckbox_checkbox__NinO0",ve="DatePickerAndCheckbox_noLabel__UkWsT",ye=e=>{const{value:n,checkboxLabel:t=null,disabled:l,datePickerProps:r={},checkboxProps:s={},onChange:i,"aria-invalid":d,setDatePickerStatus:c,style:u={}}=e,m=fe(l),p=(0,a.useMemo)((()=>{if(c&&"true"===d)return c(n)}),[d,n]);return(0,o.jsxs)("div",{className:xe,style:u,children:[(0,o.jsx)(pe.A,{value:n&&n.length>=1?n[0]:void 0,disabled:m,status:p,...r,onChange:e=>{const t=n&&n.length>=2?[e||void 0,n[1]]:[e||void 0,void 0];i?.(t)}}),(0,o.jsx)(he.A,{className:`${ge}${t?"":` ${ve}`}`,checked:n&&n.length>=2?n[1]:void 0,disabled:m,...s,onChange:e=>{const t=e?.target?.checked||!1,a=n&&n.length>=1?[n[0],t]:[void 0,t];i?.(a)},children:t})]})},ke=[{fileName:"DatePickerAndCheckbox.tsx",code:'/**\n * 左边日期选择框右边复选框的复合组件\n */\nimport React, { useMemo } from "react";\nimport { DatePicker, Checkbox } from "antd";\nimport { CheckboxChangeEvent } from "antd/es/checkbox";\nimport { Dayjs } from "dayjs";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\ntype Value = [Dayjs | null | undefined, boolean | undefined];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype DatePickerAndCheckboxProps = {\n  value?: Value;\n  checkboxLabel?: string;\n  disabled?: boolean;\n  datePickerProps?: Record<string, any>; // 传递给日期选择框的属性值\n  checkboxProps?: Record<string, any>; // 传递给复选框的属性值\n  onChange?: (value: Value) => void;\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setDatePickerStatus?: (value: Value | undefined) => Status; // 当form校验时，设置日期选择框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  style?: Record<string, any>;\n};\n\nconst DatePickerAndCheckbox = (props: DatePickerAndCheckboxProps) => {\n  const {\n    value,\n    checkboxLabel = null,\n    disabled: selfDisabled,\n    datePickerProps = {},\n    checkboxProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setDatePickerStatus,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onDatePickerChange = (date: Dayjs | null) => {\n    const newValue: Value =\n      value && value.length >= 2\n        ? [date || undefined, value[1]]\n        : [date || undefined, undefined];\n    onChange?.(newValue);\n  };\n\n  const onCheckboxChange = (e: CheckboxChangeEvent) => {\n    const checked = e?.target?.checked || false;\n    const newValue: Value =\n      value && value.length >= 1 ? [value[0], checked] : [undefined, checked];\n    onChange?.(newValue);\n  };\n\n  const datePickerStatus = useMemo(() => {\n    if (setDatePickerStatus && invalid === "true") {\n      return setDatePickerStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <DatePicker\n        value={value && value.length >= 1 ? value[0] : undefined}\n        disabled={disabled}\n        status={datePickerStatus}\n        {...datePickerProps}\n        onChange={onDatePickerChange}\n      />\n      <Checkbox\n        className={`${styles.checkbox}${\n          !checkboxLabel ? ` ${styles.noLabel}` : ""\n        }`}\n        checked={value && value.length >= 2 ? value[1] : undefined}\n        disabled={disabled}\n        {...checkboxProps}\n        onChange={onCheckboxChange}\n      >\n        {checkboxLabel}\n      </Checkbox>\n    </div>\n  );\n};\n\nexport default DatePickerAndCheckbox;'},{fileName:"DatePickerAndCheckbox.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .checkbox {\n    display: flex;\n    align-items: center;\n    margin-left: 8px;\n    span {\n      word-break: keep-all;\n    }\n  }\n  .noLabel {\n    span:not(.ant-checkbox) {\n      padding-inline-start: 0 !important;\n      padding-inline-end: 0 !important;\n    }\n  }\n}"}];var Ce=t(9467),_e=t(7152),Ae=t(6370);const je="DatePickerAndCheckboxSample_container__M7yhS",Pe=()=>{const[e]=Ce.A.useForm();return(0,o.jsx)(Ce.A,{form:e,labelAlign:"right",className:je,children:(0,o.jsxs)(_e.A,{gutter:16,children:[(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,o.jsx)(ye,{checkboxLabel:"复选框标题"})})}),(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",children:(0,o.jsx)(ye,{datePickerProps:{format:"YYYY/MM/DD"}})})})]})})},Ie=[{fileName:"index.tsx",code:"import React from \"react\";\nimport { Form, Row, Col } from \"antd\";\nimport DatePickerAndCheckbox from \"@/components/formItems/DatePickerAndCheckbox\";\nimport styles from \"./index.module.scss\";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign='right' className={styles.container}>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field1'>\n            <DatePickerAndCheckbox checkboxLabel='复选框标题' />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field2'>\n            <DatePickerAndCheckbox datePickerProps={{ format: \"YYYY/MM/DD\" }} />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;"}].concat(ke),Re=()=>(0,o.jsx)(me,{title:"左边日期选择框右边复选框的复合组件",codeParams:Ie,children:(0,o.jsx)(Pe,{})}),we="RangePickerAndCheckbox_container__NEKOI",Se="RangePickerAndCheckbox_checkbox__apXZT",Ne="RangePickerAndCheckbox_noLabel__5RO6Q",{RangePicker:Fe}=pe.A,De=e=>{const{value:n,checkboxLabel:t="",disabled:l,rangePickerProps:r={},checkboxProps:s={},onChange:i,"aria-invalid":d,setRangePickerStatus:c,style:u={}}=e,m=fe(l),p=(0,a.useMemo)((()=>{if(c&&"true"===d)return c(n)}),[d,n]);return(0,o.jsxs)("div",{className:we,style:u,children:[(0,o.jsx)(Fe,{value:n&&n.length>=2?[n[0],n[1]]:[void 0,void 0],disabled:m,status:p,...r,onChange:e=>{let t=n&&n.length>=3?[void 0,void 0,n[2]]:[void 0,void 0,void 0];e&&e.length>=2&&(t=n&&n.length>=3?[e[0],e[1],n[2]]:[e[0],e[1],void 0]),i?.(t)}}),(0,o.jsx)(he.A,{className:`${Se}${t?"":` ${Ne}`}`,checked:!!(n&&n.length>=3)&&n[2],disabled:m,...s,onChange:e=>{const t=e?.target?.checked||!1,a=n&&n.length>=2?[n[0],n[1],t]:[void 0,void 0,t];i?.(a)},children:t})]})},Te=()=>{const[e]=Ce.A.useForm();return(0,o.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,o.jsxs)(_e.A,{gutter:16,children:[(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,o.jsx)(De,{checkboxLabel:"复选框标题"})})}),(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",children:(0,o.jsx)(De,{rangePickerProps:{format:"YYYY/MM/DD"}})})})]})})},Ee="RangePickerAndCheckboxSample_container__lJatc",Ve=[{fileName:"index.tsx",code:"import React from \"react\";\nimport { Form, Row, Col } from \"antd\";\nimport RangePickerAndCheckbox from \"@/components/formItems/RangePickerAndCheckbox\";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign='right'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field1'>\n            <RangePickerAndCheckbox checkboxLabel='复选框标题' />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field2'>\n            <RangePickerAndCheckbox\n              rangePickerProps={{ format: \"YYYY/MM/DD\" }}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;"}].concat([{fileName:"RangePickerAndCheckbox.tsx",code:'/**\n * 左边日期范围选择框右边复选框的复合组件\n */\nimport React, { useMemo } from "react";\nimport { DatePicker, Checkbox } from "antd";\nimport { CheckboxChangeEvent } from "antd/es/checkbox";\nimport { Dayjs } from "dayjs";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\nconst { RangePicker } = DatePicker;\n\ntype Value = [\n  Dayjs | null | undefined,\n  Dayjs | null | undefined,\n  boolean | undefined\n];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype RangePickerAndCheckboxProps = {\n  value?: Value;\n  checkboxLabel?: string;\n  disabled?: boolean;\n  rangePickerProps?: Record<string, any>; // 传递给日期范围选择框的属性值\n  checkboxProps?: Record<string, any>; // 传递给复选框的属性值\n  onChange?: (value: Value) => void;\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setRangePickerStatus?: (value: Value | undefined) => Status; // 当form校验时，设置日期范围选择框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  style?: Record<string, any>;\n};\n\nconst RangePickerAndCheckbox = (props: RangePickerAndCheckboxProps) => {\n  const {\n    value,\n    checkboxLabel = "",\n    disabled: selfDisabled,\n    rangePickerProps = {},\n    checkboxProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setRangePickerStatus,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onRangePickerChange = (dates: [Dayjs, Dayjs] | null) => {\n    let newValue: Value =\n      value && value.length >= 3\n        ? [undefined, undefined, value[2]]\n        : [undefined, undefined, undefined];\n    if (dates && dates.length >= 2) {\n      newValue =\n        value && value.length >= 3\n          ? [dates[0], dates[1], value[2]]\n          : [dates[0], dates[1], undefined];\n    }\n    onChange?.(newValue);\n  };\n\n  const onCheckboxChange = (e: CheckboxChangeEvent) => {\n    const checked = e?.target?.checked || false;\n    const newValue: Value =\n      value && value.length >= 2\n        ? [value[0], value[1], checked]\n        : [undefined, undefined, checked];\n    onChange?.(newValue);\n  };\n\n  const rangePickerStatus = useMemo(() => {\n    if (setRangePickerStatus && invalid === "true") {\n      return setRangePickerStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <RangePicker\n        value={\n          value && value.length >= 2\n            ? [value[0], value[1]]\n            : [undefined, undefined]\n        }\n        disabled={disabled}\n        status={rangePickerStatus}\n        {...rangePickerProps}\n        // @ts-ignore\n        onChange={onRangePickerChange}\n      />\n      <Checkbox\n        className={`${styles.checkbox}${\n          !checkboxLabel ? ` ${styles.noLabel}` : ""\n        }`}\n        checked={value && value.length >= 3 ? value[2] : false}\n        disabled={disabled}\n        {...checkboxProps}\n        onChange={onCheckboxChange}\n      >\n        {checkboxLabel}\n      </Checkbox>\n    </div>\n  );\n};\n\nexport default RangePickerAndCheckbox;'},{fileName:"RangePickerAndCheckbox.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .checkbox {\n    display: flex;\n    align-items: center;\n    margin-left: 8px;\n    span {\n      word-break: keep-all;\n    }\n  }\n  .noLabel {\n    span:not(.ant-checkbox) {\n      padding-inline-start: 0 !important;\n      padding-inline-end: 0 !important;\n    }\n  }\n}"}]),Me=()=>(0,o.jsx)(me,{className:Ee,title:"左边日期范围选择框右边复选框的复合组件",codeParams:Ve,children:(0,o.jsx)(Te,{})});var Le=t(7444);const Oe="InputAndCheckbox_container__yadK+",$e="InputAndCheckbox_checkbox__50f6e",Be="InputAndCheckbox_noLabel__-JvmU",qe=e=>{const{value:n,checkboxLabel:t=null,disabled:l,inputProps:r={},checkboxProps:s={},onChange:i,"aria-invalid":d,setInputStatus:c,style:u={}}=e,m=fe(l),p=(0,a.useMemo)((()=>{if(c&&"true"===d)return c(n)}),[d,n]);return(0,o.jsxs)("div",{className:Oe,style:u,children:[(0,o.jsx)(Le.A,{value:n&&n.length>=1?n[0]:void 0,disabled:m,status:p,...r,onChange:e=>{const t=e?.target?.value,a=n&&n.length>=2?[t,n[1]]:[t,void 0];i?.(a)}}),(0,o.jsx)(he.A,{className:`${$e}${t?"":` ${Be}`}`,checked:n&&n.length>=2?n[1]:void 0,disabled:m,...s,onChange:e=>{const t=e?.target?.checked||!1,a=n&&n.length>=1?[n[0],t]:[void 0,t];i?.(a)},children:t})]})},We=[{fileName:"InputAndCheckbox.tsx",code:'/**\n * 左边输入框右边复选框的复合组件\n */\nimport React, { useMemo } from "react";\nimport { Input, Checkbox } from "antd";\nimport { CheckboxChangeEvent } from "antd/es/checkbox";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\nexport type Value = [string | undefined, boolean | undefined];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype InputAndCheckboxProps = {\n  value?: Value;\n  checkboxLabel?: string;\n  disabled?: boolean;\n  inputProps?: Record<string, any>; // 传递给输入框的属性值\n  checkboxProps?: Record<string, any>; // 传递给复选框的属性值\n  onChange?: (value: Value) => void;\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setInputStatus?: (value: Value | undefined) => Status; // 当form校验时，设置输入框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  style?: Record<string, any>;\n};\n\nconst InputAndCheckbox = (props: InputAndCheckboxProps) => {\n  const {\n    value,\n    checkboxLabel = null,\n    disabled: selfDisabled,\n    inputProps = {},\n    checkboxProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setInputStatus,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onInputChange = (e: any) => {\n    const v = e?.target?.value;\n    const newValue: Value =\n      value && value.length >= 2 ? [v, value[1]] : [v, undefined];\n    onChange?.(newValue);\n  };\n\n  const onCheckboxChange = (e: CheckboxChangeEvent) => {\n    const checked = e?.target?.checked || false;\n    const newValue: Value =\n      value && value.length >= 1 ? [value[0], checked] : [undefined, checked];\n    onChange?.(newValue);\n  };\n\n  const inputStatus = useMemo(() => {\n    if (setInputStatus && invalid === "true") {\n      return setInputStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <Input\n        value={value && value.length >= 1 ? value[0] : undefined}\n        disabled={disabled}\n        status={inputStatus}\n        {...inputProps}\n        onChange={onInputChange}\n      />\n      <Checkbox\n        className={`${styles.checkbox}${\n          !checkboxLabel ? ` ${styles.noLabel}` : ""\n        }`}\n        checked={value && value.length >= 2 ? value[1] : undefined}\n        disabled={disabled}\n        {...checkboxProps}\n        onChange={onCheckboxChange}\n      >\n        {checkboxLabel}\n      </Checkbox>\n    </div>\n  );\n};\n\nexport default InputAndCheckbox;'},{fileName:"InputAndCheckbox.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .checkbox {\n    display: flex;\n    align-items: center;\n    margin-left: 8px;\n    span {\n      word-break: keep-all;\n    }\n  }\n  .noLabel {\n    span:not(.ant-checkbox) {\n      padding-inline-start: 0 !important;\n      padding-inline-end: 0 !important;\n    }\n  }\n}"}];var Ke=t(6492);const{Option:He}=Ke.A,Ue=()=>{const[e]=Ce.A.useForm(),n=(0,o.jsxs)(Ke.A,{defaultValue:"http://",children:[(0,o.jsx)(He,{value:"http://",children:"http://"}),(0,o.jsx)(He,{value:"https://",children:"https://"})]}),t=(0,o.jsxs)(Ke.A,{defaultValue:".com",children:[(0,o.jsx)(He,{value:".com",children:".com"}),(0,o.jsx)(He,{value:".jp",children:".jp"}),(0,o.jsx)(He,{value:".cn",children:".cn"}),(0,o.jsx)(He,{value:".org",children:".org"})]});return(0,o.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,o.jsxs)(_e.A,{gutter:16,children:[(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,o.jsx)(qe,{inputProps:{addonBefore:n,addonAfter:t},checkboxLabel:"复选框标题"})})}),(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",children:(0,o.jsx)(qe,{})})})]})})},ze="InputAndCheckboxSample_container__W59nb",Ge=[{fileName:"index.tsx",code:"import React from \"react\";\nimport { Form, Row, Col, Select } from \"antd\";\nimport InputAndCheckbox from \"@/components/formItems/InputAndCheckbox\";\n\nconst { Option } = Select;\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  const selectBefore = (\n    <Select defaultValue='http://'>\n      <Option value='http://'>http://</Option>\n      <Option value='https://'>https://</Option>\n    </Select>\n  );\n  const selectAfter = (\n    <Select defaultValue='.com'>\n      <Option value='.com'>.com</Option>\n      <Option value='.jp'>.jp</Option>\n      <Option value='.cn'>.cn</Option>\n      <Option value='.org'>.org</Option>\n    </Select>\n  );\n\n  return (\n    <Form form={form} labelAlign='right'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field1'>\n            <InputAndCheckbox\n              inputProps={{\n                addonBefore: selectBefore,\n                addonAfter: selectAfter,\n              }}\n              checkboxLabel='复选框标题'\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field2'>\n            <InputAndCheckbox />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;"}].concat(We),Ye=()=>(0,o.jsx)(me,{className:ze,title:"左边输入框右边复选框的复合组件",codeParams:Ge,children:(0,o.jsx)(Ue,{})});var Qe=t(7142);const Ze="InputNumberAndSelect_container__7s7iS",Xe="InputNumberAndSelect_inputNumber__Xbfyv",Je="InputNumberAndSelect_select__hietx",en=e=>{const{value:n,options:t=[],disabled:l,inputNumberProps:r={},selectProps:s={},onChange:i,"aria-invalid":d,setInputNumberStatus:c,setSelectStatus:u,style:m={}}=e,p=fe(l),h=(0,a.useMemo)((()=>{if(c&&"true"===d)return c(n)}),[d,n]),b=(0,a.useMemo)((()=>{if(u&&"true"===d)return u(n)}),[d,n]);return(0,o.jsxs)("div",{className:Ze,style:m,children:[(0,o.jsx)(Qe.A,{className:Xe,value:n&&n.length>=1?n[0]:void 0,disabled:p,status:h,...r,onChange:e=>{const t=n&&n.length>=2?[e,n[1]]:[e,void 0];i?.(t)}}),(0,o.jsx)(Ke.A,{className:Je,value:n&&n.length>=2?n[1]:void 0,options:t,disabled:p,status:b,...s,onChange:(e,t)=>{const a=n&&n.length>=1?[n[0],e]:[void 0,e];i?.(a,t)}})]})},nn=()=>{const[e]=Ce.A.useForm();return(0,o.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,o.jsxs)(_e.A,{gutter:16,children:[(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,o.jsx)(en,{options:[{name:"工作日",id:"workingDay"},{name:"自然日",id:"naturalDay"}],inputNumberProps:{addonAfter:"个"},selectProps:{fieldNames:{label:"name",value:"id"}}})})}),(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",children:(0,o.jsx)(en,{options:[{label:"年",value:"year"},{label:"月",value:"month"},{label:"天",value:"day"}],inputNumberProps:{min:0,max:1e4,precision:2}})})})]})})},tn="InputNumberAndSelectSample_container__YVhxN",an=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col } from "antd";\nimport InputNumberAndSelect from "@/components/formItems/InputNumberAndSelect";\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form} labelAlign=\'right\'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field1\'>\n            <InputNumberAndSelect\n              options={[\n                { name: "工作日", id: "workingDay" },\n                { name: "自然日", id: "naturalDay" },\n              ]}\n              inputNumberProps={{ addonAfter: "个" }}\n              selectProps={{\n                fieldNames: { label: "name", value: "id" },\n              }}\n            />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\'>\n            <InputNumberAndSelect\n              options={[\n                { label: "年", value: "year" },\n                { label: "月", value: "month" },\n                { label: "天", value: "day" },\n              ]}\n              inputNumberProps={{ min: 0, max: 10000, precision: 2 }}\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat([{fileName:"InputNumberAndSelect.tsx",code:'/**\n * 左边数值输入框右边下拉框的复合组件\n */\nimport React, { useMemo } from "react";\nimport { InputNumber, Select } from "antd";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\nexport type Value = [number | string | null | undefined, string | undefined];\ntype Status = "warning" | "error" | "" | undefined;\n\ntype InputNumberAndSelectProps = {\n  value?: Value;\n  options: Record<string, any>;\n  disabled?: boolean;\n  inputNumberProps?: Record<string, any>; // 传递给数值输入框的属性值\n  selectProps?: Record<string, any>; // 传递给下拉框的属性值\n  onChange?: (value: Value, option?: Record<string, any>) => void; // 如果修改下拉框则onChange的第二个参数会返回option\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  setInputNumberStatus?: (value: Value | undefined) => Status; // 当form校验时，设置数值输入框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  setSelectStatus?: (value: Value | undefined) => Status; // 当form校验时，设置日期选择框的status属性值。当使用该属性时，要给外层的Form.Item设置validateStatus为\'\'\n  style?: Record<string, any>;\n};\n\nconst InputNumberAndSelect = (props: InputNumberAndSelectProps) => {\n  const {\n    value,\n    options = [],\n    disabled: selfDisabled,\n    inputNumberProps = {},\n    selectProps = {},\n    onChange,\n    ["aria-invalid"]: invalid,\n    setInputNumberStatus,\n    setSelectStatus,\n    style = {},\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onInputNumberChange = (v: number | string | null) => {\n    const newValue: Value =\n      value && value.length >= 2 ? [v, value[1]] : [v, undefined];\n    onChange?.(newValue);\n  };\n\n  const onSelectChange = (v: string, option: Record<string, any>) => {\n    const newValue: Value =\n      value && value.length >= 1 ? [value[0], v] : [undefined, v];\n    onChange?.(newValue, option);\n  };\n\n  const inputNumberStatus = useMemo(() => {\n    if (setInputNumberStatus && invalid === "true") {\n      return setInputNumberStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  const selectStatus = useMemo(() => {\n    if (setSelectStatus && invalid === "true") {\n      return setSelectStatus(value);\n    }\n    return undefined;\n  }, [invalid, value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      <InputNumber\n        className={styles.inputNumber}\n        value={value && value.length >= 1 ? value[0] : undefined}\n        disabled={disabled}\n        status={inputNumberStatus}\n        {...inputNumberProps}\n        onChange={onInputNumberChange}\n      />\n      <Select\n        className={styles.select}\n        value={value && value.length >= 2 ? value[1] : undefined}\n        options={options as any[]}\n        disabled={disabled}\n        status={selectStatus}\n        {...selectProps}\n        onChange={onSelectChange}\n      />\n    </div>\n  );\n};\n\nexport default InputNumberAndSelect;'},{fileName:"InputNumberAndSelect.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  .inputNumber {\n    display: flex;\n    flex: 1;\n  }\n  .select {\n    display: flex;\n    flex: 1;\n    margin-left: 8px;\n  }\n}"}]),ln=()=>(0,o.jsx)(me,{className:tn,title:"左边数值输入框右边下拉框的复合组件",codeParams:an,children:(0,o.jsx)(nn,{})});var rn=t(9822),on=t(5709);const sn="CanAddMultiple_container__ZEPWF",dn="CanAddMultiple_row__--s1X",cn="CanAddMultiple_addBtn__tRlxQ",un="CanAddMultiple_disabled__ZEO7H",mn="CanAddMultiple_deleteBtn__s+wlP",pn=e=>{const{value:n,disabled:t,hideBtn:l=!1,maxRows:r=-1,children:s,onChange:i,style:d={},...c}=e,u=fe(t),m=(e,t,a)=>{if(n&&n.length>0){const l=[];n.forEach(((n,a)=>{a===e?l.push(t):l.push(n)})),i?.(l,...a)}else i?.([t],...a)},p=()=>{if(u)return;let e=[void 0,void 0];if(n&&n.length>0){if(r>0&&n.length>=r)return void G.Ay.warning(`最多可添加${r}个`);e=[...n,void 0]}i?.(e)},h=(0,a.useMemo)((()=>n&&n.length>0?n:[void 0]),[n]);return(0,o.jsx)("div",{className:sn,style:d,children:h.map(((e,t)=>(0,o.jsxs)("div",{className:dn,children:[s?a.cloneElement(s,{value:e,disabled:u,index:t,onChange:function(e){for(var n=arguments.length,a=new Array(n>1?n-1:0),l=1;l<n;l++)a[l-1]=arguments[l];return m(t,e,a)},...c}):null,!l&&(0,o.jsxs)(o.Fragment,{children:[0===t&&(0,o.jsx)("div",{className:`${cn}${u?` ${un}`:""}`,onClick:p,children:(0,o.jsx)(rn.A,{})}),t>0&&(0,o.jsx)("div",{className:`${mn}${u?` ${un}`:""}`,onClick:()=>(e=>{if(!u&&n&&n.length>0){const t=n.filter(((n,t)=>t!==e));i?.(t)}})(t),children:(0,o.jsx)(on.A,{})})]})]},t)))})},hn=[{fileName:"CanAddMultiple.tsx",code:'/**\n * 可增加和删除多条数据的包装组件\n */\nimport React, { useMemo, ReactElement } from "react";\nimport { message } from "antd";\nimport { PlusCircleOutlined, MinusCircleOutlined } from "@ant-design/icons";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport styles from "./index.module.scss";\n\ntype Value = any[];\n\ntype CanAddMultipleProps = {\n  value?: Value;\n  disabled?: boolean;\n  hideBtn?: boolean; // 是否隐藏新增和删除按钮\n  maxRows?: number; // 最多可显示的行个数, 默认为-1无限制\n  children?: ReactElement | null; // children必须是支持value和onChange属性的组件\n  onChange?: (value: Value, ...restProps: any[]) => void;\n  style?: Record<string, any>;\n} & { [key in string]: any };\n\nconst CanAddMultiple = (props: CanAddMultipleProps) => {\n  const {\n    value,\n    disabled: selfDisabled,\n    hideBtn = false,\n    maxRows = -1,\n    children,\n    onChange,\n    style = {},\n    ...restProrps\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const onChildrenChange = (index: number, rowValue: any, restProps: any[]) => {\n    if (value && value.length > 0) {\n      const newValue: Value = [];\n      value.forEach((item: any, i: number) => {\n        if (i === index) {\n          newValue.push(rowValue);\n        } else {\n          newValue.push(item);\n        }\n      });\n      onChange?.(newValue, ...restProps);\n    } else {\n      onChange?.([rowValue], ...restProps);\n    }\n  };\n\n  const onAdd = () => {\n    if (disabled) return;\n    let newValue: Value = [undefined, undefined];\n    if (value && value.length > 0) {\n      if (maxRows > 0 && value.length >= maxRows) {\n        message.warning(`最多可添加${maxRows}个`);\n        return;\n      }\n      newValue = [...value, undefined];\n    }\n    onChange?.(newValue);\n  };\n\n  const onDelete = (index: number) => {\n    if (disabled) return;\n    if (value && value.length > 0) {\n      const newValue: Value = value.filter((_: any, i: number) => i !== index);\n      onChange?.(newValue);\n    }\n  };\n\n  const finalValue = useMemo(() => {\n    if (value && value.length > 0) {\n      return value;\n    }\n    return [undefined];\n  }, [value]);\n\n  return (\n    <div className={styles.container} style={style}>\n      {finalValue.map((itemValue: any, index: number) => {\n        return (\n          <div className={styles.row} key={index}>\n            {children\n              ? React.cloneElement(children, {\n                  value: itemValue,\n                  disabled,\n                  index,\n                  onChange: (value: any, ...restProps: any[]) =>\n                    onChildrenChange(index, value, restProps),\n                  ...restProrps,\n                })\n              : null}\n            {!hideBtn && (\n              <>\n                {index === 0 && (\n                  <div\n                    className={`${styles.addBtn}${\n                      disabled ? ` ${styles.disabled}` : ""\n                    }`}\n                    onClick={onAdd}\n                  >\n                    <PlusCircleOutlined />\n                  </div>\n                )}\n                {index > 0 && (\n                  <div\n                    className={`${styles.deleteBtn}${\n                      disabled ? ` ${styles.disabled}` : ""\n                    }`}\n                    onClick={() => onDelete(index)}\n                  >\n                    <MinusCircleOutlined />\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CanAddMultiple;'},{fileName:"CanAddMultiple.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  .row {\n    display: flex;\n    align-items: center;\n    &:not(:first-child) {\n      margin-top: 8px;\n    }\n\n    $btnSize: 16px;\n    .addBtn:not(.disabled) {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      :global {\n        svg {\n          width: $btnSize;\n          height: $btnSize;\n          path {\n            fill: $globalPrimaryColor;\n          }\n        }\n      }\n    }\n\n    .deleteBtn:not(.disabled) {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      :global {\n        svg {\n          width: $btnSize;\n          height: $btnSize;\n          path {\n            fill: $globalRedColor;\n          }\n        }\n      }\n    }\n\n    .disabled {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: not-allowed;\n      :global {\n        svg {\n          width: $btnSize;\n          height: $btnSize;\n          path {\n            fill: $disabledColor;\n          }\n        }\n      }\n    }\n  }\n}"}],{Option:bn}=Ke.A,fn=()=>{const[e]=Ce.A.useForm(),n=(0,o.jsxs)(Ke.A,{defaultValue:"http://",children:[(0,o.jsx)(bn,{value:"http://",children:"http://"}),(0,o.jsx)(bn,{value:"https://",children:"https://"})]}),t=(0,o.jsxs)(Ke.A,{defaultValue:".com",children:[(0,o.jsx)(bn,{value:".com",children:".com"}),(0,o.jsx)(bn,{value:".jp",children:".jp"}),(0,o.jsx)(bn,{value:".cn",children:".cn"}),(0,o.jsx)(bn,{value:".org",children:".org"})]});return(0,o.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,o.jsxs)(_e.A,{gutter:16,children:[(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,o.jsx)(pn,{maxRows:5,children:(0,o.jsx)(qe,{inputProps:{addonBefore:n,addonAfter:t},checkboxLabel:"复选框标题"})})})}),(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",children:(0,o.jsx)(pn,{maxRows:6,children:(0,o.jsx)(en,{style:{marginRight:"8px"},options:[{name:"工作日",id:"workingDay"},{name:"自然日",id:"naturalDay"}],inputNumberProps:{addonAfter:"个"},selectProps:{fieldNames:{label:"name",value:"id"}}})})})})]})})},xn="CanAddMultipleSample_container__F08Q9",gn=[{fileName:"index.tsx",code:"import React from \"react\";\nimport { Form, Row, Col, Select } from \"antd\";\nimport CanAddMultiple from \"@/components/formItems/CanAddMultiple\";\nimport InputAndCheckbox from \"@/components/formItems/InputAndCheckbox\";\nimport InputNumberAndSelect from \"@/components/formItems/InputNumberAndSelect\";\n\nconst { Option } = Select;\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  const selectBefore = (\n    <Select defaultValue='http://'>\n      <Option value='http://'>http://</Option>\n      <Option value='https://'>https://</Option>\n    </Select>\n  );\n  const selectAfter = (\n    <Select defaultValue='.com'>\n      <Option value='.com'>.com</Option>\n      <Option value='.jp'>.jp</Option>\n      <Option value='.cn'>.cn</Option>\n      <Option value='.org'>.org</Option>\n    </Select>\n  );\n\n  return (\n    <Form form={form} labelAlign='right'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field1'>\n            <CanAddMultiple maxRows={5}>\n              <InputAndCheckbox\n                inputProps={{\n                  addonBefore: selectBefore,\n                  addonAfter: selectAfter,\n                }}\n                checkboxLabel='复选框标题'\n              />\n            </CanAddMultiple>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label='字段标题' name='field2'>\n            <CanAddMultiple maxRows={6}>\n              <InputNumberAndSelect\n                style={{ marginRight: \"8px\" }}\n                options={[\n                  { name: \"工作日\", id: \"workingDay\" },\n                  { name: \"自然日\", id: \"naturalDay\" },\n                ]}\n                inputNumberProps={{ addonAfter: \"个\" }}\n                selectProps={{\n                  fieldNames: { label: \"name\", value: \"id\" },\n                }}\n              />\n            </CanAddMultiple>\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;"}].concat(hn),vn=()=>(0,o.jsx)(me,{className:xn,title:"可增加和删除多条数据的包装组件",codeParams:gn,children:(0,o.jsx)(fn,{})});var yn=t(811),kn=t(8676);class Cn{notification=null;keyMap=(()=>new Map)();constructor(){this.keys=[],kn.A.newInstance({},(e=>this.notification=e))}add(e){let{key:n,content:t,duration:a=null,dismiss:l}=e;this.keyMap.set(n,l),this.notification.notice({key:n,content:t,duration:a})}remove(e){this.notification.removeNotice(e),this.keyMap.delete(e)}clear(){this.keyMap.forEach(((e,n)=>{e?e():this.remove(n)})),this.keyMap.clear()}}Cn.getInstance=function(){let e;return function(){return e=e||new Cn,e}}();const _n=Cn.getInstance();var An=t(2877),jn=t(7852),Pn=t(2543),In=t.n(Pn);const Rn="TreeSelect_modal__RA3WD",wn="TreeSelect_modal_title__1iJkY",Sn="TreeSelect_modal_body__6ZM8L",Nn="TreeSelect_treebox__hUQAp",Fn="TreeSelect_choosebox__1d2Gk",Dn="TreeSelect_box_header__npPGp",Tn="TreeSelect_box_content__D7zpo",En="TreeSelect_chooseList__-PDwI",Vn="TreeSelect_chooseName__EjF0Z",Mn="TreeSelect_close__dDSzc",Ln="TreeSelect_clear__rwXuO",On="TreeSelect_search_act__zXmnz";class $n extends a.Component{constructor(e){super(e);const{treeData:n=[]}=e;this.state={visible:!0,checkAll:!1,indeterminate:!1,autoExpandParent:!0,checkedKeys:[],checkedNodes:[],expandedKeys:[],expandedValue:n,searchValue:""},this.deepLv=1,this.treeDataMap=this._tree2map(n,[],null,1),this.treeData=n,this.leafNodes=this.treeDataMap.filter((e=>e.lv===this.deepLv)),this._onSearch=this._onSearch.bind(this),this._onChangeAll=this._onChangeAll.bind(this),this._onClearAll=this._onClearAll.bind(this),this._onCheckTree=this._onCheckTree.bind(this),this._onExpandTree=this._onExpandTree.bind(this),this._onCancel=this._onCancel.bind(this),this._onOk=this._onOk.bind(this)}componentDidMount(){this._onCheckTree(this.props.value)}isCheckAll=(e,n)=>{let t=!1,a=!1;const l=[],r=[],o=n=>{for(let t=0;t<n.length;t++){const a=n[t];if(a.children&&a.children.length>0)o(a.children);else{l.push(a.key);const n=In().find(e,(e=>e.key===a.key));n&&r.push(n)}}};return o(n||this.state.expandedValue),r.length>=l.length&&(t=!0),r.length>0&&r.length<l.length&&(a=!0),{checkAll:t,indeterminate:a}};getAllSubset=e=>{const n=[],t=e=>{if(e&&e.length>0)for(let a=0;a<e.length;a++){const l=e[a];if(l.children&&l.children.length>0)t(l.children);else{const e={...l,key:l.key||l.value,title:l.title||l.label};n.push(e)}}};return t(e),n};searchTree=(e,n)=>{let t=[],a=new Set;return function e(l){l.forEach((l=>{l.title.indexOf(n)>-1&&(a.has(l.key)||a.has(l.parentKey)||(t.push(l),a.add(l.key))),l.children&&e(l.children)}))}(e),t};_tree2map=(()=>{var e=this;return function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;l>e.deepLv&&(e.deepLv=l);for(let r=0;r<n.length;r++){const o=n[r],s=o.title||o.label,i=o.key||o.value;o.key=i,o.title=s,o.parentKey=a,o.lv=l,t.push({key:i,title:s,parentKey:a,lv:l}),o.children?.length&&e._tree2map(o.children,t,o.key,l+1)}return t}})();_isChinese=e=>{for(var n=!0,t=0;t<e.length;t++)n=n&&e.charCodeAt(t)>=1e4;return n};_onSearch=e=>{let n=[],t=[];const{value:a}=e.target;a||(t=this.treeData),a&&this._isChinese(a)&&(n=this.treeDataMap.map((e=>e.title.indexOf(a)>-1?e.parentKey:null)).filter(((e,n,t)=>e&&t.indexOf(e)===n)),t=this.searchTree(this.treeData,a));const{checkAll:l,indeterminate:r}=this.isCheckAll(this.state.checkedNodes,t),o=this.state.checkedNodes.map((e=>e.key));this.setState({checkAll:l,indeterminate:r,expandedKeys:n,expandedValue:t,searchValue:a,autoExpandParent:!0,checkedKeys:o})};_onChangeAll=e=>{const n=e.target.checked;let t=this.state.checkedNodes,a=[];const l=this.getAllSubset([...this.state.expandedValue]);n?(t=In().uniqBy(l.concat(t),"key"),a=t.map((e=>e.value))):(l.forEach((e=>{In().remove(t,(n=>n.key===e.key))})),a=t.map((e=>e.value))),this.setState({checkAll:n,checkedKeys:a,checkedNodes:t,indeterminate:!1})};_onClearAll=()=>{this.setState({checkAll:!1,indeterminate:!1,checkedKeys:[],checkedNodes:[],expandedKeys:[]})};_onCheckTree=(e,n)=>{if(e=[...e,...this.state.checkedKeys],e=In().uniq(e),n&&!n.checked){const t=n.node;t.children&&t.children.length>0&&t.children.forEach((n=>{In().remove(e,(e=>e===n.key))})),In().remove(e,(e=>e===t.key))}const t=this.leafNodes.filter((n=>e.includes(n.key))),a=t.map((e=>e.key)),{checkAll:l,indeterminate:r}=this.isCheckAll(t);this.setState({checkedKeys:a,checkedNodes:t,checkAll:l,indeterminate:r})};_onExpandTree=e=>{this.setState({expandedKeys:e,autoExpandParent:!1})};_onRemove=e=>{let{checkedKeys:n,checkedNodes:t,indeterminate:a,checkAll:l}=this.state;t.splice(e,1),n=t.map((e=>e.key)),n.length||(a=!1,l=!1),this.setState({checkAll:l,checkedKeys:n,checkedNodes:t,indeterminate:a})};_onCancel=()=>{this.setState({visible:!1}),this.props.onPress({index:0})};_onOk=()=>{const{checkedKeys:e,checkedNodes:n}=this.state;this.setState({visible:!1}),this.props.onPress({index:1,checkedKeys:e,checkedNodes:n})};orderSort(e,n){var t=e.title,a=n.title;return a>t?-1:a<t?1:0}render(){const{title:e="示例窗口",disabled:n=!1}=this.props,{visible:t,checkAll:a,indeterminate:l,autoExpandParent:r,checkedKeys:s=[],checkedNodes:i=[],expandedKeys:d=[],searchValue:c=""}=this.state,u=function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).map((e=>{const{lv:n,parentKey:t,key:a}=e,l=e.title.indexOf(c),r=e.title.substr(0,l),s=e.title.substr(l+c.length),i=l>-1?(0,o.jsxs)("span",{children:[r,(0,o.jsx)("span",{className:On,children:c}),s]}):(0,o.jsx)("span",{children:e.title});return e.children?{key:a,title:i,lv:n,parentKey:t,children:u(e.children)}:{key:a,title:i,lv:n,parentKey:t}}))};return(0,o.jsx)(g.A,{width:580,className:Rn,visible:t,centered:!0,maskClosable:!0,title:(0,o.jsx)("div",{className:wn,children:e},"title"),cancelText:"取消",onCancel:this._onCancel,okText:"提交",onOk:this._onOk,children:(0,o.jsxs)("div",{className:Sn,children:[(0,o.jsxs)("div",{className:Nn,children:[(0,o.jsx)("div",{className:Dn,children:(0,o.jsx)(Le.A,{placeholder:"搜索",suffix:(0,o.jsx)(An.A,{}),allowClear:!0,onChange:this._onSearch,disabled:n})}),(0,o.jsxs)("div",{className:Tn,children:[(0,o.jsx)(he.A,{checked:a,indeterminate:l,onChange:this._onChangeAll,disabled:n,children:"全选"}),(0,o.jsx)(yn.A,{treeData:u(this.state.expandedValue),blockNode:!0,checkable:!0,checkedKeys:s,expandedKeys:d,autoExpandParent:r,onExpand:this._onExpandTree,onCheck:this._onCheckTree,disabled:n})]})]}),(0,o.jsxs)("div",{className:Fn,children:[(0,o.jsxs)("div",{className:Dn,children:[(0,o.jsx)("div",{children:`已选${i.length}项`}),!n&&(0,o.jsx)("div",{className:Ln,onClick:this._onClearAll,children:"清空"})]}),(0,o.jsx)("div",{className:Tn,children:(0,o.jsx)("ul",{className:En,children:i.sort(this.orderSort).map(((e,t)=>(0,o.jsxs)("li",{children:[(0,o.jsx)("div",{className:Vn,children:e.title}),!n&&(0,o.jsx)(jn.A,{className:Mn,onClick:this._onRemove.bind(this,t)})]},e.key)))})})]})]})})}}const Bn=new class{__key__="";show=e=>new Promise((n=>{""===this.__key__&&(this.__key__=String(Date.now()),_n.add({key:this.__key__,content:(0,o.jsx)($n,{...e,onPress:e=>{_n.remove(this.__key__),this.__key__="",n(e)}}),duration:null}))}));dismiss=()=>{this.__key__.length>0&&(_n.remove(this.__key__),this.__key__="")}},qn=function(){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).map((n=>{n?.children?.length>0?qn(n.children,e):e.push(n)})),e},Wn=e=>{let{value:n=[""],onChange:t=e=>{},options:a=[],title:l="示例测试",width:r=200}=e;const s=qn(a,[]),i=n.length,d=s.length;return(0,o.jsx)(Ke.A,{style:{width:r},value:a.length?`${i===d?"全部":`${i}/${d}项`}${l}`:"请联系管理员开通权限",disabled:!a.length,options:[],open:!1,showArrow:!0,onClick:async()=>{const{index:e,checkedKeys:r}=await Bn.show({title:l,value:n,treeData:a});1===e&&r.length&&t(r)}})},Kn=[{id:999,label:"四川测试公司",value:"sichuan",type:null,children:[{id:1,label:"成都市",value:"chengdu",type:null,children:[{id:1,label:"示例1",value:"1",type:null,children:[{id:1,label:"示例1-1",value:"2",type:3,children:null}]}]},{id:2,label:"眉山市",value:"meishan",type:null,children:[{id:1,label:"示例2",value:"3",type:null,children:[{id:1,label:"示例2-1",value:"4",type:3,children:null}]}]},{id:3,label:"乐山市",value:"leshan",type:null,children:[{id:1,label:"示例3",value:"5",type:null,children:[{id:1,label:"示例3-1",value:"6",type:3,children:null}]}]}]},{id:1,label:"云南测试公司",value:"yunnan",type:null,children:[{id:1,label:"昆明市",value:"kunming",type:null,children:[{id:1,label:"示例1",value:"7",type:null,children:[{id:1,label:"示例1-2",value:"8",type:3,children:null}]}]},{id:2,label:"大理市",value:"dali",type:null,children:[{id:1,label:"示例2",value:"9",type:null,children:[{id:1,label:"示例2-1",value:"10",type:3,children:null}]}]}]}],Hn="SelectBoxSample_container__PTinc",Un=()=>{const[e]=Ce.A.useForm();return(0,o.jsx)(me,{className:Hn,title:"下拉选择框的复合组件",children:(0,o.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,o.jsx)(_e.A,{gutter:16,children:(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",children:(0,o.jsx)(Wn,{value:["4"],options:Kn||[],onChange:()=>{}})})})})})})};var zn=t(2629);const Gn="WithValidateMessage_container__w-KWx",Yn="WithValidateMessage_componentBox__FXDFV",Qn="WithValidateMessage_messageBox__Mc3qF",Zn=e=>{const{form:n,nevervalidate:t=!1,id:l="","aria-invalid":r,children:s,className:i,style:d={},...c}=e,u=(0,a.useMemo)((()=>{let e="";if(!t&&n&&l&&"true"===r){const t=l.split("_");let a=[];a=t.length>=3?n.getFieldError([t[0],Number(t[1]),t[2]]):n.getFieldError(t[0]),e=a[0]}return e}),[n,t,l,r]);return(0,o.jsxs)("div",{className:`${Gn}${i?` ${i}`:""}`,style:d,children:[(0,o.jsx)("div",{className:Yn,style:{width:t?"100%":"calc(100% - 28px)"},children:s?a.cloneElement(s,{...c,"aria-invalid":r,id:l}):null}),!t&&!!u&&(0,o.jsx)("div",{className:Qn,children:(0,o.jsx)(x.A,{title:u,children:(0,o.jsx)(zn.A,{})})})]})},Xn=[{fileName:"WithValidateMessage.tsx",code:'/**\n * 用于显示自定义校验信息的FormItem组件的包装组件(注意：如果子组件需要传onChange属性，则必须由该包装组件进行传递，不能写在子组件里；要在外层组件中将.ant-form-item-explain类样式的display属性覆盖为none)\n */\nimport React, { useMemo, ReactElement } from "react";\nimport { Tooltip, type FormInstance } from "antd";\nimport { ExclamationCircleOutlined } from "@ant-design/icons";\nimport styles from "./index.module.scss";\n\ntype WithValidateMessageProps = {\n  form?: FormInstance | null; // form对象，nevervalidate为true时可以不传\n  nevervalidate?: boolean; // 是否绝对不会进行校验，该值为true时，组件后面不会有校验信息的图标，也不会占用空间\n  id?: string; // Form.Item组件自动传入\n  "aria-invalid"?: string; // Form校验时会自动传入"true"\n  children?: ReactElement | null; // children必须是支持value和onChange属性的组件\n  className?: string;\n  style?: Record<string, any>;\n} & { [key in string]: any };\n\nconst WithValidateMessage = (props: WithValidateMessageProps) => {\n  const {\n    form,\n    nevervalidate = false,\n    id = "",\n    ["aria-invalid"]: invalid,\n    children,\n    className,\n    style = {},\n    ...restProps\n  } = props;\n\n  // 获取校验信息\n  const errorMessage = useMemo(() => {\n    let str = "";\n    if (!nevervalidate && form && id && invalid === "true") {\n      const namePath = id.split("_");\n      let errorList = [];\n      // 兼容Form.List\n      if (namePath.length >= 3) {\n        errorList = form.getFieldError([\n          namePath[0],\n          Number(namePath[1]),\n          namePath[2],\n        ]);\n      } else {\n        errorList = form.getFieldError(namePath[0]);\n      }\n      str = errorList[0];\n    }\n    return str;\n  }, [form, nevervalidate, id, invalid]);\n\n  return (\n    <div\n      className={`${styles.container}${className ? ` ${className}` : ""}`}\n      style={style}\n    >\n      <div\n        className={styles.componentBox}\n        style={{ width: nevervalidate ? "100%" : "calc(100% - 28px)" }}\n      >\n        {children\n          ? React.cloneElement(children, {\n              ...restProps,\n              "aria-invalid": invalid,\n              id,\n            })\n          : null}\n      </div>\n      {!nevervalidate && !!errorMessage && (\n        <div className={styles.messageBox}>\n          <Tooltip title={errorMessage}>\n            <ExclamationCircleOutlined />\n          </Tooltip>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WithValidateMessage;'},{fileName:"WithValidateMessage.module.scss",code:".container {\n  width: 100%;\n  display: flex;\n  $messageWidth: 26px;\n  .componentBox {\n    display: flex;\n    align-items: center;\n  }\n  .messageBox {\n    width: $messageWidth;\n    height: $messageWidth;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 3px;\n    margin-left: 2px;\n    svg {\n      width: 18px;\n      height: 18px;\n      path {\n        fill: $globalRedColor;\n      }\n    }\n  }\n}"}],Jn=/^([\w+-.%]+@[\w-.]+\.[A-Za-z]{2,4})(;[\w+-.]+@[\w-.]+\.[A-Za-z]{2,4})*$/,et=[{required:!0,message:"必填项"}],nt=[{required:!0,message:"请选择"}],tt=[{validator:(e,n)=>n&&n.length>0&&(n[0]||0===n[0]||n[1])?(n[0]||0===n[0])&&n[1]?Promise.resolve():Promise.reject("两个都必填"):Promise.reject("必填项")}],at=[{validator:(e,n)=>{if(!(n&&n.length>0))return Promise.reject("邮箱必填");{let e=!1;for(let t=0,a=n.length;t<a;t++){const a=n[t];if(!(a&&a[0]&&a[0].trim()))return Promise.reject("邮箱必填");Jn.test(a[0].trim())||(e=!0)}if(e)return Promise.reject("邮箱格式不正确")}return Promise.resolve()}}],lt=()=>{const[e]=Ce.A.useForm();return(0,o.jsx)(Ce.A,{form:e,labelAlign:"right",children:(0,o.jsxs)(_e.A,{gutter:16,children:[(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field1",rules:et,children:(0,o.jsx)(Zn,{form:e,children:(0,o.jsx)(Le.A,{})})})}),(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field2",rules:nt,children:(0,o.jsx)(Zn,{form:e,children:(0,o.jsx)(Ke.A,{options:[{label:"A",value:"a"},{label:"B",value:"b"}]})})})}),(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field3",rules:tt,required:!0,validateStatus:"",children:(0,o.jsx)(Zn,{form:e,children:(0,o.jsx)(en,{options:[{name:"工作日",id:"workingDay"},{name:"自然日",id:"naturalDay"}],inputNumberProps:{addonAfter:"个"},selectProps:{fieldNames:{label:"name",value:"id"},allowClear:!0},setInputNumberStatus:e=>!e||!e[0]&&0!==e[0]?"error":"",setSelectStatus:e=>e&&e[1]?"":"error"})})})}),(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"字段标题",name:"field4",rules:et,children:(0,o.jsx)(Zn,{form:e,children:(0,o.jsx)(qe,{checkboxLabel:"复选框标题"})})})}),(0,o.jsx)(Ae.A,{span:12,children:(0,o.jsx)(Ce.A.Item,{label:"邮箱",name:"field5",rules:at,required:!0,validateStatus:"",children:(0,o.jsx)(Zn,{form:e,children:(0,o.jsx)(pn,{maxRows:5,children:(0,o.jsx)(qe,{checkboxLabel:"是否同步到平台",setInputStatus:e=>e&&e[0]&&e[0].trim()&&Jn.test(e[0].trim())?"":"error"})})})})}),(0,o.jsx)(Ae.A,{span:24,style:{display:"flex",justifyContent:"flex-end",paddingRight:"30px"},children:(0,o.jsx)(E.Ay,{type:"primary",onClick:async()=>{try{const n=await(e?.validateFields());console.log("values:",n)}catch(e){}},children:"提交"})})]})})},rt="WithValidateMessageSample_container__z3ia8",ot=[{fileName:"index.tsx",code:'import React from "react";\nimport { Form, Row, Col, Input, Select, Button } from "antd";\nimport WithValidateMessage from "@/components/formItems/WithValidateMessage";\nimport CanAddMultiple from "@/components/formItems/CanAddMultiple";\nimport InputAndCheckbox from "@/components/formItems/InputAndCheckbox";\nimport type { Value as InputAndCheckboxValue } from "@/components/formItems/InputAndCheckbox";\nimport InputNumberAndSelect from "@/components/formItems/InputNumberAndSelect";\nimport type { Value as InputNumberAndSelectValue } from "@/components/formItems/InputNumberAndSelect";\n\nconst EMAIL_PATTERN =\n  /^([w+-.%]+@[w-.]+.[A-Za-z]{2,4})(;[w+-.]+@[w-.]+.[A-Za-z]{2,4})*$/;\n\nconst REQUIRED_FORM_ITEM_RULES = [{ required: true, message: "必填项" }];\nconst CUSTOM_SELECT_RULES = [{ required: true, message: "请选择" }];\nconst INPUTNUMBER_SELECT_RULES = [\n  {\n    validator: (_: Record<string, any>, value: InputNumberAndSelectValue) => {\n      if (value && value.length > 0) {\n        if (!value[0] && value[0] !== 0 && !value[1]) {\n          return Promise.reject("必填项");\n        } else {\n          if (!value[0] && value[0] !== 0) {\n            return Promise.reject("两个都必填");\n          }\n          if (!value[1]) {\n            return Promise.reject("两个都必填");\n          }\n        }\n      } else {\n        return Promise.reject("必填项");\n      }\n      return Promise.resolve();\n    },\n  },\n];\nconst MULTIPLE_EMAIL_RULES = [\n  {\n    validator: (\n      _: Record<string, any>,\n      value: ([string | undefined, boolean | undefined] | undefined)[]\n    ) => {\n      if (value && value.length > 0) {\n        let hasBadValue = false;\n        for (let i = 0, l = value.length; i < l; i++) {\n          const item = value[i];\n          if (!item || !item[0] || !item[0].trim()) {\n            return Promise.reject("邮箱必填");\n          } else if (!EMAIL_PATTERN.test(item[0].trim())) {\n            hasBadValue = true;\n          }\n        }\n        if (hasBadValue) {\n          return Promise.reject("邮箱格式不正确");\n        }\n      } else {\n        return Promise.reject("邮箱必填");\n      }\n      return Promise.resolve();\n    },\n  },\n];\n\nconst Content = () => {\n  const [form] = Form.useForm();\n\n  // 点击提交\n  const onSubmit = async () => {\n    try {\n      const values = await form?.validateFields();\n      console.log("values:", values);\n    } catch (err) {}\n  };\n\n  return (\n    <Form form={form} labelAlign=\'right\'>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item\n            label=\'字段标题\'\n            name=\'field1\'\n            rules={REQUIRED_FORM_ITEM_RULES}\n          >\n            <WithValidateMessage form={form}>\n              <Input />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item label=\'字段标题\' name=\'field2\' rules={CUSTOM_SELECT_RULES}>\n            <WithValidateMessage form={form}>\n              <Select\n                options={[\n                  { label: "A", value: "a" },\n                  { label: "B", value: "b" },\n                ]}\n              />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\'字段标题\'\n            name=\'field3\'\n            rules={INPUTNUMBER_SELECT_RULES}\n            required\n            validateStatus=\'\'\n          >\n            <WithValidateMessage form={form}>\n              <InputNumberAndSelect\n                options={[\n                  { name: "工作日", id: "workingDay" },\n                  { name: "自然日", id: "naturalDay" },\n                ]}\n                inputNumberProps={{ addonAfter: "个" }}\n                selectProps={{\n                  fieldNames: { label: "name", value: "id" },\n                  allowClear: true,\n                }}\n                setInputNumberStatus={(\n                  value: InputNumberAndSelectValue | undefined\n                ) => {\n                  if (!value || (!value[0] && value[0] !== 0)) {\n                    return "error";\n                  }\n                  return "";\n                }}\n                setSelectStatus={(\n                  value: InputNumberAndSelectValue | undefined\n                ) => {\n                  if (!value || !value[1]) {\n                    return "error";\n                  }\n                  return "";\n                }}\n              />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\'字段标题\'\n            name=\'field4\'\n            rules={REQUIRED_FORM_ITEM_RULES}\n          >\n            <WithValidateMessage form={form}>\n              <InputAndCheckbox checkboxLabel=\'复选框标题\' />\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\'邮箱\'\n            name=\'field5\'\n            rules={MULTIPLE_EMAIL_RULES}\n            required\n            validateStatus=\'\'\n          >\n            <WithValidateMessage form={form}>\n              <CanAddMultiple maxRows={5}>\n                <InputAndCheckbox\n                  checkboxLabel=\'是否同步到平台\'\n                  setInputStatus={(\n                    value: InputAndCheckboxValue | undefined\n                  ) => {\n                    if (\n                      !value ||\n                      !value[0] ||\n                      !value[0].trim() ||\n                      !EMAIL_PATTERN.test(value[0].trim())\n                    ) {\n                      return "error";\n                    }\n                    return "";\n                  }}\n                />\n              </CanAddMultiple>\n            </WithValidateMessage>\n          </Form.Item>\n        </Col>\n        <Col\n          span={24}\n          style={{\n            display: "flex",\n            justifyContent: "flex-end",\n            paddingRight: "30px",\n          }}\n        >\n          <Button type=\'primary\' onClick={onSubmit}>\n            提交\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Content;'}].concat(Xn),st=()=>(0,o.jsx)(me,{className:rt,title:"用于显示自定义校验信息的FormItem组件的包装组件",codeParams:ot,children:(0,o.jsx)(lt,{})}),it="FormItemSection_container__aQMvM",dt="FormItemSection_sample__7pqvq",ct=[(0,o.jsx)(Re,{}),(0,o.jsx)(Me,{}),(0,o.jsx)(Ye,{}),(0,o.jsx)(ln,{}),(0,o.jsx)(vn,{}),(0,o.jsx)(Un,{}),(0,o.jsx)(st,{})],ut=()=>(0,o.jsx)("div",{className:it,children:ct.map(((e,n)=>(0,o.jsx)("div",{className:dt,children:e},n)))});var mt=t(401),pt=t(5059),ht=t(1475);const bt="DraggableFormListContext_draggableRow__nIx6b",ft="DraggableFormListContext_defaultBtn__JLXQk",xt="DraggableFormListContext_disabled__tQWcQ",gt="DraggableFormListContext_removeBtn__+PPAc",vt=e=>{const{quote:n,index:t,children:a,remove:l,onToTop:r,disabled:s=!1}=e;return(0,o.jsx)(mt.sx,{draggableId:n.key.toString(),index:t,children:e=>(0,o.jsx)("div",{ref:e.innerRef,...e.draggableProps,children:(0,o.jsxs)("div",{className:bt,children:[(0,o.jsx)("div",{...s?{}:e.dragHandleProps,className:`${ft}${s?` ${xt}`:""}`,style:{marginRight:"8px"},children:(0,o.jsx)(pt.A,{})}),a,l&&(0,o.jsx)("div",{className:`${gt}${s?` ${xt}`:""}`,style:{marginLeft:"10px"},onClick:()=>{s||l(t)},children:(0,o.jsx)(on.A,{})}),r&&(0,o.jsx)("div",{className:`${ft}${s?` ${xt}`:""}`,style:{marginLeft:"10px"},onClick:()=>{0!==t&&(s||r(t))},children:(0,o.jsx)(ht.A,{})})]})})})},yt=e=>{const{droppableId:n="",fields:t,move:l,children:r,remove:s,showToTop:i=!1,disabled:d}=e,c=fe(d),u=(0,a.useCallback)((e=>{l(e,0)}),[]);return(0,o.jsx)(mt.JY,{onDragEnd:e=>{const{source:n,destination:t}=e;if(n&&t&&n.droppableId==t.droppableId&&n.index!==t.index){const e=n.index,a=t.index;l(e,a)}},children:(0,o.jsx)(mt.gL,{droppableId:n,children:e=>(0,o.jsx)("div",{ref:e.innerRef,...e.droppableProps,children:t.map(((e,n)=>{const{key:t,...a}=e;return(0,o.jsx)(vt,{quote:e,index:n,remove:s,onToTop:i?u:null,disabled:c,children:r(a,n)},t)}))})})})},kt=[{fileName:"DraggableFormListContext.tsx",code:'/**\n * 可上下拖拽排序的Form.List的包装组件\n */\nimport React, { useCallback, ReactNode } from "react";\nimport useFormDisabled from "hooks/useFormDisabled";\nimport { DragDropContext, Droppable, DropResult } from "react-beautiful-dnd";\nimport type { DroppableProvided } from "react-beautiful-dnd";\nimport DraggableFormListRow from "./DraggableFormListRow";\n\ntype DraggableFormListContextProps = {\n  droppableId: string;\n  fields: Record<string, any>[];\n  move: (from: number, to: number) => void;\n  children: (quote: Record<string, any>, index?: number) => ReactNode;\n  remove?: (index: number | number[]) => void;\n  showToTop?: boolean; // 是否显示置顶按钮\n  disabled?: boolean;\n};\n\nconst DraggableFormListContext = (props: DraggableFormListContextProps) => {\n  const {\n    droppableId = "",\n    fields,\n    move,\n    children,\n    remove,\n    showToTop = false,\n    disabled: selfDisabled,\n  } = props;\n  const disabled = useFormDisabled(selfDisabled);\n\n  const handleDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n    if (\n      source &&\n      destination &&\n      source.droppableId == destination.droppableId &&\n      source.index !== destination.index\n    ) {\n      const from = source.index;\n      const to = destination.index;\n      move(from, to);\n    }\n  };\n\n  const handleToTop = useCallback((index: number) => {\n    move(index, 0);\n  }, []);\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <Droppable droppableId={droppableId}>\n        {(provided: DroppableProvided) => (\n          <div ref={provided.innerRef} {...provided.droppableProps}>\n            {fields.map((quote: any, index: number) => {\n              const { key, ...restQuoteProps } = quote;\n              return (\n                <DraggableFormListRow\n                  quote={quote}\n                  index={index}\n                  remove={remove}\n                  onToTop={showToTop ? handleToTop : null}\n                  disabled={disabled}\n                  key={key}\n                >\n                  {children(restQuoteProps, index)}\n                </DraggableFormListRow>\n              );\n            })}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n\nexport default DraggableFormListContext;'},{fileName:"DraggableFormListRow.tsx",code:'/**\n * 可增加和删除多条数据的包装组件\n */\nimport React, { ReactNode } from "react";\nimport { Draggable } from "react-beautiful-dnd";\nimport type { DraggableProvided } from "react-beautiful-dnd";\nimport {\n  HolderOutlined,\n  VerticalAlignTopOutlined,\n  MinusCircleOutlined,\n} from "@ant-design/icons";\nimport styles from "./index.module.scss";\n\ntype DraggableFormListRowProps = {\n  quote: Record<string, any>;\n  index: number;\n  children: ReactNode;\n  remove?: ((index: number) => void) | null;\n  onToTop?: ((index: number) => void) | null;\n  disabled?: boolean;\n};\n\nconst DraggableFormListRow = (props: DraggableFormListRowProps) => {\n  const { quote, index, children, remove, onToTop, disabled = false } = props;\n\n  return (\n    <Draggable draggableId={quote.key.toString()} index={index}>\n      {(provided: DraggableProvided) => (\n        <div ref={provided.innerRef} {...provided.draggableProps}>\n          <div className={styles.draggableRow}>\n            <div\n              {...(!disabled ? provided.dragHandleProps : {})}\n              className={`${styles.defaultBtn}${\n                disabled ? ` ${styles.disabled}` : ""\n              }`}\n              style={{ marginRight: "8px" }}\n            >\n              <HolderOutlined />\n            </div>\n            {children}\n            {remove && (\n              <div\n                className={`${styles.removeBtn}${\n                  disabled ? ` ${styles.disabled}` : ""\n                }`}\n                style={{ marginLeft: "10px" }}\n                onClick={() => {\n                  if (disabled) return;\n                  remove(index);\n                }}\n              >\n                <MinusCircleOutlined />\n              </div>\n            )}\n            {onToTop && (\n              <div\n                className={`${styles.defaultBtn}${\n                  disabled ? ` ${styles.disabled}` : ""\n                }`}\n                style={{ marginLeft: "10px" }}\n                onClick={() => {\n                  if (index === 0) return;\n                  if (disabled) return;\n                  onToTop(index);\n                }}\n              >\n                <VerticalAlignTopOutlined />\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nexport default DraggableFormListRow;'},{fileName:"DraggableFormListContext.module.scss",code:".draggableRow {\n  display: flex;\n  align-items: center;\n  padding: 8px 0;\n\n  $btnSize: 16px;\n  .defaultBtn:not(.disabled) {\n    cursor: pointer;\n    :global {\n      svg {\n        width: $btnSize;\n        height: $btnSize;\n        path {\n          fill: $globalPrimaryColor;\n        }\n      }\n    }\n  }\n\n  .removeBtn:not(.disabled) {\n    cursor: pointer;\n    :global {\n      svg {\n        width: $btnSize;\n        height: $btnSize;\n        path {\n          fill: $globalRedColor;\n        }\n      }\n    }\n  }\n\n  .disabled {\n    cursor: not-allowed !important;\n    :global {\n      svg {\n        width: $btnSize;\n        height: $btnSize;\n        path {\n          fill: $disabledColor;\n        }\n      }\n    }\n  }\n}"}];var Ct=t(9237);const _t=(e,n)=>{const[t,l]=(0,a.useState)(0);return(0,a.useEffect)((()=>{if(e.current){const{clientHeight:n}=e.current;l(n)}}),[]),{droppableHeight:t,setDroppableHeight:l,onAdd:e=>{l((e=>e+n)),e?.()},onRemove:(e,t)=>{l((e=>Math.max(e-n,0))),e?.(t)}}},At="DraggableFormListSample_container__x0PmK",jt="DraggableFormListSample_itemTitleRow__W0a+q",Pt="DraggableFormListSample_formListRow__v94NW",It=()=>{const[e]=Ce.A.useForm(),n=(0,a.useRef)(null),{droppableHeight:t,onAdd:l,onRemove:r}=_t(n,48),s=(0,a.useRef)(1);return(0,o.jsx)(Ce.A,{form:e,labelAlign:"right",initialValues:{fieldList:[{id:"1",field1:"默认值",field2:"workingDay",field3:["默认值",!0],field4:[b()(),b()(),!1]}]},children:(0,o.jsx)(Ce.A.List,{name:"fieldList",children:(e,a)=>{let{add:i,move:d,remove:c}=a;return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("div",{className:jt,children:(0,o.jsx)(E.Ay,{type:"primary",icon:(0,o.jsx)(Ct.A,{}),ghost:!0,onClick:()=>(e=>{s.current>=5?G.Ay.warning("最多可增加5条数据"):(l(e),s.current=s.current+1)})(i),children:"新增"})}),(0,o.jsx)("div",{style:{width:"100%",height:t>0?`${t}px`:"auto"},ref:n,children:(0,o.jsx)(yt,{droppableId:"fieldList",fields:e,showToTop:!0,move:d,remove:e=>((e,n)=>{s.current<=1?G.Ay.warning("最少要有1条数据"):(r(e,n),s.current=s.current-1)})(c,e),children:e=>(0,o.jsxs)("div",{className:Pt,children:[(0,o.jsx)(Ce.A.Item,{...e,name:[e.name,"id"],hidden:!0}),(0,o.jsx)(Ce.A.Item,{...e,label:"字段1",name:[e.name,"field1"],children:(0,o.jsx)(Le.A,{})}),(0,o.jsx)(Ce.A.Item,{...e,label:"字段2",name:[e.name,"field2"],children:(0,o.jsx)(Ke.A,{options:[{label:"工作日",value:"workingDay"},{label:"自然日",value:"naturalDay"}],style:{width:"200px"}})}),(0,o.jsx)(Ce.A.Item,{...e,label:"字段3",name:[e.name,"field3"],children:(0,o.jsx)(qe,{})}),(0,o.jsx)(Ce.A.Item,{...e,label:"字段4",name:[e.name,"field4"],children:(0,o.jsx)(De,{})})]})})})]})}})})},Rt=[{fileName:"index.tsx",code:'import React, { useRef } from "react";\nimport { Button, Form, Input, message, Select } from "antd";\nimport { PlusOutlined } from "@ant-design/icons";\nimport dayjs from "dayjs";\nimport DraggableFormListContext from "@/components/formLists/DraggableFormListContext";\nimport useFixHeight from "@/components/formLists/DraggableFormListContext/hooks/useFixHeight";\nimport InputAndCheckbox from "@/components/formItems/InputAndCheckbox";\nimport RangePickerAndCheckbox from "@/components/formItems/RangePickerAndCheckbox";\nimport styles from "./index.module.scss";\n\nconst DRAGGABLE_HEIGHT = 48;\n\nconst Content = () => {\n  const [form] = Form.useForm();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { droppableHeight, onAdd, onRemove } = useFixHeight(\n    containerRef,\n    DRAGGABLE_HEIGHT\n  );\n  const rows = useRef<number>(1);\n\n  const onAddClick = (add: any) => {\n    if (rows.current >= 5) {\n      message.warning("最多可增加5条数据");\n      return;\n    }\n    onAdd(add);\n    rows.current = rows.current + 1;\n  };\n\n  const onRemoveClick = (remove: any, index: number) => {\n    if (rows.current <= 1) {\n      message.warning("最少要有1条数据");\n      return;\n    }\n    onRemove(remove, index);\n    rows.current = rows.current - 1;\n  };\n\n  return (\n      <Form\n        form={form}\n        labelAlign=\'right\'\n        initialValues={{\n          fieldList: [\n            {\n              id: "1",\n              field1: "默认值",\n              field2: "workingDay",\n              field3: ["默认值", true],\n              field4: [dayjs(), dayjs(), false],\n            },\n          ],\n        }}\n      >\n        <Form.List name=\'fieldList\'>\n          {(fields, { add, move, remove }) => (\n            <>\n              <div className={styles.itemTitleRow}>\n                <Button\n                  type=\'primary\'\n                  icon={<PlusOutlined />}\n                  ghost\n                  onClick={() => onAddClick(add)}\n                >\n                  新增\n                </Button>\n              </div>\n              <div\n                style={{\n                  width: "100%",\n                  height: droppableHeight > 0 ? `${droppableHeight}px` : "auto",\n                }}\n                ref={containerRef}\n              >\n                <DraggableFormListContext\n                  droppableId=\'fieldList\'\n                  fields={fields}\n                  showToTop\n                  move={move}\n                  remove={(index) => onRemoveClick(remove, index as number)}\n                >\n                  {(quote) => (\n                    <div className={styles.formListRow}>\n                      <Form.Item\n                        {...quote}\n                        name={[quote.name, "id"]}\n                        hidden\n                      ></Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段1\'\n                        name={[quote.name, "field1"]}\n                      >\n                        <Input />\n                      </Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段2\'\n                        name={[quote.name, "field2"]}\n                      >\n                        <Select\n                          options={[\n                            { label: "工作日", value: "workingDay" },\n                            { label: "自然日", value: "naturalDay" },\n                          ]}\n                          style={{ width: "200px" }}\n                        />\n                      </Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段3\'\n                        name={[quote.name, "field3"]}\n                      >\n                        <InputAndCheckbox />\n                      </Form.Item>\n                      <Form.Item\n                        {...quote}\n                        label=\'字段4\'\n                        name={[quote.name, "field4"]}\n                      >\n                        <RangePickerAndCheckbox />\n                      </Form.Item>\n                    </div>\n                  )}\n                </DraggableFormListContext>\n              </div>\n            </>\n          )}\n        </Form.List>\n      </Form>\n  );\n};\n\nexport default Content;\n'}].concat(kt),wt=()=>(0,o.jsx)(me,{className:At,title:"可上下拖拽排序的Form.List的包装组件",codeParams:Rt,children:(0,o.jsx)(It,{})}),St="DraggableWithValidateFormListSample_container__6VHhw",Nt="DraggableWithValidateFormListSample_itemTitleRow__KkWRb",Ft="DraggableWithValidateFormListSample_formListRow__1BmxV",Dt=[{required:!0,message:"必填项"}],Tt=()=>{const[e]=Ce.A.useForm(),n=(0,a.useRef)(null),{droppableHeight:t,onAdd:l,onRemove:r}=_t(n,48),s=(0,a.useRef)(1);return(0,o.jsxs)(Ce.A,{form:e,labelAlign:"right",initialValues:{fieldList:[{}]},children:[(0,o.jsx)(Ce.A.List,{name:"fieldList",children:(a,i)=>{let{add:d,move:c,remove:u}=i;return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("div",{className:Nt,children:(0,o.jsx)(E.Ay,{type:"primary",icon:(0,o.jsx)(Ct.A,{}),ghost:!0,onClick:()=>(e=>{s.current>=5?G.Ay.warning("最多可增加5条数据"):(l(e),s.current=s.current+1)})(d),children:"新增"})}),(0,o.jsx)("div",{style:{width:"100%",height:t>0?`${t}px`:"auto"},ref:n,children:(0,o.jsx)(yt,{droppableId:"fieldList",fields:a,showToTop:!0,move:c,remove:e=>((e,n)=>{s.current<=1?G.Ay.warning("最少要有1条数据"):(r(e,n),s.current=s.current-1)})(u,e),children:n=>(0,o.jsxs)("div",{className:Ft,children:[(0,o.jsx)(Ce.A.Item,{...n,name:[n.name,"id"],hidden:!0}),(0,o.jsx)(Ce.A.Item,{...n,label:"字段1",name:[n.name,"field1"],rules:Dt,children:(0,o.jsx)(Zn,{form:e,style:{width:"214px"},children:(0,o.jsx)(Le.A,{})})}),(0,o.jsx)(Ce.A.Item,{...n,label:"字段2",name:[n.name,"field2"],rules:Dt,children:(0,o.jsx)(Zn,{form:e,style:{width:"214px"},children:(0,o.jsx)(Ke.A,{options:[{label:"工作日",value:"workingDay"},{label:"自然日",value:"naturalDay"}],style:{width:"200px"}})})}),(0,o.jsx)(Ce.A.Item,{...n,label:"字段3",name:[n.name,"field3"],rules:Dt,children:(0,o.jsx)(Zn,{form:e,style:{width:"214px"},children:(0,o.jsx)(qe,{})})}),(0,o.jsx)(Ce.A.Item,{...n,label:"字段4",name:[n.name,"field4"],rules:Dt,children:(0,o.jsx)(Zn,{form:e,style:{width:"294px"},children:(0,o.jsx)(De,{})})})]})})})]})}}),(0,o.jsx)("div",{style:{display:"flex",justifyContent:"flex-end"},children:(0,o.jsx)(E.Ay,{type:"primary",onClick:async()=>{try{const n=await(e?.validateFields());console.log("values:",n)}catch(e){}},children:"提交"})})]})},Et=[{fileName:"index.tsx",code:'import React, { useRef } from "react";\nimport { Button, Form, Input, message, Select } from "antd";\nimport { PlusOutlined } from "@ant-design/icons";\nimport DraggableFormListContext from "@/components/formLists/DraggableFormListContext";\nimport useFixHeight from "@/components/formLists/DraggableFormListContext/hooks/useFixHeight";\nimport WithValidateMessage from "@/components/formItems/WithValidateMessage";\nimport InputAndCheckbox from "@/components/formItems/InputAndCheckbox";\nimport RangePickerAndCheckbox from "@/components/formItems/RangePickerAndCheckbox";\nimport styles from "./index.module.scss";\n\nconst DRAGGABLE_HEIGHT = 48;\nconst REQUIRED_FORM_ITEM_RULES = [{ required: true, message: "必填项" }];\n\nconst Content = () => {\n  const [form] = Form.useForm();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { droppableHeight, onAdd, onRemove } = useFixHeight(\n    containerRef,\n    DRAGGABLE_HEIGHT\n  );\n  const rows = useRef<number>(1);\n\n  const onAddClick = (add: any) => {\n    if (rows.current >= 5) {\n      message.warning("最多可增加5条数据");\n      return;\n    }\n    onAdd(add);\n    rows.current = rows.current + 1;\n  };\n\n  const onRemoveClick = (remove: any, index: number) => {\n    if (rows.current <= 1) {\n      message.warning("最少要有1条数据");\n      return;\n    }\n    onRemove(remove, index);\n    rows.current = rows.current - 1;\n  };\n\n  // 点击提交\n  const onSubmit = async () => {\n    try {\n      const values = await form?.validateFields();\n      console.log("values:", values);\n    } catch (err) {}\n  };\n\n  return (\n    <Form\n      form={form}\n      labelAlign=\'right\'\n      initialValues={{\n        fieldList: [{}],\n      }}\n    >\n      <Form.List name=\'fieldList\'>\n        {(fields, { add, move, remove }) => (\n          <>\n            <div className={styles.itemTitleRow}>\n              <Button\n                type=\'primary\'\n                icon={<PlusOutlined />}\n                ghost\n                onClick={() => onAddClick(add)}\n              >\n                新增\n              </Button>\n            </div>\n            <div\n              style={{\n                width: "100%",\n                height: droppableHeight > 0 ? `${droppableHeight}px` : "auto",\n              }}\n              ref={containerRef}\n            >\n              <DraggableFormListContext\n                droppableId=\'fieldList\'\n                fields={fields}\n                showToTop\n                move={move}\n                remove={(index) => onRemoveClick(remove, index as number)}\n              >\n                {(quote) => (\n                  <div className={styles.formListRow}>\n                    <Form.Item\n                      {...quote}\n                      name={[quote.name, "id"]}\n                      hidden\n                    ></Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段1\'\n                      name={[quote.name, "field1"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "214px" }}\n                      >\n                        <Input />\n                      </WithValidateMessage>\n                    </Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段2\'\n                      name={[quote.name, "field2"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "214px" }}\n                      >\n                        <Select\n                          options={[\n                            { label: "工作日", value: "workingDay" },\n                            { label: "自然日", value: "naturalDay" },\n                          ]}\n                          style={{ width: "200px" }}\n                        />\n                      </WithValidateMessage>\n                    </Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段3\'\n                      name={[quote.name, "field3"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "214px" }}\n                      >\n                        <InputAndCheckbox />\n                      </WithValidateMessage>\n                    </Form.Item>\n                    <Form.Item\n                      {...quote}\n                      label=\'字段4\'\n                      name={[quote.name, "field4"]}\n                      rules={REQUIRED_FORM_ITEM_RULES}\n                    >\n                      <WithValidateMessage\n                        form={form}\n                        style={{ width: "294px" }}\n                      >\n                        <RangePickerAndCheckbox />\n                      </WithValidateMessage>\n                    </Form.Item>\n                  </div>\n                )}\n              </DraggableFormListContext>\n            </div>\n          </>\n        )}\n      </Form.List>\n      <div\n        style={{\n          display: "flex",\n          justifyContent: "flex-end",\n        }}\n      >\n        <Button type=\'primary\' onClick={onSubmit}>\n          提交\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default Content;\n'}].concat(kt,Xn),Vt=()=>(0,o.jsx)(me,{className:St,title:"可上下拖拽排序且显示自定义校验信息的Form.List",codeParams:Et,children:(0,o.jsx)(Tt,{})}),Mt="FormListSection_container__9--VJ",Lt="FormListSection_sample__M7-lo",Ot=[(0,o.jsx)(wt,{}),(0,o.jsx)(Vt,{})],$t=()=>(0,o.jsx)("div",{className:Mt,children:Ot.map(((e,n)=>(0,o.jsx)("div",{className:Lt,children:e},n)))});var Bt=t(770),qt=t(3438),Wt=t(9763),Kt=t(4783),Ht=t(7192);const Ut="EditableTable_editableTable__8yjKc",{RangePicker:zt}=pe.A,Gt=/^([\w+-.%]+@[\w-.]+\.[A-Za-z]{2,4})(;[\w+-.]+@[\w-.]+\.[A-Za-z]{2,4})*$/,Yt=a.createContext(null),Qt=e=>{let{form:n,editType:t,editProps:l,component:r,disabled:s,dataIndex:i,record:d,save:c}=e;const u={...l,disabled:l.disabled||s};delete u.validateStatus;const m=()=>c(i);let p=(0,o.jsx)(Le.A,{style:{width:"100%"},onBlur:m,...u});switch(t){case"inputNumber":p=(0,o.jsx)(Qe.A,{style:{width:"100%"},onBlur:m,...u});break;case"select":p=(0,o.jsx)(Ke.A,{style:{width:"100%"},...u});break;case"datePicker":p=(0,o.jsx)(pe.A,{style:{width:"100%"},...u});break;case"rangePicker":p=(0,o.jsx)(zt,{style:{width:"100%"},...u});break;case"radioGroup":p=(0,o.jsx)(Bt.Ay.Group,{...u});break;case"checkboxGroup":p=(0,o.jsx)(he.A.Group,{...u});break;case"cascader":p=(0,o.jsx)(qt.A,{style:{width:"100%"},...u})}return r&&(p=a.cloneElement(r,{record:d,...u})),(0,o.jsx)(Zn,{onChange:(e,n)=>{if(!t&&!r||["input","inputNumber"].includes(t))return;if("radioGroup"===t)return void c?.(i,e?.target?.value||void 0);const a=e?.target?"":e;c?.(i,a),l.onChange?.(a,n,d)},form:n,nevervalidate:!!l.nevervalidate,children:p})},Zt=a.memo((e=>{const{rowKey:n="id",editable:t=!1,editType:l="input",editProps:r,component:s,disabled:i,dataIndex:d,record:c,children:u,ruleOptions:m,rules:p,handleSave:h,...b}=e,f=(0,a.useContext)(Yt);let x=r||{};"function"==typeof r&&(x=r(c)||{});const g=(0,a.useMemo)((()=>{let e=[];return p&&p.length>0?e=p:(m?.isRequired&&e.push({required:!0,message:"必填项"}),m?.isEmail&&e.push({pattern:Gt,message:"请输入正确邮箱格式"})),e}),[m,p]),v=async(e,n)=>{const t=n||await(f?.getFieldValue(e)),a={...c,[e]:t};h?.(a);try{await(f?.validateFields([e]))}catch(e){}};(0,a.useEffect)((()=>{f?.setFieldsValue({[d]:c?.[d]})}),[]);let y=u;return t?y=(0,o.jsx)(Ce.A.Item,{style:{margin:0},name:d,rules:g,required:!!m?.isRequired,validateStatus:x.validateStatus,children:Qt({editType:l,editProps:x,component:s,disabled:i,dataIndex:d,record:c,form:f,save:v})}):d===n&&(y=(0,o.jsx)(Ce.A.Item,{style:{margin:0},name:d,hidden:!0})),(0,o.jsx)("td",{title:i?c?.[d]:"",...b,children:y})}));class Xt extends a.PureComponent{render(){return(0,o.jsx)(Zt,{...(0,Ht.A)(this.props,["onMouseEnter","onMouseLeave"])})}}const Jt=e=>{let{rowKey:n,onFromaValuesChange:t,...a}=e;const[l]=Ce.A.useForm();return(0,o.jsx)(Ce.A,{form:l,onValuesChange:(e,r)=>{t?.(e,l,{...r,[n]:a["data-row-key"]})},component:!1,children:(0,o.jsx)(Yt.Provider,{value:l,children:(0,o.jsx)("tr",{...a})})})},ea=e=>{let{rowKey:n="id",dataSource:t,columns:l,setDataSource:r,disabled:s=!1,onFormValuesChange:i,deleteRowCallback:d,...c}=e;const u=(0,a.useMemo)((()=>({body:{row:e=>(0,o.jsx)(Jt,{...e,rowKey:n,onFromaValuesChange:i}),cell:Xt}})),[]),m=e=>{const a=t.map((t=>t[n]===e[n]?{...t,...e}:t));setTimeout((()=>{r(a)}))},p=(0,a.useMemo)((()=>l.map((e=>({...e,onCell:n=>({editable:e.editable,editType:e.editType,editProps:e.editProps,component:e.component,disabled:s,dataIndex:e.dataIndex,record:n,ruleOptions:e.ruleOptions,rules:e.rules,handleSave:m})})))),[l,s,m]),h=[...p,{title:"操作",key:"action",dataIndex:"action",align:"center",width:80,fixed:"right",render:(e,a)=>(0,o.jsx)("div",{style:{padding:0},children:s?(0,o.jsx)(E.Ay,{type:"link",danger:!0,disabled:!0,children:"删除"}):(0,o.jsxs)(Wt.A,{title:"是否确定删除此行？",onConfirm:()=>{(e=>{const a=t.filter((t=>t[n]!==e[n]));r(a),d?.(e)})(a)},children:[(0,o.jsx)(E.Ay,{style:{padding:0},type:"link",danger:!0,children:"删除"})," "]})})}];return(0,o.jsx)("div",{className:Ut,children:(0,o.jsx)(Kt.A,{rowKey:n,columns:h,components:u,dataSource:t,pagination:!1,tableLayout:"fixed",bordered:!0,...c})})},na="EditableTableSample_container__NVS4M",ta="EditableTableSample_itemTitleRow__cXagi",aa="EditableTableSample_columnTitle__R1Y+H",la="EditableTableSample_requiredIcon__3n192",ra=[{validator:(e,n)=>n&&n.length>0&&(n[0]||0===n[0]||n[1])?(n[0]||0===n[0])&&n[1]?Promise.resolve():Promise.reject("两个都必填"):Promise.reject("必填项")}],oa=()=>{const[e,n]=(0,a.useState)([]),t=[{title:(0,o.jsxs)("div",{className:aa,children:[(0,o.jsx)("span",{className:la,children:"*"}),(0,o.jsx)("span",{children:"邮箱"})]}),dataIndex:"email",width:160,editable:!0,ruleOptions:{isRequired:!0,isEmail:!0}},{title:(0,o.jsxs)("div",{className:aa,children:[(0,o.jsx)("span",{className:la,children:"*"}),(0,o.jsx)("span",{children:"日期"})]}),dataIndex:"date",width:140,editable:!0,editType:"datePicker",ruleOptions:{isRequired:!0}},{title:"日期类型",dataIndex:"dateType",width:120,editable:!0,editType:"select",editProps:{options:[{label:"年",value:"year"},{label:"月",value:"month"},{label:"天",value:"day"}],allowClear:!0,nevervalidate:!0}},{title:"是否提交",dataIndex:"isSubmit",width:120,editable:!0,editType:"radioGroup",editProps:{options:[{label:"是",value:"1"},{label:"否",value:"0"}],nevervalidate:!0}},{title:(0,o.jsxs)("div",{className:aa,children:[(0,o.jsx)("span",{className:la,children:"*"}),(0,o.jsx)("span",{children:"交易日"})]}),dataIndex:"field",width:240,editable:!0,component:(0,o.jsx)(en,{options:[{label:"工作日",value:"workingDay"},{label:"自然日",value:"naturalDay"}],inputNumberProps:{addonAfter:"个"},setInputNumberStatus:e=>!e||!e[0]&&0!==e[0]?"error":"",setSelectStatus:e=>e&&e[1]?"":"error"}),editProps:{validateStatus:""},ruleOptions:{isRequired:!0},rules:ra}];return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("div",{className:ta,children:(0,o.jsx)(E.Ay,{type:"primary",icon:(0,o.jsx)(Ct.A,{}),ghost:!0,onClick:()=>{if(e.length>=5)return void G.Ay.warning("最多可增加5条数据");const t=[...e,{id:`ROW_ID_${ae()}`}];n(t)},children:"新增"})}),(0,o.jsx)(ea,{columns:t,dataSource:e,setDataSource:n})]})},sa=[{fileName:"index.tsx",code:'import React, { useState } from "react";\nimport { Button, message } from "antd";\nimport { PlusOutlined } from "@ant-design/icons";\nimport EditableTable from "@/components/EditableTable";\nimport type { EditableTableColumnProps } from "@/components/EditableTable";\nimport InputNumberAndSelect from "@/components/formItems/InputNumberAndSelect";\nimport type { Value as InputNumberAndSelectValue } from "@/components/formItems/InputNumberAndSelect";\nimport { getRandomId } from "utils/util";\nimport styles from "./index.module.scss";\n\nconst INPUTNUMBER_SELECT_RULES = [\n  {\n    validator: (_: Record<string, any>, value: InputNumberAndSelectValue) => {\n      if (value && value.length > 0) {\n        if (!value[0] && value[0] !== 0 && !value[1]) {\n          return Promise.reject("必填项");\n        } else {\n          if (!value[0] && value[0] !== 0) {\n            return Promise.reject("两个都必填");\n          }\n          if (!value[1]) {\n            return Promise.reject("两个都必填");\n          }\n        }\n      } else {\n        return Promise.reject("必填项");\n      }\n      return Promise.resolve();\n    },\n  },\n];\n\nconst Content = () => {\n  const [tableData, setTableData] = useState<Record<string, any>[]>([]);\n\n  const onAddClick = () => {\n    if (tableData.length >= 5) {\n      message.warning("最多可增加5条数据");\n      return;\n    }\n    const newDataSource = [...tableData, { id: `ROW_ID_${getRandomId()}` }];\n    setTableData(newDataSource);\n  };\n\n  const columns: EditableTableColumnProps[] = [\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>邮箱</span>\n        </div>\n      ),\n      dataIndex: "email",\n      width: 160,\n      editable: true,\n      ruleOptions: {\n        isRequired: true,\n        isEmail: true,\n      },\n    },\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>日期</span>\n        </div>\n      ),\n      dataIndex: "date",\n      width: 140,\n      editable: true,\n      editType: "datePicker",\n      ruleOptions: {\n        isRequired: true,\n      },\n    },\n    {\n      title: "日期类型",\n      dataIndex: "dateType",\n      width: 120,\n      editable: true,\n      editType: "select",\n      editProps: {\n        options: [\n          { label: "年", value: "year" },\n          { label: "月", value: "month" },\n          { label: "天", value: "day" },\n        ],\n        allowClear: true,\n        nevervalidate: true,\n      },\n    },\n    {\n      title: "是否提交",\n      dataIndex: "isSubmit",\n      width: 120,\n      editable: true,\n      editType: "radioGroup",\n      editProps: {\n        options: [\n          { label: "是", value: "1" },\n          { label: "否", value: "0" },\n        ],\n        nevervalidate: true,\n      },\n    },\n    {\n      title: (\n        <div className={styles.columnTitle}>\n          <span className={styles.requiredIcon}>*</span>\n          <span>交易日</span>\n        </div>\n      ),\n      dataIndex: "field",\n      width: 240,\n      editable: true,\n      component: (\n        <InputNumberAndSelect\n          options={[\n            { label: "工作日", value: "workingDay" },\n            { label: "自然日", value: "naturalDay" },\n          ]}\n          inputNumberProps={{\n            addonAfter: "个",\n          }}\n          setInputNumberStatus={(\n            value: InputNumberAndSelectValue | undefined\n          ) => {\n            if (!value || (!value[0] && value[0] !== 0)) {\n              return "error";\n            }\n            return "";\n          }}\n          setSelectStatus={(value: InputNumberAndSelectValue | undefined) => {\n            if (!value || !value[1]) {\n              return "error";\n            }\n            return "";\n          }}\n        />\n      ),\n      editProps: {\n        validateStatus: "",\n      },\n      ruleOptions: {\n        isRequired: true,\n      },\n      rules: INPUTNUMBER_SELECT_RULES,\n    },\n  ];\n\n  return (\n    <>\n      <div className={styles.itemTitleRow}>\n        <Button\n          type=\'primary\'\n          icon={<PlusOutlined />}\n          ghost\n          onClick={onAddClick}\n        >\n          新增\n        </Button>\n      </div>\n      <EditableTable\n        columns={columns}\n        dataSource={tableData}\n        setDataSource={setTableData}\n      />\n    </>\n  );\n};\n\nexport default Content;\n'}].concat([{fileName:"EditableTable.tsx",code:'/**\n * 可进行编辑的表格组件\n */\nimport React, { ReactNode, useEffect, useContext, useMemo } from "react";\nimport {\n  Form,\n  Table,\n  Input,\n  InputNumber,\n  Select,\n  DatePicker,\n  Radio,\n  Checkbox,\n  Cascader,\n  Button,\n  Popconfirm,\n} from "antd";\nimport type { TableProps, TableColumnProps, GetRef, FormRule } from "antd";\nimport { omit } from "lodash-es";\nimport WithValidateMessage from "@/components/formItems/WithValidateMessage";\nimport styles from "./index.module.scss";\n\nconst { RangePicker } = DatePicker;\nconst EMAIL_PATTERN =\n  /^([w+-.%]+@[w-.]+.[A-Za-z]{2,4})(;[w+-.]+@[w-.]+.[A-Za-z]{2,4})*$/;\n\nexport type EditType =\n  | "input"\n  | "inputNumber"\n  | "select"\n  | "datePicker"\n  | "rangePicker"\n  | "radioGroup"\n  | "checkboxGroup"\n  | "cascader";\n\ntype EditProps =\n  | ({\n      nevervalidate?: boolean;\n      validateStatus?: "warning" | "error" | "";\n    } & Record<string, any>)\n  | ((record: Record<string, any>) => Record<string, any>);\n\ntype FormInstance<T> = GetRef<typeof Form<T>>;\n\ntype EditableTableColumnRuleOptions = {\n  isRequired?: boolean;\n  isEmail?: boolean;\n  isPositiveInt?: boolean;\n};\n\nexport type EditableTableColumnProps = {\n  editable?: boolean;\n  editType?: EditType;\n  editProps?: EditProps;\n  component?: ReactNode | null;\n  ruleOptions?: EditableTableColumnRuleOptions;\n  rules?: FormRule[];\n} & TableColumnProps;\n\ntype RenderItemProps = {\n  editType: EditType;\n  editProps: EditProps;\n  disabled?: boolean;\n  dataIndex: string;\n  component?: ReactNode | null;\n  record?: Record<string, any>;\n  save: (dataIndex: string, cellValue?: any) => void;\n};\n\ntype EditableTableCellProps = {\n  rowKey?: string;\n  disabled?: boolean;\n  dataIndex: string;\n  record: Record<string, any>;\n  editProps?: EditProps;\n  component?: ReactNode | null;\n  handleSave: (event: any) => void;\n} & Omit<EditableTableColumnProps, "dataIndex">;\n\ntype EditableTableProps = {\n  dataSource: Record<string, any>[];\n  columns: EditableTableColumnProps[];\n  setDataSource: (dataSource: Record<string, any>[]) => void;\n  rowKey?: string;\n  disabled?: boolean;\n  onFormValuesChange?: (\n    changedValues: Record<string, any>,\n    form?: FormInstance<any> | null,\n    allValues?: Record<string, any>\n  ) => void;\n  deleteRowCallback?: (record: Record<string, any>) => void; // 删除一行后的回调\n} & TableProps;\n\nconst EditableContext = React.createContext<FormInstance<any> | null>(null);\n\nconst renderItem = ({\n  form,\n  editType,\n  editProps,\n  component,\n  disabled,\n  dataIndex,\n  record,\n  save,\n}: RenderItemProps & { form: FormInstance<any> | null }) => {\n  const restProps: Record<string, any> = {\n    ...editProps,\n    disabled: (editProps as Record<string, any>).disabled || disabled,\n  };\n  delete restProps.validateStatus;\n\n  const onBlur = () => save(dataIndex);\n\n  const onChange = (cellValue?: any, option?: Record<string, any>) => {\n    if (\n      (!editType && !component) ||\n      ["input", "inputNumber"].includes(editType)\n    )\n      return;\n    if (editType === "radioGroup") {\n      save?.(dataIndex, cellValue?.target?.value || undefined);\n      return;\n    }\n    const newValue = cellValue?.target ? "" : cellValue;\n    save?.(dataIndex, newValue);\n    (editProps as Record<string, any>).onChange?.(newValue, option, record);\n  };\n\n  let itemComponent: any = (\n    <Input style={{ width: "100%" }} onBlur={onBlur} {...restProps} />\n  );\n\n  switch (editType) {\n    case "inputNumber":\n      itemComponent = (\n        <InputNumber style={{ width: "100%" }} onBlur={onBlur} {...restProps} />\n      );\n      break;\n    case "select":\n      itemComponent = <Select style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "datePicker":\n      itemComponent = <DatePicker style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "rangePicker":\n      itemComponent = <RangePicker style={{ width: "100%" }} {...restProps} />;\n      break;\n    case "radioGroup":\n      itemComponent = <Radio.Group {...restProps} />;\n      break;\n    case "checkboxGroup":\n      itemComponent = <Checkbox.Group {...restProps} />;\n      break;\n    case "cascader":\n      itemComponent = <Cascader style={{ width: "100%" }} {...restProps} />;\n      break;\n  }\n\n  if (component) {\n    itemComponent = React.cloneElement(component, { record, ...restProps });\n  }\n\n  return (\n    <WithValidateMessage\n      onChange={onChange}\n      form={form}\n      nevervalidate={!!(editProps as Record<string, any>).nevervalidate}\n    >\n      {itemComponent}\n    </WithValidateMessage>\n  );\n};\n\nconst EditableTableCell = React.memo((props: EditableTableCellProps) => {\n  const {\n    rowKey = "id",\n    editable = false,\n    editType = "input",\n    editProps,\n    component,\n    disabled,\n    dataIndex,\n    record,\n    children,\n    ruleOptions,\n    rules,\n    handleSave,\n    ...restProps\n  } = props;\n  const form = useContext(EditableContext);\n\n  let finalComponentProps: Record<string, any> = editProps || {};\n  if (typeof editProps === "function") {\n    finalComponentProps = editProps(record) || {};\n  }\n\n  const finalRules = useMemo(() => {\n    let finalRulesArr: FormRule[] = [];\n    if (rules && rules.length > 0) {\n      finalRulesArr = rules;\n    } else {\n      if (ruleOptions?.isRequired) {\n        finalRulesArr.push({ required: true, message: "必填项" });\n      }\n      if (ruleOptions?.isEmail) {\n        finalRulesArr.push({\n          pattern: EMAIL_PATTERN,\n          message: "请输入正确邮箱格式",\n        });\n      }\n    }\n    return finalRulesArr;\n  }, [ruleOptions, rules]);\n\n  const save = async (currentDataIndex: string, cellValue?: any) => {\n    const value = cellValue || (await form?.getFieldValue(currentDataIndex));\n    const newRecord = { ...record, [currentDataIndex]: value };\n    handleSave?.(newRecord);\n    try {\n      await form?.validateFields([currentDataIndex]);\n    } catch (err) {\n      //   console.log(\'EditableTable保存数据失败\', err);\n    }\n  };\n\n  useEffect(() => {\n    form?.setFieldsValue({\n      [dataIndex]: record?.[dataIndex],\n    });\n  }, []);\n\n  let childNode: ReactNode = children;\n\n  if (editable) {\n    childNode = (\n      <Form.Item\n        style={{ margin: 0 }}\n        name={dataIndex}\n        rules={finalRules}\n        required={!!ruleOptions?.isRequired}\n        validateStatus={finalComponentProps.validateStatus}\n      >\n        {renderItem({\n          editType,\n          editProps: finalComponentProps,\n          component,\n          disabled,\n          dataIndex,\n          record,\n          form,\n          save,\n        })}\n      </Form.Item>\n    );\n  } else if (dataIndex === rowKey) {\n    childNode = (\n      <Form.Item style={{ margin: 0 }} name={dataIndex} hidden></Form.Item>\n    );\n  }\n\n  return (\n    <td title={disabled ? record?.[dataIndex] : ""} {...restProps}>\n      {childNode}\n    </td>\n  );\n});\n\nclass TableCellWrapper extends React.PureComponent {\n  render() {\n    return (\n      <EditableTableCell\n        {...omit(this.props, ["onMouseEnter", "onMouseLeave"])}\n      />\n    );\n  }\n}\n\nconst EditableTableRow = ({\n  rowKey,\n  onFromaValuesChange,\n  ...restProps\n}: any) => {\n  const [form] = Form.useForm();\n\n  const onValuesChange = (\n    changedValues: Record<string, any>,\n    allValues: Record<string, any>\n  ) => {\n    onFromaValuesChange?.(changedValues, form, {\n      ...allValues,\n      [rowKey]: restProps["data-row-key"],\n    });\n  };\n\n  return (\n    <Form form={form} onValuesChange={onValuesChange} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...restProps} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableTable = ({\n  rowKey = "id",\n  dataSource,\n  columns,\n  setDataSource,\n  disabled = false,\n  onFormValuesChange,\n  deleteRowCallback,\n  ...restProps\n}: EditableTableProps) => {\n  const components = useMemo(\n    () => ({\n      body: {\n        row: (props: any) => (\n          <EditableTableRow\n            {...props}\n            rowKey={rowKey}\n            onFromaValuesChange={onFormValuesChange}\n          />\n        ),\n        cell: TableCellWrapper,\n      },\n    }),\n    []\n  );\n\n  const handleSave = (row: Record<string, any>) => {\n    const newDataSource = dataSource.map((item) => {\n      if (item[rowKey] === row[rowKey]) {\n        return {\n          ...item,\n          ...row,\n        };\n      }\n      return item;\n    });\n\n    setTimeout(() => {\n      setDataSource(newDataSource);\n    });\n  };\n\n  const handleDeleteRow = (record: Record<string, any>) => {\n    const newDataSource = dataSource.filter(\n      (item) => item[rowKey] !== record[rowKey]\n    );\n    setDataSource(newDataSource);\n    deleteRowCallback?.(record);\n  };\n\n  const newColumns = useMemo(() => {\n    return columns.map((col) => ({\n      ...col,\n      onCell: (record: Record<string, any>) => ({\n        editable: col.editable,\n        editType: col.editType,\n        editProps: col.editProps,\n        component: col.component,\n        disabled,\n        dataIndex: col.dataIndex,\n        record,\n        ruleOptions: col.ruleOptions,\n        rules: col.rules,\n        handleSave,\n      }),\n    }));\n  }, [columns, disabled, handleSave]);\n\n  const finalColumns = [\n    ...newColumns,\n    {\n      title: "操作",\n      key: "action",\n      dataIndex: "action",\n      align: "center",\n      width: 80,\n      fixed: "right",\n      render: (_: any, record: Record<string, any>) => {\n        return (\n          <div style={{ padding: 0 }}>\n            {disabled ? (\n              <Button type=\'link\' danger disabled>\n                删除\n              </Button>\n            ) : (\n              <Popconfirm\n                title=\'是否确定删除此行？\'\n                onConfirm={() => {\n                  handleDeleteRow(record);\n                }}\n              >\n                <Button style={{ padding: 0 }} type=\'link\' danger>\n                  删除\n                </Button>{" "}\n              </Popconfirm>\n            )}\n          </div>\n        );\n      },\n    },\n  ];\n\n  return (\n    <div className={styles.editableTable}>\n      <Table\n        rowKey={rowKey}\n        columns={finalColumns as any}\n        components={components}\n        dataSource={dataSource}\n        pagination={false}\n        tableLayout=\'fixed\'\n        bordered\n        {...restProps}\n      />\n    </div>\n  );\n};\n\nexport default EditableTable;\n'},{fileName:"EditableTable.module.scss",code:".editableTable {\n  :global {\n    .ant-form-item {\n      .ant-form-item-control {\n        .ant-form-item-explain {\n          display: none !important;\n        }\n      }\n    }\n  }\n}"}]),ia=()=>(0,o.jsx)(me,{className:na,title:"可进行编辑的表格组件",codeParams:sa,children:(0,o.jsx)(oa,{})}),da="table_container__jiecw",ca="table_sample__jVvCw",ua=[(0,o.jsx)(ia,{})],ma=()=>(0,o.jsx)("div",{className:da,children:ua.map(((e,n)=>(0,o.jsx)("div",{className:ca,children:e},n)))}),pa=[{path:"/form",children:[{path:"/form/formItemSection",element:(0,o.jsx)(ut,{})},{path:"/form/formListSection",element:(0,o.jsx)($t,{})}]},{path:"/table",element:(0,o.jsx)(ma,{})}],ha=[{path:"/*",element:(0,o.jsx)(z,{})}];b().locale("zh-cn");const ba=()=>{const e=(0,u.Ye)(ha);return(0,o.jsx)("div",{className:"app_container",translate:"no",children:(0,o.jsx)(m.Ay,{locale:p.A,children:e})})},fa=document.getElementById("root");fa&&(0,l.H)(fa).render((0,o.jsx)(d,{children:(0,o.jsx)(r.I9,{children:(0,o.jsx)(ba,{})})}))}},l={};function r(e){var n=l[e];if(void 0!==n)return n.exports;var t=l[e]={id:e,loaded:!1,exports:{}};return a[e].call(t.exports,t,t.exports,r),t.loaded=!0,t.exports}r.m=a,e=[],r.O=(n,t,a,l)=>{if(!t){var o=1/0;for(c=0;c<e.length;c++){t=e[c][0],a=e[c][1],l=e[c][2];for(var s=!0,i=0;i<t.length;i++)(!1&l||o>=l)&&Object.keys(r.O).every((e=>r.O[e](t[i])))?t.splice(i--,1):(s=!1,l<o&&(o=l));if(s){e.splice(c--,1);var d=a();void 0!==d&&(n=d)}}return n}l=l||0;for(var c=e.length;c>0&&e[c-1][2]>l;c--)e[c]=e[c-1];e[c]=[t,a,l]},r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,r.t=function(e,a){if(1&a&&(e=this(e)),8&a)return e;if("object"==typeof e&&e){if(4&a&&e.__esModule)return e;if(16&a&&"function"==typeof e.then)return e}var l=Object.create(null);r.r(l);var o={};n=n||[null,t({}),t([]),t(t)];for(var s=2&a&&e;"object"==typeof s&&!~n.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((n=>o[n]=()=>e[n]));return o.default=()=>e,r.d(l,o),l},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var n=r.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");if(t.length)for(var a=t.length-1;a>-1&&(!e||!/^http(s?):/.test(e));)e=t[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{var e={792:0};r.O.j=n=>0===e[n];var n=(n,t)=>{var a,l,o=t[0],s=t[1],i=t[2],d=0;if(o.some((n=>0!==e[n]))){for(a in s)r.o(s,a)&&(r.m[a]=s[a]);if(i)var c=i(r)}for(n&&n(t);d<o.length;d++)l=o[d],r.o(e,l)&&e[l]&&e[l][0](),e[l]=0;return r.O(c)},t=self.webpackChunkcomposite_component_library=self.webpackChunkcomposite_component_library||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))})();var o=r.O(void 0,[874,134],(()=>r(4849)));o=r.O(o)})();